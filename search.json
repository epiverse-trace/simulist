[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 simulist authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/age-strat-risks.html","id":"population-wide-risks","dir":"Articles","previous_headings":"","what":"Population-wide risks","title":"Age-stratified hospitalisation and death risks","text":"Simulate line list population-wide default risks: hospitalisation risk: 0.2 death risk hospitals 0.5 death risk outside hospitals 0.05 can run another simulation change hospitalisation death risks, inside outside hospital, still applied entire population. scenario probability hospitalised infected higher, mortality risk hospitalised non-hospitalised groups lower.","code":"linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death )  # first 6 rows of linelist head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1 Jessica Galicia Jr confirmed      f  28 2023-01-01           <NA> #> 2  2   Aaron Milasincic confirmed      m  78 2023-01-01           <NA> #> 3  3    Jessica Baldwin confirmed      f  31 2023-01-02           <NA> #> 4  4     Krizma Wilkins  probable      f  12 2023-01-02     2023-01-06 #> 5  5     Joshua Hammond  probable      m  80 2023-01-02           <NA> #> 6  6        Chelsa Bell suspected      f  44 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.9 #> 2       <NA>         2023-01-04        2023-01-07     24.9 #> 3       <NA>         2022-12-30        2023-01-02     24.9 #> 4       <NA>         2023-01-02        2023-01-05       NA #> 5       <NA>         2023-01-06        2023-01-07       NA #> 6       <NA>         2023-01-05        2023-01-07       NA linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.4,   hosp_death_risk = 0.2,   non_hosp_death_risk = 0.01 )  head(linelist) #>   id        case_name case_type gender age date_onset date_admission date_death #> 1  1  Sabreen el-Meer confirmed      f  90 2023-01-01     2023-01-01       <NA> #> 2  2     Camille Bahl  probable      f   1 2023-01-01     2023-01-08       <NA> #> 3  3     Edgar Garcia  probable      m  30 2023-01-01           <NA>       <NA> #> 4  4 Leonel Malabanan confirmed      m   2 2023-01-01           <NA>       <NA> #> 5  5   Jamelia Tafari suspected      f  52 2023-01-01           <NA>       <NA> #> 6  6   Mariela Montes confirmed      f  72 2023-01-01     2023-01-01       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     24.5 #> 2         2022-12-31        2023-01-04       NA #> 3         2022-12-30        2023-01-04       NA #> 4         2023-01-03        2023-01-06     24.5 #> 5         2022-12-30        2023-01-02       NA #> 6         2023-01-02        2023-01-04     24.5"},{"path":"/articles/age-strat-risks.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Age-stratified hospitalisation and death risks","text":"define age-stratified risks, must create table (<data.frame>) contains lower limits age groups respective risks. example hospitalisation risk : 0.2 (20%) aged 80 years older 0.1 (10%) younger 5 years 0.05 (5%) remaining age group oldest age group stops upper age range given population_age argument. default upper age range 90, example oldest age bracket 80-90 (inclusive). minimum age age group inclusive, maximum age age group exclusive, except oldest age group inclusive minimum maximum age. example first age group first element vector, minimum age 1, maximum age four (next age group starts five), hospitalisation risk group 0.1. age group forms row table. minimum age youngest age group must match age range specified population_age argument sim_linelist(), largest age limit risk <data.frame> must older upper age range. conditions met function error. age-stratified risk table match default (c(1, 90)), population_age argument need set match. example, default age range population 1 90 (inclusive). example , lowest age group started 1 oldest age group stopped 90. matches default population_age = c(1, 90). However, see lower age limit exceeds age range function run. order make code run age-stratified hospitalisation risk given, population_age can adjusted. oldest age bracket now 95 100 ([95, 100]). Exactly method age-stratified risks applies death risks. First create <data.frame> age groups respective, case, death risks, supply either hosp_death_risk non_hosp_death_risk arguments, define death risks outside hospital, respectively, . couple examples: now age-stratified tables supplied one risk. However, can supplied simulation. case hospitalisation risk, death risks inside outside hospital, specified.","code":"age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.20 linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk )  head(linelist) #>   id      case_name case_type gender age date_onset date_admission date_death #> 1  1   Urwa el-Azzi suspected      f  26 2023-01-01           <NA>       <NA> #> 2  2 Saabiq al-Miah  probable      m  40 2023-01-01           <NA>       <NA> #> 3  3    Evelyn Meza suspected      f   7 2023-01-04           <NA>       <NA> #> 4  4  Madeline Rush  probable      f  10 2023-01-04           <NA>       <NA> #> 5  5    Jessica Ary suspected      f  70 2023-01-05           <NA>       <NA> #> 6  6     Nicole Lee  probable      f  22 2023-01-04           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>       NA #> 2         2023-01-01        2023-01-05       NA #> 3         2023-01-02        2023-01-04       NA #> 4         2023-01-06        2023-01-07       NA #> 5         2022-12-31        2023-01-05       NA #> 6         2023-01-06        2023-01-08       NA age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        95 0.20  linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) #> Error in .check_risk_df(hosp_risk, age_range = age_range): lower bound of oldest age group must be lower than highest age range age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) )  linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   population_age = c(1, 100) )  head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1 Hishaam el-Soliman  probable      m  66 2023-01-01           <NA> #> 2  2  Ernestina Voegely confirmed      f  46 2023-01-01           <NA> #> 3  3        Ozni Chacon suspected      m  66 2023-01-01           <NA> #> 4  4  Maleeha el-Arafat  probable      f  75 2023-01-01           <NA> #> 5  5     Hamza el-Baksh confirmed      m  47 2023-01-01           <NA> #> 6  6       Carrie Ervin confirmed      f  25 2023-01-02     2023-01-02 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-04        2023-01-06     27.5 #> 3       <NA>         2022-12-31        2023-01-04       NA #> 4       <NA>         2022-12-30        2023-01-03       NA #> 5       <NA>         2022-12-31        2023-01-05     27.5 #> 6       <NA>         2023-01-01        2023-01-03     27.5 age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_hosp_death_risk #>   age_limit risk #> 1         1  0.3 #> 2         5  0.1 #> 3        80  0.6  linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = age_dep_hosp_death_risk ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) ) age_dep_non_hosp_death_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.10  linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   non_hosp_death_risk = age_dep_non_hosp_death_risk ) age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) )  linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   hosp_death_risk = age_dep_hosp_death_risk,   non_hosp_death_risk = age_dep_non_hosp_death_risk )  head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1      Evan Sherman suspected      m  18 2023-01-01           <NA> #> 2  2    Martha Trevino confirmed      f  29 2023-01-01           <NA> #> 3  3    Jihaad el-Noor confirmed      m   8 2023-01-01           <NA> #> 4  4     Mykala Jaquez confirmed      f  56 2023-01-01           <NA> #> 5  5       Mary Morris confirmed      f   1 2023-01-02           <NA> #> 6  6 Hibbaan al-Khalil suspected      m  61 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-01        2023-01-03     24.2 #> 3       <NA>         2023-01-02        2023-01-07     24.2 #> 4       <NA>         2022-12-28        2023-01-04     24.2 #> 5       <NA>         2023-01-01        2023-01-04     24.2 #> 6       <NA>         2022-12-31        2023-01-05       NA"},{"path":"/articles/age-struct-pop.html","id":"uniform-population-age","dir":"Articles","previous_headings":"","what":"Uniform population age","title":"Age structured population","text":"default sim_linelist() simulates individuals ages assuming uniform distribution 1 90. change age range, vector two numbers can supplied population_age argument. simulated outbreak population population ranging 5 75 (inclusive, [5,75]). Note: ages assumed unit years need integers (least “integerish” stored double) can plot age distribution individuals line list, binned 5 year categories. Figure 1: Age distribution individuals simulated line list sampled uniform distribution 5 75. population_age argument left unspecified, assumed default age range 1 90 (c(1, 90)).","code":"linelist <- sim_linelist(   R = 1.3,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = c(5, 75) ) head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1  Mercedes Hamilton confirmed      f  34 2023-01-01           <NA> #> 2  2      Denise Nipper suspected      f  42 2023-01-03     2023-01-03 #> 3  3 Muzammil al-Ansari confirmed      m  21 2023-01-01           <NA> #> 4  4   Ulyaa al-Darwish suspected      f   9 2023-01-01           <NA> #> 5  5    Taylor Guerrero confirmed      f  23 2023-01-04           <NA> #> 6  6     Safawn Wilford confirmed      f  23 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.1 #> 2       <NA>         2023-01-01        2023-01-03       NA #> 3       <NA>         2022-12-31        2023-01-01     24.1 #> 4       <NA>         2023-01-01        2023-01-06       NA #> 5       <NA>         2023-01-03        2023-01-07     24.1 #> 6       <NA>         2022-12-29        2023-01-03     24.1 ggplot(linelist[, c(\"gender\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 75, 5)) +   theme_bw()"},{"path":"/articles/age-struct-pop.html","id":"structured-population-age","dir":"Articles","previous_headings":"","what":"Structured population age","title":"Age structured population","text":"simulate non-uniform age structure create table (<data.frame>) containing age range age bracket population proportion population made age group. example simulate population 30% population 1 19, 40% population 20 59, 30% 60 90. age groups inclusive age brackets overlap. individuals population younger 1 older 90. can plot age distribution see age structure individuals line list. Given relative uniformity age structure specified greatly different uniform age structure plotted , higher upper age limit. data binned 5 year categories facetted gender. Figure 2: Age distribution line list cases facetted gender. age groups specified <data.frame> must non-overlapping contiguous minimum age youngest age group maximum age oldest age group. order words, missing age groups (e.g. 20-40 year olds) without specified proportion. case function error informative error message. example much younger population instead specify: 0.4 (40%) 1-9 years old 0.3 (30%) 10-29 years old 0.2 (20%) 30-59 years old 0.1 (10%) 60-75 years old common useful method plotting age data form age pyramids. partition data gender plot age distribution. Figure 3: Age pyramid simulated line list age structured population. used {ggplot2} package construct age pyramid, however {apyramid} R package R4Epi can assist making plots; can Applied Epidemiology Handbook chapter age pyramids. blog post “Population Pyramid Plots ggplot2” also contains useful tips constructing pyramid plots. shown two age structured examples, number age groups flexible. Therefore coarse population structure two three age groups can specified, precise census demographic data available, several age groups can specified.","code":"age_struct <- data.frame(   age_range = c(\"1-19\", \"20-59\", \"60-90\"),   proportion = c(0.3, 0.4, 0.3),   stringsAsFactors = FALSE ) age_struct #>   age_range proportion #> 1      1-19        0.3 #> 2     20-59        0.4 #> 3     60-90        0.3 linelist <- sim_linelist(   R = 1.3,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct )  head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1 Kathrine Thompson confirmed      f  14 2023-01-01           <NA> #> 2  2  Cameron Stephens  probable      m  65 2023-01-01           <NA> #> 3  3     Lance Raiburn  probable      m  57 2023-01-02           <NA> #> 4  4     Lewis Pierson  probable      m  72 2023-01-03     2023-01-03 #> 5  5      Akiyoshi Lee  probable      m  59 2023-01-03           <NA> #> 6  6  Taamir al-Radwan confirmed      m   5 2023-01-03     2023-01-03 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.2 #> 2 2023-01-05         2023-01-01        2023-01-04       NA #> 3       <NA>         2022-12-30        2023-01-03       NA #> 4       <NA>         2023-01-01        2023-01-04       NA #> 5       <NA>         2023-01-07        2023-01-11       NA #> 6       <NA>         2023-01-03        2023-01-05     25.2 ggplot(linelist[, c(\"gender\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 90, 5)) +   theme_bw() +   facet_wrap(vars(gender)) age_struct <- data.frame(   age_range = c(\"1-9\", \"10-29\", \"30-59\", \"60-75\"),   proportion = c(0.4, 0.3, 0.2, 0.1),   stringsAsFactors = FALSE ) age_struct #>   age_range proportion #> 1       1-9        0.4 #> 2     10-29        0.3 #> 3     30-59        0.2 #> 4     60-75        0.1 linelist <- sim_linelist(   R = 1.3,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct )  head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1        Jia Gopalan confirmed      m   8 2023-01-01           <NA> #> 2  2     Raymond Staten confirmed      m  29 2023-01-01           <NA> #> 3  3          Joshua Su confirmed      m   2 2023-01-02           <NA> #> 4  4       Kiona Arviso confirmed      f  22 2023-01-03     2023-01-05 #> 5  5        Althea Fink  probable      f  46 2023-01-02           <NA> #> 6  6 Shihaab el-Khalifa  probable      m  13 2023-01-03           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.5 #> 2       <NA>         2022-12-28        2023-01-01     24.5 #> 3       <NA>         2023-01-02        2023-01-04     24.5 #> 4 2023-02-03         2022-12-31        2023-01-05     24.5 #> 5       <NA>         2022-12-31        2023-01-03       NA #> 6       <NA>         2023-01-07        2023-01-07       NA linelist_m <- subset(linelist, subset = gender == \"m\") age_cats_m <- as.data.frame(table(floor(linelist_m$age / 5) * 5)) colnames(age_cats_m) <- c(\"AgeCat\", \"Population\") age_cats_m <- cbind(age_cats_m, gender = \"m\") linelist_f <- subset(linelist, subset = gender == \"f\") age_cats_f <- as.data.frame(table(floor(linelist_f$age / 5) * 5)) colnames(age_cats_f) <- c(\"AgeCat\", \"Population\") age_cats_f$Population <- -age_cats_f$Population age_cats_f <- cbind(age_cats_f, gender = \"f\") age_cats <- rbind(age_cats_m, age_cats_f)  breaks <- pretty(range(age_cats$Population), n = 10) labels <- abs(breaks)  ggplot(age_cats) +   geom_col(mapping = aes(x = Population, y = factor(AgeCat), fill = gender)) +   scale_y_discrete(name = \"Lower bound of Age Category\") +   scale_x_continuous(name = \"Population\", breaks = breaks, labels = labels) +   scale_fill_manual(values = c(\"#F04A4C\", \"#106BA0\")) +   theme_bw()"},{"path":"/articles/design-principles.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Design Principles for {simulist}","text":"{simulist} package aims simulate data infectious disease outbreaks, primarily line list data, also contacts data. output types associated exported function: sim_linelist() sim_contacts(). also function simulate output data types, sim_outbreak(). latter function useful interoperability {epicontacts} R package (see visualisation vignette), provides linked line list contacts datasets, common outbreaks, MERS dataset within {outbreaks} R package.","code":""},{"path":"/articles/design-principles.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Design Principles for {simulist}","text":"simulation functions either return <data.frame> list <data.frame>s. consistency across functions well-known data structure makes easy understand users.","code":""},{"path":"/articles/design-principles.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Design Principles for {simulist}","text":"using age-stratified risks hospitalisation deaths (see Age-stratified hospitalisation death risks vignette details) interaction function arguments. <data.frame> defines age-stratification hosp_risk, hosp_death_risk non_hosp_death_risk arguments gives lower bound age groups. upper bound age groups derived next lower bound, upper bound oldest age group defined upper age given population_age argument. interaction arguments ideal, can difficult understand users (outlined Tidy Design book), however, interaction change interpretation argument convoluted. design decision taken changed structure <data.frame> accepted input *_risk arguments two columns lower upper age limit, single column lower age bounds. change made pull request #14 follows design {socialmixr} defining age bounds. newer structure judged preferred prevents input errors user age bounds overlapping non-contiguous (.e. missing age groups). column names contact relationships (edges network) called . Names contacts table match {epicontacts} <epicontacts> objects. column names two contacts provided epicontacts::make_epicontacts() arguments silently renamed resulting <epicontacts> object. making column names output sim_contacts() sim_outbreak() prevents confusion used {epicontacts}. names also preferred usefully descriptive. Visualising simulated data vignette contains interactive data visualisation rendered web. enforces limitations. vignette uses output: rmarkdown::html_document() instead output: bookdown::html_vignette2 contain pkgdown: as_is: true yaml metadata, order interactive figures render operate correctly. means vignette figures automatically numbered start “Figure x” (x replaced number). Instead, decided vignette information manually written, manually updated number order figures changed. ideal solution automation preferred, balance, decided addition interactive visualisation {epicontacts} outweighed downside manual figure labelling. Exported functions simulate data use naming convention sim_*() (* placeholder). Internal functions simulate dot (.) prefix (e.g. .sim_bp_linelist()). Functions create fixed data structures (.e. data factory functions) naming convention (create_*() .create_*()). use config argument simulation function reduce number arguments exported functions provide simple user-interface possible. choice gets argument function body confined config list based preconceived frequency use, importance technical detail. say, settings unlikely changed user changed require advanced understanding simulation model placed within config, given default values create_config(). column names line list data produced sim_linelist() sim_outbreak() matches tag names used {linelist} R package (Epiverse-TRACE R package). continuity design functional reason. line list data {simulist} functions tagged sensu {linelist} tagging. inconsistent use hospitalisation admission; simulated line list date_admission, internally package uses hospitalisation (e.g. .add_hospitalisation()). think hospitalisation descriptive date_admission used {linelist}.","code":""},{"path":"/articles/design-principles.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Design Principles for {simulist}","text":"aim restrict number dependencies minimal required set ease maintenance. current hard dependencies : {stats} {checkmate} {epiparameter} {bpmodels} {randomNames} {stats} distributed R language viewed lightweight dependency, already installed user’s machine R. {checkmate} input checking package widely used across Epiverse-TRACE packages. {epiparameter} used easily access epidemiological parameters package’s library, package currently unstable actively developed, however, using another package can inform development path {epiparameter}. {bpmodels} used handle single-type branching process model, taken dependency implementing different transmission models within {simulist} beyond package scope scale implement models generate line list data. {randomNames} provides utility function generating random names case contact data. functionality replicated {simulist}, however {randomNames} package maintained contains range name generation settings warrants use dependency. soft dependencies (minimum version requirements) : {incidence2} (>= 2.1.0) {epicontacts} (>= 1.1.3) {knitr} {ggplot2} {bookdown} {rmarkdown} {spelling} {testthat} (>= 3.0.0) {knitr}, {bookdown}, {rmarkdown}, used generating documentation. {spelling} {testthat} used testing code base. {ggplot2} used plotting within vignettes. {incidence2} {epicontacts} used vignettes demonstrate interoperability downstream packages, focus data visualisation.","code":""},{"path":"/articles/design-principles.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Design Principles for {simulist}","text":"special requirements contributing {simulist}, please follow package contributing guide.","code":""},{"path":"/articles/simulist.html","id":"case-type","dir":"Articles","previous_headings":"","what":"Case type","title":"Getting Started with {simulist}","text":"infectious disease outbreak may possible confirm every infection case. confirmed case typically defined via diagnostic test. several reasons case may confirmed, including limited testing capacity mild non-specific early symptoms, especially fast growing epidemics. therefore include two categories cases: probable suspected. example, probable cases may show clinical evidence disease , , confirmed diagnostic test. Suspected cases possibly infected show clear clinical epidemiological evidence, diagnostic test performed. Hence distribution suspected/probable/confirmed depend pathogen characteristics, outbreak-specific definitions, resources available. line list output {simulist} simulation contains column (case_type) type case. {simulist} can simulate varying probabilities case suspected, probable confirmed. default sim_linelist() function uses probabilities suspected = 0.2, probable = 0.3 confirmed = 0.5. alter probabilities, supply named vector sim_linelist() argument case_type_probs. vector contain three numbers, names suspected, probable confirmed, numbers summing one. change values simulate outbreak proportion cases confirmed laboratory testing high. also possible set one categories 1, case every case type. way {simulist} assigns case types pasting case types onto existing case data. Thus, viewed true underlying data cases simulation confirmed, lack information cases. cases output line list incorrectly attributed probable suspected infected. say, individuals line list, whatever case type, infected outbreak.","code":"linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id       case_name case_type gender age date_onset date_admission date_death #> 1  1   Krista Yanito confirmed      f  21 2023-01-01           <NA>       <NA> #> 2  2    Keiley Moore  probable      f  87 2023-01-01           <NA>       <NA> #> 3  3     Lance Dance confirmed      m  62 2023-01-02           <NA>       <NA> #> 4  4 Sadie Rodriguez confirmed      f  12 2023-01-02     2023-01-10       <NA> #> 5  5 Rumaana al-Bari  probable      f  81 2023-01-01     2023-01-02       <NA> #> 6  6 Tanisha Johnson confirmed      f  54 2023-01-02           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     26.3 #> 2         2023-01-02        2023-01-06       NA #> 3         2023-01-02        2023-01-05     26.3 #> 4         2023-01-03        2023-01-05     26.3 #> 5         2022-12-27        2023-01-04       NA #> 6         2022-12-29        2023-01-04     26.3 linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   case_type_probs = c(suspected = 0.05, probable = 0.05, confirmed = 0.9) ) head(linelist) #>   id               case_name case_type gender age date_onset date_admission #> 1  1           Salma al-Jama confirmed      f  52 2023-01-01     2023-01-01 #> 2  2         Abbaad al-Amini confirmed      m  10 2023-01-02     2023-01-02 #> 3  3 Alejandra Flores Fierro confirmed      f  19 2023-01-01           <NA> #> 4  4               Zoe Begay confirmed      f   9 2023-01-02           <NA> #> 5  5         Casimer Traylor confirmed      m   5 2023-01-01           <NA> #> 6  6    Varun Santos Madayag confirmed      m  53 2023-01-03           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.9 #> 2       <NA>         2023-01-03        2023-01-04     25.9 #> 3       <NA>         2022-12-27        2023-01-04     25.9 #> 4       <NA>         2023-01-01        2023-01-04     25.9 #> 5       <NA>         2023-01-01        2023-01-06     25.9 #> 6       <NA>         2022-12-29        2023-01-07     25.9"},{"path":"/articles/simulist.html","id":"conditioning-simulation-on-outbreak-size","dir":"Articles","previous_headings":"","what":"Conditioning simulation on outbreak size","title":"Getting Started with {simulist}","text":"reproduction number strong influence size outbreak. However, {simulist} package generates line list data using stochastic algorithm, even \\(R < 1\\) can produce substantial outbreak chance, \\(R >> 1\\) sometimes produce vast epidemic one simulation (.e. one replicate) due stochasticity. requiring minimum outbreak size can specify min_outbreak_size argument sim_linelist(). default set 10. means simulation return line list conditioning met. words, simulation resimulate branching process model outbreak infects least 10 people. requiring line list represents large outbreak, COVID-19 outbreak, setting min_outbreak_size larger number guarantees line list least size. simulate line list requiring least 250 cases. amount time simulation takes can determined reproduction number (R) minimum outbreak size (min_outbreak_size). min_outbreak_size large, example hundreds thousands cases, reproduction number one, take many branching process simulations finding one produces sufficiently large epidemic.","code":"linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   min_outbreak_size = 250 ) head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1      Joseph Moore  probable      m  45 2023-01-01           <NA> #> 2  2  Shaahira al-Aman confirmed      f  30 2023-01-02     2023-01-05 #> 3  3 Anthony Spagnuolo suspected      m  81 2023-01-02     2023-01-03 #> 4  4   Cameron Russell  probable      m  81 2023-01-01           <NA> #> 5  5  Siddeeqi al-Basa confirmed      m  40 2023-01-04           <NA> #> 6  6      Hunter Brice  probable      m  83 2023-01-02     2023-01-03 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-01        2023-01-05       25 #> 3       <NA>         2023-01-06        2023-01-07       NA #> 4       <NA>         2022-12-29        2023-01-02       NA #> 5       <NA>         2023-01-02        2023-01-03       25 #> 6       <NA>         2023-01-01        2023-01-04       NA"},{"path":"/articles/simulist.html","id":"anonymous-line-list","dir":"Articles","previous_headings":"","what":"Anonymous line list","title":"Getting Started with {simulist}","text":"default sim_linelist() provides name individual line list. anonymised line list required add_names argument sim_linelist() can set FALSE. names used line list produced random {randomNames} R package. Therefore, even add_names = TRUE personal data real individuals produced shared.","code":"linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   add_names = FALSE ) head(linelist) #>   id case_type gender age date_onset date_admission date_death #> 1  1 confirmed      m   3 2023-01-01           <NA>       <NA> #> 2  2 confirmed      m  23 2023-01-01           <NA>       <NA> #> 3  3 confirmed      m  41 2023-01-02           <NA>       <NA> #> 4  4 confirmed      f  88 2023-01-01           <NA>       <NA> #> 5  5 confirmed      f  40 2023-01-02     2023-01-03       <NA> #> 6  6 confirmed      m  79 2023-01-02           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     25.5 #> 2         2023-01-03        2023-01-04     25.5 #> 3         2022-12-31        2023-01-05     25.5 #> 4         2023-01-01        2023-01-04     25.5 #> 5         2023-01-02        2023-01-05     25.5 #> 6         2023-01-02        2023-01-03     25.5"},{"path":"/articles/simulist.html","id":"population-age","dir":"Articles","previous_headings":"","what":"Population age","title":"Getting Started with {simulist}","text":"overview line list can simulated uniform structured population age distribution see vignette dedicated topic.","code":""},{"path":"/articles/simulist.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Getting Started with {simulist}","text":"overview line list can simulated age-stratified (age-dependent) hospitalisation death risks see vignette dedicated topic.","code":""},{"path":"/articles/simulist.html","id":"simulate-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate contacts table","title":"Getting Started with {simulist}","text":"simulate contacts table, sim_contacts() function can used. requires contacts distribution (.e. distribution describing variability number contacts different individuals within population).","code":"contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact_distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(l = 5) ) #> Citation cannot be created as author, year, journal or title is missing  contacts <- sim_contacts(   R = 1.1,   serial_interval = serial_interval,   contact_distribution = contact_distribution ) head(contacts) #>                      from                      to cnt_age cnt_gender #> 1 Abdul Maalik al-Shaheed Dominick Rubner Lansing      45          m #> 2 Abdul Maalik al-Shaheed         Nuzha al-Shahin      12          f #> 3 Abdul Maalik al-Shaheed        Sariah Perkowski      43          f #> 4 Abdul Maalik al-Shaheed          Aaisha al-Pour      49          f #> 5 Dominick Rubner Lansing             Cyrel Lewis      40          m #> 6 Dominick Rubner Lansing      Mahuroos al-Mannan      15          m #>   date_first_contact date_last_contact was_case           status #> 1         2022-12-30        2023-01-04        Y             case #> 2         2023-01-01        2023-01-05        N lost_to_followup #> 3         2023-01-02        2023-01-05        N lost_to_followup #> 4         2023-01-02        2023-01-04        N   under_followup #> 5         2023-01-04        2023-01-05        Y             case #> 6         2023-01-01        2023-01-02        N   under_followup"},{"path":"/articles/simulist.html","id":"simulate-both-line-list-and-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate both line list and contacts table","title":"Getting Started with {simulist}","text":"produce line list contacts table outbreak, sim_linelist() sim_contacts() used separately due stochastic algorithm, meaning data line list discordant contacts table. order simulate line list contacts table outbreak sim_outbreak() function required. simulate single outbreak return line list contacts table. inputs sim_outbreak() combination inputs required sim_linelist() sim_contacts(). sim_outbreak() features sim_linelist() sim_contacts(), includes simulating age-stratified risks hospitalisation death, probability case types contact tracing status can modified.","code":"outbreak <- sim_outbreak(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   contact_distribution = contact_distribution ) head(outbreak$linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1     Moriyah Quint confirmed      f  79 2023-01-01           <NA> #> 2  2        Ivon Seipp suspected      f  86 2023-01-01           <NA> #> 3  3 Suhaib al-Abraham confirmed      m  65 2023-01-02     2023-01-03 #> 4  4       Westen Boon confirmed      m  27 2023-01-01     2023-01-06 #> 5  5      Edgar Gurule confirmed      m  18 2023-01-01           <NA> #> 6  6       Van Panchal confirmed      m  14 2023-01-03     2023-01-03 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.7 #> 2       <NA>         2023-01-03        2023-01-04       NA #> 3       <NA>         2022-12-30        2023-01-03     25.7 #> 4       <NA>         2022-12-28        2023-01-01     25.7 #> 5       <NA>         2022-12-31        2023-01-03     25.7 #> 6       <NA>         2023-01-04        2023-01-06     25.7 head(outbreak$contacts) #>            from                to cnt_age cnt_gender date_first_contact #> 1 Moriyah Quint        Ivon Seipp      86          f         2023-01-03 #> 2 Moriyah Quint Suhaib al-Abraham      65          m         2022-12-30 #> 3 Moriyah Quint  Bishal Dethouars      37          m         2022-12-31 #> 4 Moriyah Quint  Sarina Gutierrez       3          f         2023-01-01 #> 5 Moriyah Quint      Michael Keys      79          m         2022-12-31 #> 6 Moriyah Quint  Adeeb el-Atallah      29          m         2022-12-31 #>   date_last_contact was_case         status #> 1        2023-01-04        Y           case #> 2        2023-01-03        Y           case #> 3        2023-01-03        N under_followup #> 4        2023-01-04        N under_followup #> 5        2023-01-01        N under_followup #> 6        2023-01-05        N under_followup"},{"path":"/articles/simulist.html","id":"using-functions-for-distributions-instead-of-epidist","dir":"Articles","previous_headings":"","what":"Using functions for distributions instead of <epidist>","title":"Getting Started with {simulist}","text":"possible use anonymous function instead <epidist> object specifying parameters delay contact distributions. recommend using <epidist> objects outline alternative approach. approach using anonymous functions can used sim_linelist() sim_contacts().","code":"outbreak <- sim_outbreak(   R = 1.1,   serial_interval = function(x) rgamma(n = x, shape = 2, scale = 2),   onset_to_hosp = function(x) rlnorm(n = x, meanlog = 1.5, sdlog = 0.5),   onset_to_death = function(x) rweibull(n = x, shape = 0.5, scale = 0.2),   contact_distribution = function(x) rnbinom(n = x, mu = 5, size = 0.5) ) head(outbreak$linelist) #>   id           case_name case_type gender age date_onset date_admission #> 1  1         Cole Dilley  probable      m  47 2023-01-01           <NA> #> 2  2       Isaac Burnley confirmed      m  79 2023-01-02           <NA> #> 3  3       Makenzie Root confirmed      f  39 2023-01-04           <NA> #> 4  4        Roshan Kishi confirmed      m   7 2023-01-01           <NA> #> 5  5         Peter Still confirmed      m  10 2023-01-08           <NA> #> 6  6 Sulaimaan al-Salehi confirmed      m  38 2023-01-05     2023-01-10 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-03        2023-01-05     23.5 #> 3       <NA>         2022-12-28        2023-01-05     23.5 #> 4       <NA>         2023-01-02        2023-01-03     23.5 #> 5       <NA>         2023-01-09        2023-01-10     23.5 #> 6       <NA>         2022-12-31        2023-01-05     23.5 head(outbreak$contacts) #>            from            to cnt_age cnt_gender date_first_contact #> 1   Cole Dilley Isaac Burnley      79          m         2023-01-03 #> 2   Cole Dilley Makenzie Root      39          f         2022-12-28 #> 3   Cole Dilley  Roshan Kishi       7          m         2023-01-02 #> 4   Cole Dilley    Alan Barry      17          m         2023-01-05 #> 5   Cole Dilley    Hibaq Bank      22          f         2023-01-01 #> 6 Makenzie Root   Peter Still      10          m         2023-01-09 #>   date_last_contact was_case           status #> 1        2023-01-05        Y             case #> 2        2023-01-05        Y             case #> 3        2023-01-03        Y             case #> 4        2023-01-07        N   under_followup #> 5        2023-01-02        N lost_to_followup #> 6        2023-01-10        Y             case"},{"path":"/articles/vis-linelist.html","id":"visualising-incidence-of-onset-hospitalisation-and-death","dir":"Articles","previous_headings":"","what":"Visualising incidence of onset, hospitalisation and death","title":"Visualising simulated data","text":"section vignette heavily based upon examples given Get Started vignette {incidence2} package. highly recommended read documentation supplied {incidence2} package explore full range functionality. visualise number cases onset particular day, {incidence2} package, dedicated class (<incidence2>) used handling plotting data. Currently {simulist} outputs dates rounded nearest day, .e. can half way day. obvious R prints dates nearest day default, removing date class (using unclass()) can see decimals (R stores dates internally number days since 1970-01-01). Note storing dates precise doubles integer days may change near future. interval = \"daily\" required {incidence2} requires rounded dates aggregate cases per unit time specifying interval automatically us. possible every date onset symptoms, resulting dates missing entries. taken care complete_dates() function {incidence2}. Figure 1: Daily incidence cases symptom onset including days zero cases. Alternatively, incidence can plotting weekly: Figure 2: Weekly incidence cases symptom onset order check differences group line list data, example gender, <incidence2> data object can recreated, specifying columns group . Figure 3: Weekly incidence cases symptom onset facetted gender. visualise onset, hospitalisation death incidence plot can jointly specified date_index argument incidence2::incidence(). Figure 4: Daily incidence cases symptom onset incidence hospitalisations deaths.","code":"# create incidence object daily <- incidence(x = linelist, date_index = \"date_onset\", interval = \"daily\") # impute for days without cases daily <- complete_dates(daily) plot(daily) weekly <- incidence(linelist, date_index = \"date_onset\", interval = \"isoweek\") plot(weekly) weekly <- incidence(   linelist,   date_index = \"date_onset\",   interval = \"isoweek\",   groups = \"gender\" ) plot(weekly) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     hospitalisation = \"date_admission\",     death = \"date_death\"   ),   interval = \"daily\",   groups = \"gender\" ) daily <- complete_dates(daily) plot(daily)"},{"path":"/articles/vis-linelist.html","id":"demographic-data","dir":"Articles","previous_headings":"","what":"Demographic data","title":"Visualising simulated data","text":"Please see Age structured population vignette examples plot distribution ages within line list data set, including age pyramids. plotting code vignettes hidden default, click Code button arrow reveal plotting code.","code":""},{"path":"/articles/vis-linelist.html","id":"visualising-contact-data","dir":"Articles","previous_headings":"","what":"Visualising contact data","title":"Visualising simulated data","text":"section vignette based upon examples {epicontacts} R package documentation examples provided Epidemiological R Handbook chapter transmission chains. recommend going documentation {epicontacts} R package see plotting data wrangling functionality. Just utilised <incidence2> class {incidence2} package handle plot incidence data, going use <epicontacts> class {epicontacts} R package handle plot epidemiological contact data. benefit using {epicontacts} {incidence2}, fact default plotting method supplied package. Advanced Additionally, {epicontacts} provides access network plotting JavaScript libraries via {visNetwork} {threejs} R packages. {epicontacts} function make_epicontacts() requires line list contacts table, run sim_outbreak() function produce . use epidemiological delay distributions used simulate line list . need extra distribution simulate outbreak, contact distribution (see documentation ?sim_outbreak detail). create distribution using {epiparameter} package. Now can simulate outbreak: Using line list contacts data simulated can create <epicontacts> object. <epicontacts> object comes custom printing feature see data. plot contact network can use plotting method supplied {epicontacts} automatically recognised {epicontacts} package loaded (done library(epicontacts)). viewing vignette web (web browser) graph interactive allow highlight individuals network using drop-menu, zoom plot scrolling, move network using mouse drag drop. Figure 5: Contact network infectious disease outbreak. includes contacts, .e. individuals infected infected also option plot contacts network 3D using epicontacts::graph3D().","code":"contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact_distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(l = 5) ) #> Citation cannot be created as author, year, journal or title is missing set.seed(1) outbreak <- sim_outbreak(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   contact_distribution = contact_distribution ) head(outbreak$linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1 Jessica Galicia Jr confirmed      f  28 2023-01-01           <NA> #> 2  2   Aaron Milasincic confirmed      m  78 2023-01-01           <NA> #> 3  3    Jessica Baldwin confirmed      f  31 2023-01-02           <NA> #> 4  4     Krizma Wilkins  probable      f  12 2023-01-02     2023-01-06 #> 5  5     Joshua Hammond  probable      m  80 2023-01-02           <NA> #> 6  6        Chelsa Bell suspected      f  44 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.9 #> 2       <NA>         2023-01-04        2023-01-07     24.9 #> 3       <NA>         2022-12-30        2023-01-02     24.9 #> 4       <NA>         2023-01-02        2023-01-05       NA #> 5       <NA>         2023-01-06        2023-01-07       NA #> 6       <NA>         2023-01-05        2023-01-07       NA head(outbreak$contacts) #>                 from               to cnt_age cnt_gender date_first_contact #> 1 Jessica Galicia Jr Aaron Milasincic      78          m         2023-01-04 #> 2 Jessica Galicia Jr Taqiyya el-Faraj      62          f         2022-12-29 #> 3 Jessica Galicia Jr     Derian Vigil      42          m         2023-01-06 #> 4 Jessica Galicia Jr  Aaida al-Shaikh      70          f         2022-12-31 #> 5 Jessica Galicia Jr       Deekota Ly      74          m         2022-12-28 #> 6   Aaron Milasincic  Jessica Baldwin      31          f         2022-12-30 #>   date_last_contact was_case           status #> 1        2023-01-07        Y             case #> 2        2023-01-03        N   under_followup #> 3        2023-01-07        N   under_followup #> 4        2023-01-03        N lost_to_followup #> 5        2023-01-02        N   under_followup #> 6        2023-01-02        Y             case epicontacts <- make_epicontacts(   linelist = outbreak$linelist,   contacts = outbreak$contacts,   id = \"case_name\",   from = \"from\",   to = \"to\",   directed = TRUE ) epicontacts #>  #> /// Epidemiological Contacts // #>  #>   // class: epicontacts #>   // 42 cases in linelist; 172 contacts;  directed  #>  #>   // linelist #> Warning: `tbl_df()` was deprecated in dplyr 1.0.0. #> ℹ Please use `tibble::as_tibble()` instead. #> ℹ The deprecated feature was likely used in the epicontacts package. #>   Please report the issue at <https://github.com/reconhub/epicontacts/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> # A tibble: 42 × 11 #>    id    id.1        case_type gender   age date_onset date_admission date_death #>    <chr> <chr>       <chr>     <chr>  <int> <date>     <date>         <date>     #>  1 1     Jessica Ga… confirmed f         28 2023-01-01 NA             NA         #>  2 2     Aaron Mila… confirmed m         78 2023-01-01 NA             NA         #>  3 3     Jessica Ba… confirmed f         31 2023-01-02 NA             NA         #>  4 4     Krizma Wil… probable  f         12 2023-01-02 2023-01-06     NA         #>  5 5     Joshua Ham… probable  m         80 2023-01-02 NA             NA         #>  6 6     Chelsa Bell suspected f         44 2023-01-02 NA             NA         #>  7 7     Abigail Ho… suspected f         74 2023-01-03 NA             2023-01-14 #>  8 8     Tyler Mcgo… confirmed m         26 2023-01-02 NA             NA         #>  9 9     James Kim   confirmed m         33 2023-01-02 NA             NA         #> 10 10    Noah Bobo   probable  m          4 2023-01-02 2023-01-03     NA         #> # ℹ 32 more rows #> # ℹ 3 more variables: date_first_contact <date>, date_last_contact <date>, #> #   ct_value <dbl> #>  #>   // contacts #>  #> # A tibble: 172 × 8 #>    from   to    cnt_age cnt_gender date_first_contact date_last_contact was_case #>    <chr>  <chr>   <int> <chr>      <date>             <date>            <chr>    #>  1 Jessi… Aaro…      78 m          2023-01-04         2023-01-07        Y        #>  2 Jessi… Taqi…      62 f          2022-12-29         2023-01-03        N        #>  3 Jessi… Deri…      42 m          2023-01-06         2023-01-07        N        #>  4 Jessi… Aaid…      70 f          2022-12-31         2023-01-03        N        #>  5 Jessi… Deek…      74 m          2022-12-28         2023-01-02        N        #>  6 Aaron… Jess…      31 f          2022-12-30         2023-01-02        Y        #>  7 Aaron… Kriz…      12 f          2023-01-02         2023-01-05        Y        #>  8 Aaron… Josh…      80 m          2023-01-06         2023-01-07        Y        #>  9 Aaron… Joan…      19 f          2022-12-30         2023-01-03        N        #> 10 Aaron… Tecu…      82 m          2023-01-05         2023-01-07        N        #> # ℹ 162 more rows #> # ℹ 1 more variable: status <chr> plot(epicontacts)"},{"path":"/articles/vis-linelist.html","id":"visualising-other-line-list-information","dir":"Articles","previous_headings":"","what":"Visualising other line list information","title":"Visualising simulated data","text":"aspects line list data can plotted like added vignette please make issue pull request.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer, copyright holder. Carmen Tamayo. Author. Hugo Gruson. Contributor. Pratik R. Gupte. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J, Tamayo C (2024). simulist: Tools Simulated Line list Data. R package version 0.0.0.9000, https://epiverse-trace.github.io/simulist/, https://github.com/epiverse-trace/simulist.","code":"@Manual{,   title = {simulist: Tools to Simulated Line list Data},   author = {Joshua W. Lambert and Carmen Tamayo},   year = {2024},   note = {R package version 0.0.0.9000, https://epiverse-trace.github.io/simulist/},   url = {https://github.com/epiverse-trace/simulist}, }"},{"path":"/index.html","id":"simulist-simulate-line-list-data-","dir":"","previous_headings":"","what":"Tools to Simulated Line list Data","title":"Tools to Simulated Line list Data","text":"simulist R package simulate individual-level infectious disease outbreak data, including line lists contact tracing data. can often useful synthetic datasets like available demonstrating outbreak analytics techniques testing new analysis methods. simulist developed Centre Mathematical Modelling Infectious Diseases London School Hygiene Tropical Medicine part Epiverse-TRACE.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Simulated Line list Data","text":"can install development version simulist GitHub :","code":"# check whether {pak} is installed if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/simulist\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Tools to Simulated Line list Data","text":"line list simulation requires define serial interval, onset--hospitalisation delay, onset--death delay. can load library epidemiological parameters epiparameter R package available, database yet (serial interval COVID-19) can define . simulate line list COVID-19 assumed reproduction number (R) 1.1 use sim_linelist() function. Using reproduction number greater one means likely get reasonably sized outbreak (10 - 1000 cases, varying due stochastic simulation). set reproduction number high (e.g. >5) outbreak can become extremely large. example, line list simulated using default values (see ?sim_linelist). default hospitalisation risk assumed 0.2 (.e. 20% probability infected individual becomes hospitalised) start date outbreak 1st January 2023. modify either , can specify function. simulate table contacts cases (.e. reflect contact tracing dataset) can use serial interval defined example . additionally need contact distribution, represents probability person infected individual, also given number contacts become infected. line list contacts table required, can jointly simulated using sim_outbreak() function. uses inputs sim_linelist() sim_contacts() produce line list contacts table outbreak (arguments also default settings functions).","code":"library(simulist) library(epiparameter) # create COVID-19 serial interval serial_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"serial interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id        case_name case_type gender age date_onset date_admission date_death #> 1  1 Hamdi el-Abdalla confirmed      m  76 2023-01-01           <NA>       <NA> #> 2  2     Tosha Aragon suspected      f  50 2023-01-02           <NA>       <NA> #> 3  3         May Chen  probable      f   7 2023-01-03     2023-01-14       <NA> #> 4  4    Ellen Tremmel confirmed      f  25 2023-01-02           <NA>       <NA> #> 5  5  Nathaniel Beard suspected      m  38 2023-01-03           <NA>       <NA> #> 6  6     Amanda Silas  probable      f  66 2023-01-03           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     23.4 #> 2         2023-01-01        2023-01-05       NA #> 3         2023-01-02        2023-01-04       NA #> 4         2023-01-02        2023-01-04     23.4 #> 5         2023-01-01        2023-01-03       NA #> 6         2023-01-04        2023-01-06       NA linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.01,   outbreak_start_date = as.Date(\"2019-12-01\") ) head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1 Shalamar Robinson confirmed      f  14 2019-12-01           <NA> #> 2  2     Billye Coyhis confirmed      f  23 2019-12-01           <NA> #> 3  3  Gregory Williams  probable      m  55 2019-12-01           <NA> #> 4  4 Adrianna Martinez confirmed      f  11 2019-12-02           <NA> #> 5  5 Ashley Dillingham suspected      f  62 2019-12-03           <NA> #> 6  6       Jaime Quirk  probable      m   5 2019-12-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.9 #> 2       <NA>         2019-12-04        2019-12-05     25.9 #> 3       <NA>         2019-11-29        2019-12-02       NA #> 4       <NA>         2019-12-01        2019-12-03     25.9 #> 5       <NA>         2019-11-30        2019-12-04       NA #> 6       <NA>         2019-11-29        2019-12-02       NA contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact_distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(l = 5) ) #> Citation cannot be created as author, year, journal or title is missing  contacts <- sim_contacts(   R = 1.1,   serial_interval = serial_interval,   contact_distribution = contact_distribution ) head(contacts) #>               from                      to cnt_age cnt_gender #> 1 Benton Fernandez        Scotland Landers      42          m #> 2 Benton Fernandez              Anna Zahir      83          f #> 3 Benton Fernandez             Dennis Mars      46          m #> 4 Benton Fernandez              Zvi Castle      73          f #> 5 Benton Fernandez              Erick Leon      58          m #> 6 Benton Fernandez Casady Parlin-Three Sti      30          f #>   date_first_contact date_last_contact was_case           status #> 1         2022-12-29        2023-01-04        Y             case #> 2         2023-01-02        2023-01-02        Y             case #> 3         2023-01-01        2023-01-04        N          unknown #> 4         2023-01-04        2023-01-05        N lost_to_followup #> 5         2023-01-03        2023-01-06        N lost_to_followup #> 6         2023-01-02        2023-01-04        N   under_followup outbreak <- sim_outbreak(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   contact_distribution = contact_distribution ) head(outbreak$linelist) #>   id             case_name case_type gender age date_onset date_admission #> 1  1            Kevin Shah confirmed      m  37 2023-01-01           <NA> #> 2  2       Alexandra Clark confirmed      f  45 2023-01-02           <NA> #> 3  3         Faalih el-Dia confirmed      m  11 2023-01-06     2023-01-07 #> 4  4     Crystal O'Donnell suspected      f  34 2023-01-02           <NA> #> 5  5           Austin Diaz confirmed      m  13 2023-01-02     2023-01-21 #> 6  6 Tristin Clinkingbeard confirmed      m  38 2023-01-06     2023-01-10 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     26.5 #> 2       <NA>         2023-01-03        2023-01-05     26.5 #> 3       <NA>         2022-12-29        2023-01-03     26.5 #> 4       <NA>         2023-01-02        2023-01-03       NA #> 5       <NA>         2023-01-04        2023-01-06     26.5 #> 6       <NA>         2023-01-08        2023-01-09     26.5 head(outbreak$contacts) #>         from               to cnt_age cnt_gender date_first_contact #> 1 Kevin Shah  Alexandra Clark      45          f         2023-01-03 #> 2 Kevin Shah    Faalih el-Dia      11          m         2022-12-29 #> 3 Kevin Shah   Myranda Gleitz      77          f         2023-01-02 #> 4 Kevin Shah        Kento Nay      21          m         2023-01-04 #> 5 Kevin Shah Gabriel Cardenas      59          m         2023-01-04 #> 6 Kevin Shah     Ileana Ponce      24          f         2022-12-29 #>   date_last_contact was_case         status #> 1        2023-01-05        Y           case #> 2        2023-01-03        Y           case #> 3        2023-01-04        N under_followup #> 4        2023-01-07        N under_followup #> 5        2023-01-07        N        unknown #> 6        2023-01-03        N under_followup"},{"path":"/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Tools to Simulated Line list Data","text":"report bug please open issue.","code":""},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Tools to Simulated Line list Data","text":"Contributions simulist welcomed. Please follow package contributing guide.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Tools to Simulated Line list Data","text":"Please note simulist project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Tools to Simulated Line list Data","text":"","code":"citation(\"simulist\") #> To cite package 'simulist' in publications use: #>  #>   Lambert J, Tamayo C (2024). _simulist: Tools to Simulated Line list #>   Data_. R package version 0.0.0.9000, #>   https://epiverse-trace.github.io/simulist/, #>   <https://github.com/epiverse-trace/simulist>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {simulist: Tools to Simulated Line list Data}, #>     author = {Joshua W. Lambert and Carmen Tamayo}, #>     year = {2024}, #>     note = {R package version 0.0.0.9000,  #> https://epiverse-trace.github.io/simulist/}, #>     url = {https://github.com/epiverse-trace/simulist}, #>   }"},{"path":"/reference/create_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of configuration settings for some details of sim_linelist() — create_config","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"Create list configuration settings details sim_linelist()","code":""},{"path":"/reference/create_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"","code":"create_config(...)"},{"path":"/reference/create_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"... <dynamic-dots> Named elements replace default settings. names match exactly elements replaced, otherwise function errors.","code":""},{"path":"/reference/create_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"list settings sim_linelist()","code":""},{"path":"/reference/create_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"config argument sim_linelist() controls small details around time windows around infections (time first contact last contact infector), distribution Ct value confirmed cases. Accepted arguments defaults : last_contact_distribution = \"pois\" last_contact_distribution_params = c(lambda = 3) first_contact_distribution = \"pois\" first_contact_distribution_params = c(lambda = 3) ct_distribution = \"norm\" ct_distribution_params = c(mean = 25, sd = 2) parameters warrant arguments sim_linelist() rarely need changed default setting. Therefore worth increasing number sim_linelist() arguments accommodate config argument keeps function signature simpler readable.","code":""},{"path":"/reference/dot-add_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Add event date as column to infectious history <data.frame> — .add_date","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"event date first contact, last contact .","code":""},{"path":"/reference/dot-add_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"","code":".add_date_contact(   .data,   contact_type = c(\"first\", \"last\"),   distribution = c(\"pois\", \"geom\"),   ...,   outbreak_start_date )  .add_hospitalisation(.data, onset_to_hosp, hosp_risk)  .add_deaths(.data, onset_to_death, hosp_death_risk, non_hosp_death_risk)"},{"path":"/reference/dot-add_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add event date as column to infectious history <data.frame> — .add_date","text":".data <data.frame> containing infectious history branching process simulation. contact_type character type contact, either first contact (\"first\"), last contact (\"last\"). distribution character name distribution, following base R convention distribution naming (e.g. Poisson pois). ... dots Extra arguments passed distribution function given distribution argument. outbreak_start_date date start outbreak. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information.","code":""},{"path":"/reference/dot-add_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"<data.frame> one column input .data. Unless column heading already present data overwritten.","code":""},{"path":"/reference/dot-add_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Add line list information as column to infectious history <data.frame> — .add_info","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"Add line list information column infectious history <data.frame>","code":""},{"path":"/reference/dot-add_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"","code":".add_names(.data)  .add_ct(.data, distribution = c(\"norm\", \"lnorm\"), ...)"},{"path":"/reference/dot-add_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":".data <data.frame> containing infectious history branching process simulation distribution character name distribution, following base R convention distribution naming (e.g. Poisson pois). ... dots Extra arguments passed distribution function given distribution argument.","code":""},{"path":"/reference/dot-add_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"<data.frame> one column input .data. Unless column heading already present data overwritten.","code":""},{"path":"/reference/dot-check_age_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if <data.frame> defining age structure of population is correct — .check_age_df","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"Check <data.frame> defining age structure population correct","code":""},{"path":"/reference/dot-check_age_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"","code":".check_age_df(x)"},{"path":"/reference/dot-check_age_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"x <data.frame>.","code":""},{"path":"/reference/dot-check_age_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"<data.frame>, also called error side-effects input invalid.","code":""},{"path":"/reference/dot-check_risk_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"Check <data.frame> defining age-stratified hospitalisation death risk correct","code":""},{"path":"/reference/dot-check_risk_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"","code":".check_risk_df(x, age_range)"},{"path":"/reference/dot-check_risk_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"x <data.frame>.","code":""},{"path":"/reference/dot-check_risk_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"<data.frame>, also called error side-effects input invalid.","code":""},{"path":"/reference/dot-check_sim_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if arguments input to simulation function are valid — .check_sim_input","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Check arguments input simulation function valid","code":""},{"path":"/reference/dot-check_sim_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"","code":".check_sim_input(   sim_type = c(\"linelist\", \"contacts\", \"outbreak\"),   R,   serial_interval,   outbreak_start_date,   min_outbreak_size,   onset_to_hosp = NULL,   onset_to_death = NULL,   contact_distribution = NULL,   add_names = NULL,   add_ct = NULL,   case_type_probs = NULL,   contact_tracing_status_probs = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL,   population_age = NULL )"},{"path":"/reference/dot-check_sim_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"sim_type character string specifying simulation function function called within. R single numeric reproduction number. serial_interval <epidist> object anonymous function serial interval. outbreak_start_date date start outbreak. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. contact_distribution <epidist> object anonymous function contact distribution. similar offspring distribution, describes heterogeneity contacts infected. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values row line list. Default TRUE. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information.","code":""},{"path":"/reference/dot-check_sim_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Invisibly return sim_type  character string. function called side-effects, error input invalid.","code":""},{"path":"/reference/dot-check_sim_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Arguments used simulation functions required given default value, arguments inputs simulation functions default NULL used. Defaults mentioned argument documentation default exported simulation function default checking function. function either default NULL.","code":""},{"path":"/reference/dot-sim_contacts_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create contacts table — .sim_contacts_tbl","title":"Create contacts table — .sim_contacts_tbl","text":"Create contacts table","code":""},{"path":"/reference/dot-sim_contacts_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create contacts table — .sim_contacts_tbl","text":"","code":".sim_contacts_tbl(   .data,   outbreak_start_date,   contact_distribution,   population_age,   contact_tracing_status_probs,   config )"},{"path":"/reference/dot-sim_contacts_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create contacts table — .sim_contacts_tbl","text":".data <data.frame> containing infectious history branching process simulation. outbreak_start_date date start outbreak. contact_distribution <epidist> object anonymous function contact distribution. similar offspring distribution, describes heterogeneity contacts infected. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/reference/dot-sim_contacts_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create contacts table — .sim_contacts_tbl","text":"contacts <data.frame>","code":""},{"path":"/reference/dot-sim_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal simulation functions used by the exported simulation functions\nwithin simulist — .sim_utils","title":"Internal simulation functions used by the exported simulation functions\nwithin simulist — .sim_utils","text":"functions enable codebase modular prevent code repeated across several simulation functions.","code":""},{"path":"/reference/dot-sim_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal simulation functions used by the exported simulation functions\nwithin simulist — .sim_utils","text":"","code":".sim_bp_linelist(   R,   serial_interval,   outbreak_start_date,   min_outbreak_size,   population_age,   config )  .sim_clinical_linelist(   chain,   onset_to_hosp,   onset_to_death,   hosp_risk,   hosp_death_risk,   non_hosp_death_risk,   outbreak_start_date,   add_names,   add_ct,   case_type_probs,   config )"},{"path":"/reference/dot-sim_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal simulation functions used by the exported simulation functions\nwithin simulist — .sim_utils","text":"R single numeric reproduction number. serial_interval <epidist> object anonymous function serial interval. outbreak_start_date date start outbreak. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values row line list. Default TRUE. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one.","code":""},{"path":"/reference/dot-sim_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal simulation functions used by the exported simulation functions\nwithin simulist — .sim_utils","text":"<data.frame>","code":""},{"path":"/reference/sim_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate contacts for an infectious disease outbreak — sim_contacts","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Simulate contacts infectious disease outbreak","code":""},{"path":"/reference/sim_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"sim_contacts(   R,   serial_interval,   contact_distribution,   outbreak_start_date = as.Date(\"2023-01-01\"),   min_outbreak_size = 10,   population_age = c(1, 90),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"/reference/sim_contacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"R single numeric reproduction number. serial_interval <epidist> object anonymous function serial interval. contact_distribution <epidist> object anonymous function contact distribution. similar offspring distribution, describes heterogeneity contacts infected. outbreak_start_date date start outbreak. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/reference/sim_contacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"contacts <data.frame>","code":""},{"path":"/reference/sim_contacts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"/reference/sim_contacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"# load data required to simulate contacts serial_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"serial interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact_distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(l = 5) ) #> Citation cannot be created as author, year, journal or title is missing  contacts <- sim_contacts(   R = 1.1,   serial_interval = serial_interval,   contact_distribution = contact_distribution )"},{"path":"/reference/sim_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list — sim_linelist","title":"Simulate a line list — sim_linelist","text":"line list simulated using branching process parameterised user defined epidemiological parameters.","code":""},{"path":"/reference/sim_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list — sim_linelist","text":"","code":"sim_linelist(   R,   serial_interval,   onset_to_hosp,   onset_to_death,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   add_names = TRUE,   add_ct = TRUE,   min_outbreak_size = 10,   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   config = create_config() )"},{"path":"/reference/sim_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list — sim_linelist","text":"R single numeric reproduction number. serial_interval <epidist> object anonymous function serial interval. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. outbreak_start_date date start outbreak. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values row line list. Default TRUE. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/reference/sim_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list — sim_linelist","text":"line list <data.frame>","code":""},{"path":"/reference/sim_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list — sim_linelist","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age structured population, <data.frame> two columns: age_range: column characters specifying lower upper bound age group, separated hyphen (-). bounds inclusive (integers). example, age group one ten given \"1-10\". proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"/reference/sim_linelist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list — sim_linelist","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"/reference/sim_linelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list — sim_linelist","text":"","code":"# load data required to simulate line list serial_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"serial interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function # example with single hospitalisation risk for entire population linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.5 ) head(linelist) #>   id      case_name case_type gender age date_onset date_admission date_death #> 1  1   Tre Von Omar  probable      m  12 2023-01-01           <NA>       <NA> #> 2  2    Billy Zhang confirmed      m  48 2023-01-01     2023-01-01       <NA> #> 3  3 Shaunyce Scott  probable      f  57 2023-01-01     2023-01-07       <NA> #> 4  4    Grace Kweon suspected      f  27 2023-01-02           <NA>       <NA> #> 5  5     Gi Hun Kim suspected      m   7 2023-01-02     2023-01-02       <NA> #> 6  6 Desiree Montes confirmed      f  22 2023-01-03     2023-01-11       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>       NA #> 2         2022-12-28        2023-01-03     25.2 #> 3         2023-01-04        2023-01-05       NA #> 4         2022-12-30        2023-01-03       NA #> 5         2022-12-30        2023-01-02       NA #> 6         2023-01-05        2023-01-06     25.2  # example with age-stratified hospitalisation risk # 20% for over 80s # 10% for under 5s # 5% for the rest age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) linelist <- sim_linelist(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) head(linelist) #>   id                case_name case_type gender age date_onset date_admission #> 1  1            Adrena Darity confirmed      f  13 2023-01-01           <NA> #> 2  2        Kashia Abdelsalam  probable      f  46 2023-01-01           <NA> #> 3  3              Trei Watson  probable      m  60 2023-01-02           <NA> #> 4  4 Cody James Lopez-Hinojos suspected      m  51 2023-01-01           <NA> #> 5  5                Will Funk  probable      m  72 2023-01-01           <NA> #> 6  6          Cheyenne Travis suspected      f  18 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     26.5 #> 2       <NA>         2022-12-31        2023-01-05       NA #> 3       <NA>         2023-01-01        2023-01-06       NA #> 4       <NA>         2022-12-31        2023-01-04       NA #> 5       <NA>         2023-01-04        2023-01-05       NA #> 6       <NA>         2022-12-31        2023-01-02       NA"},{"path":"/reference/sim_outbreak.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list and a contacts table — sim_outbreak","title":"Simulate a line list and a contacts table — sim_outbreak","text":"line list contacts simulated using branching process parameterised previously published epidemiological parameters.","code":""},{"path":"/reference/sim_outbreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"sim_outbreak(   R,   serial_interval,   onset_to_hosp,   onset_to_death,   contact_distribution,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   add_names = TRUE,   add_ct = TRUE,   min_outbreak_size = 10,   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"/reference/sim_outbreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list and a contacts table — sim_outbreak","text":"R single numeric reproduction number. serial_interval <epidist> object anonymous function serial interval. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. contact_distribution <epidist> object anonymous function contact distribution. similar offspring distribution, describes heterogeneity contacts infected. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. outbreak_start_date date start outbreak. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values row line list. Default TRUE. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/reference/sim_outbreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list and a contacts table — sim_outbreak","text":"list two elements: line list <data.frame> contacts <data.frame>","code":""},{"path":"/reference/sim_outbreak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list and a contacts table — sim_outbreak","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age structured population, <data.frame> two columns: age_range: column characters specifying lower upper bound age group, separated hyphen (-). bounds inclusive (integers). example, age group one ten given \"1-10\". proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"/reference/sim_outbreak.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list and a contacts table — sim_outbreak","text":"Joshua W. Lambert","code":""},{"path":"/reference/sim_outbreak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"# load data required to simulate outbreak data serial_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"serial interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact_distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(l = 5) ) #> Citation cannot be created as author, year, journal or title is missing  outbreak <- sim_outbreak(   R = 1.1,   serial_interval = serial_interval,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   contact_distribution = contact_distribution )"},{"path":"/reference/simulist-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simulist: Tools to Simulated Line list Data — simulist-package","title":"simulist: Tools to Simulated Line list Data — simulist-package","text":"Provide tools simulate raw case data epidemic form line lists, using model outputs, compartmental models, branching processes, network models.","code":""},{"path":[]},{"path":"/reference/simulist-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simulist: Tools to Simulated Line list Data — simulist-package","text":"Maintainer: Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [copyright holder] Authors: Carmen Tamayo carmen.tamayo-cuartero@lshtm.ac.uk (ORCID) contributors: Hugo Gruson hugo@data.org (ORCID) [contributor] Pratik R. Gupte pratik.gupte@lshtm.ac.uk (ORCID) [contributor]","code":""},{"path":"/news/index.html","id":"simulist-010","dir":"Changelog","previous_headings":"","what":"simulist 0.1.0","title":"simulist 0.1.0","text":"Initial release simulist, R package containing tools simulate epidemiological data line lists contact tables.","code":""},{"path":"/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"simulist 0.1.0","text":"sim_linelist(): simulate line list data sim_contacts(): simulate contacts data sim_outbreak(): simulate line list contacts data Get Started vignette (simulist.Rmd) Age-stratified hospitalisation death risks vignette (age-strat-risks.Rmd) Age structured population vignette (age-struct-pop.Rmd) Visualising simulated data (vis-linelist.Rmd) Design Principles {simulist} (design-principles.Rmd) Unit tests (100% code coverage) documentation files. Continuous integration workflows R package checks, rendering README.md, calculating test coverage, deploying pkgdown website, updating citation file, checking new package system dependencies.","code":""},{"path":"/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.1.0","text":"None","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.1.0","text":"None","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.1.0","text":"None","code":""}]
