[{"path":"https://epiverse-trace.github.io/simulist/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023-2025 simulist authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/age-strat-risks.html","id":"population-wide-risks","dir":"Articles","previous_headings":"","what":"Population-wide risks","title":"Age-stratified hospitalisation and death risks","text":"Simulate line list population-wide default risks: hospitalisation risk: 0.2 death risk hospitals 0.5 death risk outside hospitals 0.05 can run another simulation change hospitalisation death risks, inside outside hospital, still applied entire population. scenario probability hospitalised infected higher, mortality risk hospitalised non-hospitalised groups lower.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death )  # first 6 rows of linelist head(linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1           Kevin Pullen suspected   m   1 2023-01-01     2023-01-01 #> 2  2 Carisa Flores-Gonzalez confirmed   f  29 2023-01-01     2023-01-01 #> 3  3       Maazin el-Othman confirmed   m  78 2023-01-01     2023-01-01 #> 4  5       Faisal el-Vaziri suspected   m  70 2023-01-01     2023-01-01 #> 5  6           Lynsey Duron confirmed   f  28 2023-01-01     2023-01-01 #> 6  8         Lilibeth Black confirmed   f  61 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-03      died   2023-01-18               <NA>              <NA> #> 2     2023-01-03      died   2023-02-09         2022-12-30        2023-01-08 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 4     2023-01-04 recovered         <NA>         2022-12-31        2023-01-04 #> 5     2023-01-05 recovered         <NA>         2022-12-29        2023-01-02 #> 6           <NA> recovered         <NA>         2022-12-28        2023-01-05 #>   ct_value #> 1       NA #> 2     25.8 #> 3     24.9 #> 4       NA #> 5     24.5 #> 6     26.4 linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.4,   hosp_death_risk = 0.2,   non_hosp_death_risk = 0.01 )  head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1           Kacy Kim suspected   f  80 2023-01-01     2023-01-01 #> 2  2        Jina Warnes  probable   f  85 2023-01-01     2023-01-01 #> 3  4     Raadi el-Yasin  probable   m  76 2023-01-01     2023-01-01 #> 4  8   Joshua Castaneda confirmed   m  12 2023-01-01     2023-01-01 #> 5 11 Fat'hiyaa al-Zafar suspected   f  50 2023-01-01     2023-01-01 #> 6 14    Matthew Sheldon  probable   m  54 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-04 recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 3           <NA> recovered         <NA>         2022-12-30        2023-01-08 #> 4     2023-01-02      died   2023-01-18         2022-12-27        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-29        2023-01-01 #> 6     2023-01-03 recovered         <NA>         2022-12-26        2023-01-01 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4     23.7 #> 5       NA #> 6       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/age-strat-risks.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Age-stratified hospitalisation and death risks","text":"define age-stratified risks, must create table (<data.frame>) contains lower limits age groups respective risks. example hospitalisation risk : 0.2 (20%) aged 80 years older 0.1 (10%) younger 5 years 0.05 (5%) remaining age group oldest age group stops upper age range given population_age argument. default upper age range 90, example oldest age bracket 80-90 (inclusive). minimum age age group inclusive, maximum age age group exclusive, except oldest age group inclusive minimum maximum age. example first age group first element vector, minimum age 1, maximum age four (next age group starts five), hospitalisation risk group 0.1. age group forms row table. minimum age youngest age group must match age range specified population_age argument sim_linelist(), largest age limit risk <data.frame> must older upper age range. conditions met function error. age-stratified risk table match default (c(1, 90)), population_age argument need set match. example, default age range population 1 90 (inclusive). example , lowest age group started 1 oldest age group stopped 90. matches default population_age = c(1, 90). However, see lower age limit exceeds age range function run. order make code run age-stratified hospitalisation risk given, population_age can adjusted. oldest age bracket now 95 100 ([95, 100]). Exactly method age-stratified risks applies death risks. First create <data.frame> age groups respective, case, death risks, supply either hosp_death_risk non_hosp_death_risk arguments, define death risks outside hospital, respectively, . couple examples: now age-stratified tables supplied one risk. However, can supplied simulation. case hospitalisation risk, death risks inside outside hospital, specified.","code":"age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.20 linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk )  head(linelist) #>   id                   case_name case_type sex age date_onset date_reporting #> 1  1           Muntaha al-Hallal  probable   f  90 2023-01-01     2023-01-01 #> 2  2                Sheldon Gant confirmed   f  55 2023-01-01     2023-01-01 #> 3  4             Zimiri Mcknight suspected   m  37 2023-01-01     2023-01-01 #> 4  5 Kekoaikaikaokalani Alderman  probable   m  88 2023-01-01     2023-01-01 #> 5  6             Kunita Guerette confirmed   f  56 2023-01-01     2023-01-01 #> 6  7      Alexander Valles Lopez confirmed   m  40 2023-01-02     2023-01-02 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-26        2023-01-03 #> 3           <NA> recovered         <NA>         2022-12-30        2023-01-06 #> 4           <NA> recovered         <NA>         2022-12-28        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-29        2023-01-02 #> 6           <NA> recovered         <NA>         2022-12-30        2023-01-03 #>   ct_value #> 1       NA #> 2     19.0 #> 3       NA #> 4       NA #> 5     23.1 #> 6     25.8 age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        95 0.20  linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) #> Error in .check_df(hosp_risk, df_type = \"risk\", age_range = age_range): Lower bound of oldest age group must be lower than highest age range age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) )  linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   population_age = c(1, 100) )  head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1      Laura Serrano confirmed   f  28 2023-01-01     2023-01-01 #> 2  2    Haeleigh Schulz confirmed   f  83 2023-01-01     2023-01-01 #> 3  3    Robert Anderson suspected   m  16 2023-01-01     2023-01-01 #> 4  4 Teeoncinea Carlock confirmed   f  36 2023-01-01     2023-01-01 #> 5  5     Mahdi al-Naqvi confirmed   m  94 2023-01-01     2023-01-01 #> 6  7         Lael Pinch confirmed   f  32 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-30        2023-01-04 #> 3           <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 4           <NA> recovered         <NA>         2022-12-29        2023-01-04 #> 5           <NA> recovered         <NA>         2022-12-25        2023-01-06 #> 6           <NA> recovered         <NA>         2022-12-30        2023-01-02 #>   ct_value #> 1     28.0 #> 2     23.9 #> 3       NA #> 4     22.6 #> 5     21.5 #> 6     26.3 age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_hosp_death_risk #>   age_limit risk #> 1         1  0.3 #> 2         5  0.1 #> 3        80  0.6  linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = age_dep_hosp_death_risk ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) ) age_dep_non_hosp_death_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.10  linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   non_hosp_death_risk = age_dep_non_hosp_death_risk ) age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) )  linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   hosp_death_risk = age_dep_hosp_death_risk,   non_hosp_death_risk = age_dep_non_hosp_death_risk )  head(linelist) #>   id        case_name case_type sex age date_onset date_reporting #> 1  1 Mathew Sangalang  probable   m  37 2023-01-01     2023-01-01 #> 2  2         Brian He  probable   m   4 2023-01-01     2023-01-01 #> 3  4    Nyssa Salazar  probable   f  48 2023-01-01     2023-01-01 #> 4  6       Katryna Le suspected   f  69 2023-01-01     2023-01-01 #> 5  7    Jacob Sanford suspected   m  21 2023-01-01     2023-01-01 #> 6  8   Enrique Valdez  probable   m  83 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-27        2023-01-02 #> 3           <NA> recovered         <NA>         2023-01-01        2023-01-05 #> 4           <NA>      died   2023-02-04         2022-12-29        2023-01-02 #> 5           <NA> recovered         <NA>         2022-12-30        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-30        2023-01-05 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4       NA #> 5       NA #> 6       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/age-struct-pop.html","id":"uniform-population-age","dir":"Articles","previous_headings":"","what":"Uniform population age","title":"Age-structured population","text":"default sim_linelist() simulates individuals ages assuming uniform distribution 1 90. change age range, vector two numbers can supplied population_age argument. simulate outbreak population population ranging 5 75 (inclusive, [5,75]). Note: ages assumed unit years need integers (least “integerish” stored double). simulations vignette condition simulation minimum outbreak size 100 cases (outbreak_size, maximum outbreak size left 1e4) clearly visualise distribution ages. can plot age distribution individuals line list, binned 5 year categories. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/age-struct-pop_files/figure-html/plot-age-range-1.png” alt=“histogram age distribution individuals simulated line list sampled uniform distribution 5 75. Ages binned 5 year age groups. small amount variation counts individuals group. y-axis labelled”Number Individuals”, x-axis labelled “Age”.” width=“768” /> population_age argument left unspecified, assumed default age range 1 90 (c(1, 90)).","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = c(5, 75),   outbreak_size = c(100, 1e4) ) head(linelist) #>   id         case_name case_type sex age date_onset date_reporting #> 1  1     Kendra Haider  probable   f  56 2023-01-01     2023-01-01 #> 2  2 Cante Truefeather suspected   f   7 2023-01-01     2023-01-01 #> 3  3      K'Ara Fisher suspected   f  15 2023-01-01     2023-01-01 #> 4  5   Raymond Qureshi  probable   m  60 2023-01-02     2023-01-02 #> 5  6   Keshaun Bennett suspected   m  57 2023-01-02     2023-01-02 #> 6  8       Faline Thao confirmed   f  38 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 3     2023-01-05      died   2023-01-08         2022-12-29        2023-01-06 #> 4           <NA> recovered         <NA>         2022-12-30        2023-01-03 #> 5           <NA> recovered         <NA>         2022-12-26        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-28        2023-01-02 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4       NA #> 5       NA #> 6     23.7 ggplot(linelist[, c(\"sex\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 75, 5)) +   theme_bw()"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/age-struct-pop.html","id":"structured-population-age","dir":"Articles","previous_headings":"","what":"Structured population age","title":"Age-structured population","text":"simulate non-uniform age structure create table (<data.frame>) containing age bounds age bracket population proportion population made age group. upper bound (maximum) population also needs specified age structure <data.frame>, therefore, last element age limits column taken upper bound age population. elements last one lower bound age group. simplest way set maximum population age set proportion zero. example simulate population 30% population 1 19, 40% population 20 59, 30% 60 89. age limits ($age_limit column) inclusive. individuals population younger 1 older 90. can plot age distribution see age structure individuals line list. Given relative uniformity age structure specified greatly different uniform age structure plotted , higher upper age limit. data binned 5 year categories facetted sex. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/age-struct-pop_files/figure-html/plot-age-struct-1.png” alt=“Two histograms, facetted sex, age distribution individuals simulated line list sampled age-structured population defined data.frame . Ages binned 5 year age groups. variation counts individuals group, histograms male (m) female (f) similar. y-axis labelled”Number Individuals”, x-axis labelled “Age”.” width=“768” /> example much younger population instead specify: 0.4 (40%) 1-9 years old 0.3 (30%) 10-29 years old 0.2 (20%) 30-59 years old 0.1 (10%) 60-75 years old common useful method plotting age data form age pyramids. partition data sex plot age distribution. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/age-struct-pop_files/figure-html/plot-age-struct-young-1.png” alt=“age pyramid simulated line list age-structured population. y-axis labeled”Lower bound Age Category”, x-axis labelled “Population”. left age pyramid plots number female individuals (red) age category right age pyramid plots number male individuals (blue) age category. age pyramid shows many young people population, aged 10, relatively fewer older individuals. pattern male female similar.” width=“768” /> used {ggplot2} package construct age pyramid, however {apyramid} R package R4Epi can assist making plots; can Applied Epidemiology Handbook chapter age pyramids. blog post “Population Pyramid Plots ggplot2” also contains useful tips constructing pyramid plots. shown two age-structured examples, number age groups flexible. Therefore coarse population structure two three age groups can specified, precise census demographic data available, several age groups can specified.","code":"age_struct <- data.frame(   age_limit = c(1, 20, 60, 90),   proportion = c(0.3, 0.4, 0.3, 0) ) age_struct #>   age_limit proportion #> 1         1        0.3 #> 2        20        0.4 #> 3        60        0.3 #> 4        90        0.0 linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct,   outbreak_size = c(100, 1e4) )  head(linelist) #>   id        case_name case_type sex age date_onset date_reporting #> 1  1 Daniel Hernandez suspected   m  22 2023-01-01     2023-01-01 #> 2  3 Shaamil el-Qasim suspected   m  26 2023-01-01     2023-01-01 #> 3  4     Omar Peinado  probable   m  59 2023-01-01     2023-01-01 #> 4  6      Jason Sinka confirmed   m  60 2023-01-01     2023-01-01 #> 5  7  Mariah Martinez confirmed   f  72 2023-01-01     2023-01-01 #> 6  8  Joseline Bobian confirmed   f  16 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-29        2023-01-05 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-02 #> 4           <NA> recovered         <NA>         2022-12-30        2023-01-03 #> 5           <NA> recovered         <NA>         2022-12-27        2023-01-03 #> 6     2023-01-04      died   2023-01-07         2023-01-01        2023-01-03 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4     26.3 #> 5     25.8 #> 6     24.6 ggplot(linelist[, c(\"sex\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 90, 5)) +   theme_bw() +   facet_wrap(vars(sex)) age_struct <- data.frame(   age_limit = c(1, 10, 30, 60, 75),   proportion = c(0.4, 0.3, 0.2, 0.1, 0) ) age_struct #>   age_limit proportion #> 1         1        0.4 #> 2        10        0.3 #> 3        30        0.2 #> 4        60        0.1 #> 5        75        0.0 linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct,   outbreak_size = c(100, 1e4) )  head(linelist) #>   id             case_name case_type sex age date_onset date_reporting #> 1  1         Tanner Latham confirmed   m  17 2023-01-01     2023-01-01 #> 2  2        Derrick Mishra  probable   m  53 2023-01-01     2023-01-01 #> 3  4     Saabiqa al-Haidar confirmed   f  20 2023-01-01     2023-01-01 #> 4  5 Antione Malone-Rogers suspected   m   6 2023-01-01     2023-01-01 #> 5  6         Ariel Ramirez  probable   f  14 2023-01-04     2023-01-04 #> 6  8     Brendan Van Eaton suspected   m  60 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-29        2023-01-03 #> 3           <NA> recovered         <NA>         2022-12-27        2023-01-02 #> 4     2023-01-03      died   2023-01-12         2022-12-29        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-28        2023-01-04 #> 6           <NA> recovered         <NA>         2022-12-29        2023-01-08 #>   ct_value #> 1     26.7 #> 2       NA #> 3     21.8 #> 4       NA #> 5       NA #> 6       NA linelist_m <- subset(linelist, subset = sex == \"m\") age_cats_m <- as.data.frame(table(floor(linelist_m$age / 5) * 5)) colnames(age_cats_m) <- c(\"AgeCat\", \"Population\") age_cats_m <- cbind(age_cats_m, sex = \"m\") linelist_f <- subset(linelist, subset = sex == \"f\") age_cats_f <- as.data.frame(table(floor(linelist_f$age / 5) * 5)) colnames(age_cats_f) <- c(\"AgeCat\", \"Population\") age_cats_f$Population <- -age_cats_f$Population age_cats_f <- cbind(age_cats_f, sex = \"f\") age_cats <- rbind(age_cats_m, age_cats_f)  breaks <- pretty(range(age_cats$Population), n = 10) labels <- abs(breaks) ggplot(age_cats) +   geom_col(mapping = aes(x = Population, y = factor(AgeCat), fill = sex)) +   scale_y_discrete(name = \"Lower bound of Age Category\") +   scale_x_continuous(name = \"Population\", breaks = breaks, labels = labels) +   scale_fill_manual(values = c(\"#F04A4C\", \"#106BA0\")) +   theme_bw()"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/design-principles.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Design Principles for {simulist}","text":"{simulist} package aims simulate data infectious disease outbreaks, primarily line list data, also contacts data. output types associated exported function: sim_linelist() sim_contacts(). also function simulate output data types, sim_outbreak(). latter function useful interoperability {epicontacts} R package (see visualisation vignette), provides linked line list contacts datasets, common outbreaks, MERS dataset within {outbreaks} R package.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/design-principles.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Design Principles for {simulist}","text":"simulation functions either return <data.frame> list <data.frame>s. consistency across functions well-known data structure makes easy understand users. first stable release (v1.0.0) {simulist} guarantee two versions package produce identical output using function seed (.e. output breaking change opposed API breaking change). Given many random number generation calls simulation code, constraining ensure reproducibility function output versions. aim ensure consistent reproducible output sim_*() functions minor version releases v1.0.0.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/design-principles.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Design Principles for {simulist}","text":"age-stratified risks hospitalisation deaths via *_risk function arguments, age-structured population via population_age function argument accept <data.frame>s specify age groups. age groups specified $age_limit column <data.frame>. design follows {socialmixr} defining age bounds implemented pull request #14 *_risk arguments pull request #200 population_age argument. previous implementation used <data.frame> structure two columns, one lower age limit one upper age limit. Using age limits judged preferred prevents input errors user age bounds overlapping non-contiguous (.e. missing age groups). Since {simulist} v0.5.0, approaches consistent structure age limits column either risk proportion column. specification age groups using limits comes trade-offs documented : small difference requirements $age_limit column passing <data.frame> either *_risk argument population_age. default population_age two element numeric vector specifying age range population. supplying age-structure <data.frame> population_age, $age_limit column contains lower bound age group, upper range population still required, last element $age_limit column taken upper population age. differs $age_limit column <data.frame> required age-stratified risk, element lower age limit, upper range population age taken population_age argument. interaction arguments documented next point. using age-stratified risks hospitalisation deaths (see Age-stratified hospitalisation death risks vignette details) interaction function arguments. <data.frame> defines age-stratification hosp_risk, hosp_death_risk non_hosp_death_risk arguments gives lower bound age groups. upper bound age groups derived next lower bound, upper bound oldest age group defined upper age given population_age argument. interaction arguments ideal, can difficult understand users (outlined Tidy Design book), however, interaction change interpretation argument convoluted. column names contact relationships (edges network) called . Names contacts table match {epicontacts} <epicontacts> objects. column names two contacts provided epicontacts::make_epicontacts() arguments silently renamed resulting <epicontacts> object. making column names output sim_contacts() sim_outbreak() prevents confusion used {epicontacts}. naming also preferred usefully descriptive. Exported functions simulate data use naming convention sim_*() (* placeholder). Internal functions simulate dot (.) prefix (e.g. .sim_internal()). Functions create fixed data structures (.e. data factory functions) naming convention (create_*() .create_*()). Exported post-processing functions, .e. applied output sim_linelist(), use naming convention *_linelist(). * placeholder verb adjective, e.g. messy_linelist() truncate_linelist(). naming convention makes clear functions operate line list <data.frame> tries minimise namespace conflicts e.g. messy() function {messy} package. use config argument simulation function reduce number arguments exported functions provide simple user-interface possible. choice gets argument function body confined config list based preconceived frequency use, importance technical detail. say, settings unlikely changed user changed require advanced understanding simulation model placed within config, given default values create_config(). Input checking config list takes place within call stack exported sim_*() functions certain elements config list used, create_config() function. Therefore, possible create invalid config list create_config(). example throwing error internal function simulation config$network \"adjusted\" \"unadjusted\", NULL error .sim_network_bp(). column names line list data produced sim_linelist() sim_outbreak() matches tag names used {linelist} R package (Epiverse-TRACE R package). continuity design functional reason. line list data {simulist} functions tagged sensu {linelist} tagging. inconsistent use hospitalisation admission; simulated line list date_admission, internally package uses hospitalisation (e.g. .add_hospitalisation()). think hospitalisation descriptive date_admission used {linelist}. {simulist} implements branching process model (.sim_network_bp()) tracks contacts infectious individuals. simple random network model, future versions {simulist} make code modular order accept simulations models. remove burden {simulist} simulate range model types. sim_linelist(), sim_contacts() sim_outbreak() arguments change dimensions <data.frame> returned functions (case sim_outbreak() list two <data.frame>s). Instead, recommend modifying line list contact tracing data simulation, provide vignette guide users common data wrangling tasks wrangling-linelist.Rmd. including arguments can remove add columns output <data.frame>s reduces complexity functions; limiting simulation function arguments parameterise, change dimensionality , simulated data, package robust used pipelines automated approaches, data needs predictably formatted. Several parts {simulist} codebase use indices determining individual infected, allocation vectors, uses. R’s subsetting ([) can use logical vectors numeric vectors, {simulist} differentiated names *_idx variables holding numeric vector indices, *_lgl_idx logical vector indices. makes safer readable call functions like sum() () index vectors.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/design-principles.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Design Principles for {simulist}","text":"aim restrict number dependencies minimal required set ease maintenance. current hard dependencies : {stats} {checkmate} {english} {epiparameter} {randomNames} {stats} distributed R language viewed lightweight dependency, already installed user’s machine R. {checkmate} input checking package widely used across Epiverse-TRACE packages. {english} lightweight, (hard) dependency free package used converted integers words. {epiparameter} used easily access epidemiological parameters package’s library, package currently unstable actively developed, however, using another package can inform development path {epiparameter}. {randomNames} provides utility function generating random names case contact data. functionality replicated {simulist}, however {randomNames} package maintained contains range name generation settings warrants use dependency. soft dependencies (minimum version requirements) : {incidence2} (>= 2.3.0) {epicontacts} (>= 1.1.3) {knitr} {ggplot2} {rmarkdown} {spelling} {testthat} (>= 3.0.0) {knitr}, {rmarkdown}, used generating documentation. {spelling} {testthat} used testing code base. {ggplot2} used plotting within vignettes. {incidence2} {epicontacts} used vignettes demonstrate interoperability downstream packages, focus data visualisation.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/design-principles.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Design Principles for {simulist}","text":"special requirements contributing {simulist}, please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/reporting-delays-truncation.html","id":"reporting-delays","dir":"Articles","previous_headings":"","what":"Reporting delays","title":"Reporting delays and right-truncation of line list data","text":"Reporting delays line list data infectious disease outbreak refer time lag event (e.g., infection, symptom onset, hospitalisation) occurs officially recorded reported. delays can arise factors like diagnostic testing turnaround times, administrative processing, delayed healthcare-seeking behaviour. line list data sets, delays captured separate times/dates different event types, dates symptom onset, specimen collection, laboratory confirmation, case reporting. case, delay difference times/dates, allowing researchers quantify adjust reporting delays analysing outbreak dynamics. Accurate recording dates crucial reconstructing epidemic curve assessing timeliness public health responses. {simulist}, sim_linelist() outputs line list date reporting ($date_reporting column), default identical date symptom onset ($date_onset). However, possible parameterise reporting delay can used sim_linelist() simulate delay symptom onset reporting. {simulist} assume reporting delay delay symptom onset reported, reflect reporting hospitalisation outcome times. First load required delay distributions using {epiparameter} package. Setting seed ensures output time vignette rendered. using {simulist}, setting seed required unless need simulate line list multiple times. Using simple line list simulation without specifying reporting delay produce reporting times identical symptom onset times: reporting delay can specified (random) number generating function reporting_delay argument sim_linelist(). example assume reporting delays distributed according lognormal distribution parameters: meanlog = 1 sdlog = 1 (mean approximately 4.5 days standard deviation 5.9 days). first 6 rows line list can see differences $date_onset column $date_reporting column. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/reporting-delays-truncation_files/figure-html/plot-linelist-events-1.png” alt=“dot plot event dates line list plotted points figure, connected horizontal lines. One row dot plot corresponds one case (.e. one row line list). y-axis label ”Case name”, x-axis label “Event date”. event types “Date admission” (red square), “Date Onset” (blue circle), “Date Outcome” (green triangle), “Date Reporting” (purple diamond). plot shows distribution delay times event individual line list, y-axis order earliest date symptom onset bottom.” width=“768” /> plot difference date symptom onset reporting , expected, distribution roughly lognormally distributed.  instead variable reporting delay want simulate fixed reporting delay, example, date reporting always 5 days date symptom onset, different function can supplied. One option set parameter controls variance probability distribution zero (case lognormal distribution, setting sdlog = 0), simpler readable option give number generating function always returned 5. simulate produce line list fixed reporting delay.","code":"library(simulist) library(epiparameter) library(tidyr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(incidence2) #> Loading required package: grates contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  infectious_period <- epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 3, scale = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  onset_to_hosp <- epiparameter(   disease = \"COVID-19\",   epi_name = \"onset to hospitalisation\",   prob_distribution = create_prob_distribution(     prob_distribution = \"lnorm\",     prob_distribution_params = c(meanlog = 1, sdlog = 0.5)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to death from {epiparameter} database onset_to_death <- epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to death\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function set.seed(123) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) identical(linelist$date_onset, linelist$date_reporting) #> [1] TRUE linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   reporting_delay = function(x) rlnorm(n = x, meanlog = 1, sdlog = 1) ) head(linelist) #>   id            case_name case_type sex age date_onset date_reporting #> 1  1       Yoonus al-Azam suspected   m  51 2023-01-01     2023-01-07 #> 2  2       Kristina Clark confirmed   f  53 2023-01-04     2023-01-06 #> 3  3         Karen Meehan confirmed   f  16 2023-01-05     2023-01-20 #> 4  4 Ritika Brandenburger suspected   f  41 2023-01-05     2023-01-09 #> 5  5       Steven Kaliski confirmed   m   4 2023-01-04     2023-01-09 #> 6  6          Keely Atene suspected   f  68 2023-01-05     2023-01-12 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-03      died   2023-01-26               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 3           <NA> recovered         <NA>         2022-12-29        2023-01-06 #> 4           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 5           <NA> recovered         <NA>         2023-01-02        2023-01-05 #> 6           <NA> recovered         <NA>         2023-01-02        2023-01-06 #>   ct_value #> 1       NA #> 2     26.1 #> 3     26.6 #> 4       NA #> 5     25.0 #> 6       NA tidy_linelist <- linelist %>%   pivot_longer(     cols = c(\"date_onset\", \"date_reporting\", \"date_admission\", \"date_outcome\")   ) %>%   mutate(ordering_value = ifelse(name == \"date_onset\", value, NA)) %>% # nolint consecutive_mutate_linter   mutate(case_name = reorder(case_name, ordering_value, min, na.rm = TRUE)) # nolint consecutive_mutate_linter  ggplot(data = tidy_linelist) +   geom_line(     mapping = aes(x = value, y = case_name),     linewidth = 0.25   ) +   geom_point(     mapping = aes(       x = value,       y = case_name,       shape = name,       col = name     ), size = 2   ) +   scale_x_date(name = \"Event date\", date_breaks = \"week\") +   scale_y_discrete(name = \"Case name\") +   scale_color_brewer(     palette = \"Set1\",     name = \"Event type\",     labels = c(\"Date Admission\", \"Date Onset\", \"Date Outcome\", \"Date Reporting\")   ) +   scale_shape_manual(     name = \"Event type\",     labels = c(       \"Date Admission\", \"Date Onset\", \"Date Outcome\", \"Date Reporting\"     ),     values = c(15, 16, 17, 18)   ) +   theme_bw() +   theme(legend.position = \"bottom\", axis.text.y = element_text(size = 4)) #> Warning: Removed 1519 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 1519 rows containing missing values or values outside the scale range #> (`geom_point()`). ggplot(data = linelist) +   geom_histogram(     mapping = aes(x = as.numeric(date_reporting - date_onset)),     binwidth = 2   ) +   scale_x_continuous(     name = paste0(       \"Reporting delay (\",       attr(linelist$date_reporting - linelist$date_onset, \"units\"),       \")\"     )   ) +   theme_bw() +   theme(axis.title.y = element_blank()) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   reporting_delay = function(x) rep(5, times = x) ) head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1       Caleb Froome confirmed   m  47 2023-01-01     2023-01-06 #> 2  2    Zubair el-Kalil  probable   m  41 2023-01-07     2023-01-12 #> 3  3   Cameron Williams  probable   m  79 2023-01-09     2023-01-14 #> 4  4      Aiyana Garcia confirmed   f  70 2023-01-10     2023-01-15 #> 5  6 Miguel Line-Torres suspected   m  50 2023-01-10     2023-01-15 #> 6  7       Teagan Dixon confirmed   f  80 2023-01-10     2023-01-15 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-05      died   2023-01-26               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-26        2023-01-02 #> 3           <NA> recovered         <NA>         2023-01-03        2023-01-11 #> 4           <NA> recovered         <NA>         2023-01-03        2023-01-10 #> 5           <NA> recovered         <NA>         2023-01-07        2023-01-11 #> 6     2023-01-13      died   2023-01-30         2023-01-05        2023-01-10 #>   ct_value #> 1     23.6 #> 2       NA #> 3       NA #> 4     28.2 #> 5       NA #> 6     26.9 linelist$date_reporting - linelist$date_onset #> Time differences in days #>   [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #>  [38] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #>  [75] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [112] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [149] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [186] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [223] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [260] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [297] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [334] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [371] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [408] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [445] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [482] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #> [519] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/reporting-delays-truncation.html","id":"truncation","dir":"Articles","previous_headings":"","what":"Truncation","title":"Reporting delays and right-truncation of line list data","text":"Right truncation infectious disease data occurs individuals experienced specific event certain time can included linelist. leads underestimate recent cases death, especially relevant ongoing outbreaks recent cases might recorded. can also happen cases longer recorded certain point time. Right-truncated outbreak data, particular line list data, can give impression incidence decreasing (RR < 1), however can artefact resulting fact data right-truncated, outbreak can stable growing. default {simulist} simulates outbreak start finish. Therefore, line list contact data contain cases outcomes. order get data representative ongoing outbreak dynamics recent cases yet recorded may revised upwards future truncate_linelist() function can applied. Re-simulating simple line list using sim_linelist() lognormal reporting delay meanlog = 2 sdlog = 0.5. truncation time time/date want take snapshot line list see looked like day (.e. real-time outbreak). default truncate_linelist() truncate 14 days end outbreak (defined maximum date line list). define time latest, user-specified date, time point data truncated truncation point. plot show truncation time vertical line. date reporting falls truncation time, case removed line list, falls date reporting hospital admission /outcome date set NA. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/reporting-delays-truncation_files/figure-html/plot-linelist-events-trunc-1.png” alt=“dot plot event dates line list plotted points figure, connected horizontal lines. One row dot plot corresponds one case (.e. one row line list). y-axis label ”Case name”, x-axis label “Event date”. event types “Date admission” (red square), “Date Onset” (blue circle), “Date Outcome” (green triangle), “Date Reporting” (purple diamond). plot shows distribution delay times event individual line list, y-axis order earliest date symptom onset bottom. vertical dashed line showing truncation day .” width=“768” /> example several cases removed reporting date occurs truncation time. truncate_linelist() assumes event pertinent truncation data date reporting ($date_reporting), likely date case first input line list, even date date hospital admission ($date_admission) date outcome ($date_outcome). Right-truncating line list date using {simulist} removes individuals (rows) sampled truncation time less recent reporting date. cases rows kept truncation time recent truncation event, subsequent events, date hospitalisation, recent truncation time, events dates set NA. reasoning events assumed reported yet. truncate_linelist() function can also used reflect reporting cases outbreak stopped given date. also possible specify truncation time number days, weeks, months years since start outbreak. right-truncate line list 3 months since start outbreak.","code":"# set seed to produce small line list set.seed(3) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   reporting_delay = function(x) rlnorm(n = x, meanlog = 2, sdlog = 0.5) )  # first 6 rows of linelist head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1 Daiveante Labarrie confirmed   m  59 2023-01-01     2023-01-05 #> 2  2       Phayd Garcia confirmed   m   3 2023-01-07     2023-01-13 #> 3  3  Jenifer Castaneda suspected   f  53 2023-01-01     2023-01-07 #> 4  8      Asya Woolfolk confirmed   f  42 2023-01-14     2023-01-25 #> 5  9 Amaani el-Abdullah  probable   f  73 2023-01-03     2023-01-08 #> 6 10       Bella Nguyen confirmed   f  89 2023-01-03     2023-01-11 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-05 recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-27        2023-01-06 #> 3           <NA> recovered         <NA>         2023-01-01        2023-01-04 #> 4           <NA> recovered         <NA>         2023-01-07        2023-01-11 #> 5           <NA> recovered         <NA>         2022-12-25        2023-01-04 #> 6           <NA> recovered         <NA>         2022-12-30        2023-01-02 #>   ct_value #> 1     22.3 #> 2     27.4 #> 3       NA #> 4     28.0 #> 5       NA #> 6     26.9 tidy_linelist <- linelist %>%   pivot_longer(     cols = c(\"date_onset\", \"date_reporting\", \"date_admission\", \"date_outcome\")   ) %>%   mutate(ordering_value = ifelse(name == \"date_onset\", value, NA)) %>% # nolint consecutive_mutate_linter   mutate(case_name = reorder(case_name, ordering_value, min, na.rm = TRUE)) # nolint consecutive_mutate_linter  truncation_day <- 14 trunc_date <- max(tidy_linelist$value, na.rm = TRUE) - truncation_day ggplot(data = tidy_linelist) +   geom_line(     mapping = aes(x = value, y = case_name),     linewidth = 0.25   ) +   geom_point(     mapping = aes(       x = value,       y = case_name,       shape = name,       col = name     ),     size = 2   ) +   geom_vline(xintercept = trunc_date, linetype = 2) +   scale_x_date(name = \"Event date\", date_breaks = \"2 week\") +   scale_y_discrete(name = \"Case name\") +   scale_color_brewer(     palette = \"Set1\",     name = \"Event type\",     labels = c(\"Date Admission\", \"Date Onset\", \"Date Outcome\", \"Date Reporting\")   ) +   scale_shape_manual(     name = \"Event type\",     labels = c(       \"Date Admission\", \"Date Onset\", \"Date Outcome\", \"Date Reporting\"     ),     values = c(15, 16, 17, 18)   ) +   theme_bw() +   theme(legend.position = \"bottom\", axis.text.y = element_text(size = 4)) #> Warning: Removed 22 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 22 rows containing missing values or values outside the scale range #> (`geom_point()`). linelist_trunc <- truncate_linelist(linelist = linelist) linelist_trunc <- truncate_linelist(   linelist = linelist,   truncation_day = 3,   unit = \"months\",   direction = \"forward\" )"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/reporting-delays-truncation.html","id":"truncate-to-emulate-different-stages-of-outbreak","dir":"Articles","previous_headings":"","what":"Truncate to emulate different stages of outbreak","title":"Reporting delays and right-truncation of line list data","text":"possible simulate line list sim_linelist() mid-way outbreak1. can make difficult generate outbreak data sets resemble early outbreak dynamics incidence increasing, mid-outbreak, late outbreak disease approaches extinction. types data sets useful testing outbreak analytics method applied real-time outbreak scenarios. truncate_linelist() function enables converting complete line list sim_linelist() within-outbreak line list. can simulate another outbreak, time cases, plot complete line list aggregating daily incidence using {incidence2} package. full overview visualise outbreak data simulated {simulist} see Visualising simulated data vignette.  looking outbreak, can pick three points truncate: 1) early outbreak epicurve growing (1st February 2023, epiweek 5), 2) middle outbreak (15th March 2023, epiweek 11), 3) late outbreak number cases declining end outbreak near (1st May 2023, epiweek 18). can specify <Date> object truncation_day argument truncate_linelist() specify date want apply right truncation . Next repeat procedure creating data sets early, mid, late outbreak. example use reporting delay illustrate issue -reporting recent cases time delay symptom onset reporting.  Comparing two sets three plots can see latter applying right truncation gives impression cases declining. truncated line lists can used test methods estimate real-time reproduction number {EpiNow2} {epinowcast}.","code":"# set seed to produce single wave outbreak set.seed(3) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   outbreak_size = c(500, 5000) )  # create incidence object weekly_inci <- incidence(   x = linelist,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE ) plot(weekly_inci) linelist_early <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-02-01\") ) inci_early <- incidence(   x = linelist_early,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE )  linelist_mid <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-03-15\") ) inci_mid <- incidence(   x = linelist_mid,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE )  linelist_late <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-05-01\") ) inci_late <- incidence(   x = linelist_late,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE ) # set seed to produce single wave outbreak set.seed(3) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   reporting_delay = function(x) rlnorm(n = x, meanlog = 2, sdlog = 0.5),   outbreak_size = c(500, 5000) ) linelist_early <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-02-01\") ) inci_early <- incidence(   x = linelist_early,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE )  linelist_mid <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-03-15\") ) inci_mid <- incidence(   x = linelist_mid,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE )  linelist_late <- truncate_linelist(   linelist = linelist,   truncation_day = as.Date(\"2023-05-01\") ) inci_late <- incidence(   x = linelist_late,   date_index = \"date_onset\",   interval = \"epiweek\",   complete_dates = TRUE ) plot(inci_early) +   ggtitle(\"Early\") +   theme(plot.title = element_text(size = 25, hjust = 0.5)) plot(inci_mid) +   ggtitle(\"Mid\") +   theme(plot.title = element_text(size = 25, hjust = 0.5)) plot(inci_late) +   ggtitle(\"Late\") +   theme(plot.title = element_text(size = 25, hjust = 0.5))"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"controlling-outbreak-size","dir":"Articles","previous_headings":"","what":"Controlling outbreak size","title":"Getting Started with {simulist}","text":"reproduction number (RR) strong influence size outbreak. {simulist}, reproduction number , provided directly, rather determined mean number contacts probability infection. However, {simulist} package generates line list data using stochastic algorithm, even R<1R < 1 can produce substantial outbreak chance, R>>1R >> 1 sometimes produce vast epidemic one simulation (.e. one replicate) due stochasticity. Alert reproduction number (RR) simulation results contact distribution (contact_distribution) probability infection (prob_infection); number infections binomial sample number contacts case probability infection (.e. sampled) given prob_infect. average number secondary infections primary case greater 1 (R>1R > 1) can lead outbreak becoming extremely large. currently depletion susceptible individuals simulation model (.e. infinite population size), maximum outbreak size (second element vector supplied outbreak_size argument) can used return line list early without producing excessively large data set. R>1R > 1, simulation may return early reaching maximum outbreak size. scenarios R>1R > 1, RR value controlling rate maximum outbreak size reached rather size outbreak (simulations R>1R > 1 reach maximum outbreak size due stochasticity). simulation therefore sensitive contact distribution probability infection resulting RR just 1. requiring minimum maximum outbreak size can specify outbreak_size argument sim_linelist(). default set 10 10,000 minimum maximum, respectively. case minimum outbreak size, means simulation return line list conditioning met. words, simulation resimulate branching process model outbreak infects least 10 people. case maximum outbreak size, number infected individuals exceeds maximum simulation end, even still infectious individuals capable continuing transmission, function return data early warning number infections data reached maximum stating many cases contacts data output. requiring line list represents large outbreak, COVID-19 outbreak, setting outbreak_size larger number guarantees line list least size. simulate line list requiring least 250 cases (fewer 10,000 cases). maximum number cases can also increased simulating outbreaks global pandemics. amount time simulation takes can determined mean contact distribution (contact_distribution), probability infection (prob_infection) conditioning outbreak size (outbreak_size). minimum outbreak_size large, example hundreds thousands cases, mean number contacts probability infection mean reproduction number one, take many branching process simulations finding one produces sufficiently large epidemic.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   outbreak_size = c(250, 1e4) ) head(linelist) #>   id            case_name case_type sex age date_onset date_reporting #> 1  1          John Farley confirmed   m  61 2023-01-01     2023-01-01 #> 2  2      Jared Weixelman confirmed   m  29 2023-01-01     2023-01-01 #> 3  3         Kyla Collins confirmed   f  71 2023-01-01     2023-01-01 #> 4  4    Shianne Crawleigh  probable   f  23 2023-01-01     2023-01-01 #> 5  5 Kathryn Pfannenstiel confirmed   f   7 2023-01-01     2023-01-01 #> 6  6     Catherine Morris  probable   f  19 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-31        2023-01-09 #> 3     2023-01-04      died   2023-01-13         2022-12-28        2023-01-02 #> 4     2023-01-05 recovered         <NA>         2022-12-29        2023-01-04 #> 5           <NA> recovered         <NA>         2022-12-30        2023-01-08 #> 6     2023-01-04      died   2023-01-20         2022-12-29        2023-01-02 #>   ct_value #> 1     22.7 #> 2     24.4 #> 3     24.2 #> 4       NA #> 5     27.0 #> 6       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"case-type","dir":"Articles","previous_headings":"","what":"Case type","title":"Getting Started with {simulist}","text":"infectious disease outbreak may possible confirm every infection case. confirmed case typically defined via diagnostic test. several reasons case may confirmed, including limited testing capacity mild non-specific early symptoms, especially fast growing epidemics. therefore include two categories cases: probable suspected. example, probable cases may show clinical evidence disease , , confirmed diagnostic test. Suspected cases possibly infected show clear clinical epidemiological evidence, diagnostic test performed. Hence distribution suspected/probable/confirmed depend pathogen characteristics, outbreak-specific definitions, resources available. line list output {simulist} simulation contains column (case_type) type case. {simulist} can simulate varying probabilities case suspected, probable confirmed. default sim_linelist() function uses probabilities suspected = 0.2, probable = 0.3 confirmed = 0.5. alter probabilities, supply named vector sim_linelist() argument case_type_probs. vector contain three numbers, names suspected, probable confirmed, numbers summing one. change values simulate outbreak proportion cases confirmed laboratory testing high. also possible set one categories 1, case every case type. way {simulist} assigns case types pasting case types onto existing case data. Thus, viewed true underlying data cases simulation confirmed, lack information cases. cases output line list incorrectly attributed probable suspected infected. say, individuals line list, whatever case type, infected outbreak.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id             case_name case_type sex age date_onset date_reporting #> 1  1 Hannelore Butterworth  probable   f  41 2023-01-01     2023-01-01 #> 2  3      Daniel Schenally confirmed   m   9 2023-01-01     2023-01-01 #> 3  4     Margaret Vanovski confirmed   f  18 2023-01-01     2023-01-01 #> 4  5        Belle Castillo confirmed   f  53 2023-01-01     2023-01-01 #> 5  7           Julio Perez confirmed   m  58 2023-01-02     2023-01-02 #> 6  9       Victor Martinez suspected   m  69 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-28        2023-01-06 #> 3           <NA> recovered         <NA>         2022-12-29        2023-01-02 #> 4           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-30        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-31        2023-01-07 #>   ct_value #> 1       NA #> 2     24.6 #> 3     24.0 #> 4     26.3 #> 5     27.0 #> 6       NA linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   case_type_probs = c(suspected = 0.05, probable = 0.05, confirmed = 0.9) ) head(linelist) #>   id         case_name case_type sex age date_onset date_reporting #> 1  1        Kyle Avery confirmed   m  63 2023-01-01     2023-01-01 #> 2  2  Alexandra Walson confirmed   f  43 2023-01-01     2023-01-01 #> 3  4  Elizabeth Costra confirmed   f  17 2023-01-01     2023-01-01 #> 4  7    Rachael Bulwan confirmed   f  81 2023-01-01     2023-01-01 #> 5  8      Cole Stanton confirmed   m  41 2023-01-01     2023-01-01 #> 6  9 Mukhtaar el-Salem confirmed   m   8 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-05      died   2023-02-18               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-27        2023-01-04 #> 3           <NA> recovered         <NA>         2022-12-26        2023-01-03 #> 4           <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 5           <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-26        2023-01-03 #>   ct_value #> 1     28.8 #> 2     23.3 #> 3     21.6 #> 4     22.6 #> 5     25.2 #> 6     27.8"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"anonymous-line-list","dir":"Articles","previous_headings":"","what":"Anonymous line list","title":"Getting Started with {simulist}","text":"default sim_linelist() provides name individual line list. anonymised line list required anonymise argument sim_linelist() can set TRUE. names used line list produced random {randomNames} R package. Therefore, even anonymise = FALSE personal data real individuals produced shared. anonymise argument changes $case_name column line list, deemed personally identifiable information (PII) line list data.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   anonymise = TRUE ) head(linelist) #>   id  case_name case_type sex age date_onset date_reporting date_admission #> 1  1 NhP49FIptg  probable   m  51 2023-01-01     2023-01-01     2023-01-04 #> 2  4 OtN8E7YVtZ confirmed   m  34 2023-01-01     2023-01-01           <NA> #> 3  6 YDp6rBKNAl confirmed   f   1 2023-01-01     2023-01-01           <NA> #> 4  7 vn6Q9OL6nl  probable   m   1 2023-01-01     2023-01-01           <NA> #> 5  9 GPzXGGMgWr  probable   m  51 2023-01-01     2023-01-01           <NA> #> 6 11 me7bmYCvSj  probable   f  89 2023-01-02     2023-01-02           <NA> #>     outcome date_outcome date_first_contact date_last_contact ct_value #> 1      died   2023-01-22               <NA>              <NA>       NA #> 2 recovered         <NA>         2022-12-31        2023-01-06     26.6 #> 3 recovered         <NA>         2022-12-31        2023-01-04     25.8 #> 4 recovered         <NA>         2022-12-27        2023-01-05       NA #> 5 recovered         <NA>         2022-12-29        2023-01-01       NA #> 6 recovered         <NA>         2022-12-29        2023-01-02       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"population-age","dir":"Articles","previous_headings":"","what":"Population age","title":"Getting Started with {simulist}","text":"overview line list can simulated uniform structured population age distribution see vignette dedicated topic.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Getting Started with {simulist}","text":"overview line list can simulated age-stratified (age-dependent) hospitalisation death risks see vignette dedicated topic.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"simulate-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate contacts table","title":"Getting Started with {simulist}","text":"simulate contacts table, sim_contacts() function can used. requires arguments sim_linelist(), require onset--hospitalisation delay onset--death delays.","code":"contacts <- sim_contacts(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5 ) head(contacts) #>               from              to age sex date_first_contact date_last_contact #> 1 Janelle Monarrez   Phillip Degen  51   m         2022-12-29        2023-01-05 #> 2 Janelle Monarrez   Taylor Curtis  17   f         2022-12-30        2023-01-03 #> 3 Janelle Monarrez   Nuzha al-Musa  68   f         2022-12-30        2023-01-02 #> 4    Phillip Degen  Tess Sorghardt  77   f         2022-12-28        2023-01-03 #> 5    Nuzha al-Musa Yutitham Tamura  15   m         2022-12-28        2023-01-06 #> 6    Nuzha al-Musa    Jose Lefever  44   m         2022-12-30        2023-01-03 #>   was_case         status #> 1        Y           case #> 2        N under_followup #> 3        Y           case #> 4        Y           case #> 5        N under_followup #> 6        N under_followup"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"simulate-both-line-list-and-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate both line list and contacts table","title":"Getting Started with {simulist}","text":"produce line list contacts table outbreak, sim_linelist() sim_contacts() used separately due stochastic algorithm, meaning data line list discordant contacts table. order simulate line list contacts table outbreak sim_outbreak() function required. simulate single outbreak return line list contacts table. inputs sim_outbreak() inputs required sim_linelist(). sim_outbreak() features sim_linelist() sim_contacts(), includes simulating age-stratified risks hospitalisation death, probability case types contact tracing status can modified. Advanced sim_*() functions, default, use excess degree distribution account network effect sampling number contacts simulation model (q(n)∼(n+1)p(n+1)q(n) \\sim (n + 1)p(n + 1) p(n)p(n) probability density function distribution, e.g., Poisson Negative binomial, within .sim_network_bp() internal function). network effect can turned using config argument sim_*() function setting network = \"unadjusted\" (create_config(network = \"unadjusted\")) instead sample probability distribution p(n)p(n).","code":"outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id      case_name case_type sex age date_onset date_reporting date_admission #> 1  1 Brenden Newman  probable   m   6 2023-01-01     2023-01-01           <NA> #> 2  2  Mayra Montoya confirmed   f  46 2023-01-02     2023-01-02           <NA> #> 3  4 April Hemphill  probable   f  67 2023-01-03     2023-01-03           <NA> #> 4  6     Olivia Kim confirmed   f  90 2023-01-04     2023-01-04           <NA> #> 5  7   Semaj Turner confirmed   m  47 2023-01-02     2023-01-02           <NA> #> 6  9    Alex Yazzie confirmed   m  65 2023-01-03     2023-01-03           <NA> #>     outcome date_outcome date_first_contact date_last_contact ct_value #> 1 recovered         <NA>               <NA>              <NA>       NA #> 2 recovered         <NA>         2022-12-29        2023-01-04     24.3 #> 3 recovered         <NA>         2022-12-28        2023-01-03       NA #> 4 recovered         <NA>         2022-12-29        2023-01-04     26.4 #> 5 recovered         <NA>         2022-12-30        2023-01-03     27.6 #> 6 recovered         <NA>         2022-12-27        2023-01-06     25.0 head(outbreak$contacts) #>             from              to age sex date_first_contact date_last_contact #> 1 Brenden Newman   Mayra Montoya  46   f         2022-12-29        2023-01-04 #> 2 Brenden Newman Mikaela Gurreri  29   f         2022-12-28        2023-01-02 #> 3 Brenden Newman  April Hemphill  67   f         2022-12-28        2023-01-03 #> 4 Brenden Newman     Clint Rippy  55   m         2022-12-30        2023-01-04 #> 5 Brenden Newman      Olivia Kim  90   f         2022-12-29        2023-01-04 #> 6 Brenden Newman    Semaj Turner  47   m         2022-12-30        2023-01-03 #>   was_case         status #> 1        Y           case #> 2        N under_followup #> 3        Y           case #> 4        N under_followup #> 5        Y           case #> 6        Y           case"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"using-functions-for-distributions-instead-of-epiparameter","dir":"Articles","previous_headings":"","what":"Using functions for distributions instead of <epiparameter>","title":"Getting Started with {simulist}","text":"contact_distribution, infectious_period, onset_to_hosp, onset_to_death onset_to_recovery arguments can accept either <epiparameter> object (shown ), can accept function. possible use predefined function anonymous function. ’ll demonstrate use .","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"predefined-functions","dir":"Articles","previous_headings":"Using functions for distributions instead of <epiparameter>","what":"Predefined functions","title":"Getting Started with {simulist}","text":"","code":"contact_distribution <- function(x) dpois(x = x, lambda = 2) infectious_period <- function(x) rgamma(n = x, shape = 2, scale = 2) onset_to_hosp <- function(x) rlnorm(n = x, meanlog = 1.5, sdlog = 0.5) onset_to_death <- function(x) rweibull(n = x, shape = 1, scale = 5)  outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id       case_name case_type sex age date_onset date_reporting date_admission #> 1  1 Andrew Terrazas confirmed   m  16 2023-01-01     2023-01-01     2023-01-06 #> 2  2    Max Moraitis confirmed   m  81 2023-01-04     2023-01-04           <NA> #> 3  3   Brandi Chavez  probable   f  49 2023-01-02     2023-01-02           <NA> #> 4  5   Glenna Talley confirmed   f   5 2023-01-06     2023-01-06           <NA> #> 5  8 Nikhil Manglona  probable   m  74 2023-01-07     2023-01-07     2023-01-13 #> 6 10   Alisiana Witt confirmed   f  34 2023-01-08     2023-01-08           <NA> #>     outcome date_outcome date_first_contact date_last_contact ct_value #> 1      died   2023-01-06               <NA>              <NA>     23.6 #> 2 recovered         <NA>         2023-01-01        2023-01-03     23.3 #> 3 recovered         <NA>         2022-12-29        2023-01-08       NA #> 4 recovered         <NA>         2022-12-30        2023-01-07     24.5 #> 5 recovered         <NA>         2022-12-31        2023-01-09       NA #> 6 recovered         <NA>         2023-01-04        2023-01-12     23.3 head(outbreak$contacts) #>              from            to age sex date_first_contact date_last_contact #> 1 Andrew Terrazas  Max Moraitis  81   m         2023-01-01        2023-01-03 #> 2 Andrew Terrazas Brandi Chavez  49   f         2022-12-29        2023-01-08 #> 3    Max Moraitis Kyana Proctor  31   f         2023-01-04        2023-01-06 #> 4    Max Moraitis Glenna Talley   5   f         2022-12-30        2023-01-07 #> 5   Brandi Chavez Devin Mueller  46   f         2022-12-30        2023-01-03 #> 6   Brandi Chavez    Matthew Le  89   m         2023-01-02        2023-01-04 #>   was_case         status #> 1        Y           case #> 2        Y           case #> 3        N under_followup #> 4        Y           case #> 5        N under_followup #> 6        N under_followup"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"anonymous-functions","dir":"Articles","previous_headings":"Using functions for distributions instead of <epiparameter>","what":"Anonymous functions","title":"Getting Started with {simulist}","text":"contact_distribution requires density function instead random number generation function (.e. dpois() dnbinom() instead rpois() rnbinom()). due branching process simulation adjusting sampling contacts take account random network effect. approach using anonymous functions can used sim_linelist() sim_contacts().","code":"outbreak <- sim_outbreak(   contact_distribution = function(x) dpois(x = x, lambda = 2),   infectious_period = function(x) rgamma(n = x, shape = 2, scale = 2),   prob_infection = 0.5,   onset_to_hosp = function(x) rlnorm(n = x, meanlog = 1.5, sdlog = 0.5),   onset_to_death = function(x) rweibull(n = x, shape = 1, scale = 5) ) head(outbreak$linelist) #>   id             case_name case_type sex age date_onset date_reporting #> 1  1          Alvina Thesz confirmed   f  24 2023-01-01     2023-01-01 #> 2  4         Marisa Sjoden confirmed   f  40 2023-01-01     2023-01-01 #> 3  8      Joseph Bandreddi confirmed   m  46 2023-01-02     2023-01-02 #> 4  9          Summer Godoy  probable   f  62 2023-01-06     2023-01-06 #> 5 12 Paola Mendez-Martinez confirmed   f  63 2023-01-06     2023-01-06 #> 6 13           Rian Miller  probable   m  83 2023-01-06     2023-01-06 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-26        2023-01-06 #> 3           <NA> recovered         <NA>         2022-12-27        2023-01-04 #> 4     2023-01-22      died   2023-01-25         2022-12-28        2023-01-04 #> 5     2023-01-09      died   2023-01-12         2023-01-04        2023-01-13 #> 6           <NA> recovered         <NA>         2023-01-05        2023-01-08 #>   ct_value #> 1     25.4 #> 2     25.3 #> 3     25.3 #> 4       NA #> 5     24.6 #> 6       NA head(outbreak$contacts) #>            from              to age sex date_first_contact date_last_contact #> 1  Alvina Thesz     Taraya Webb   6   f         2022-12-31        2023-01-04 #> 2  Alvina Thesz  James Anderson  71   m         2022-12-27        2023-01-06 #> 3  Alvina Thesz   Marisa Sjoden  40   f         2022-12-26        2023-01-06 #> 4  Alvina Thesz Meghanne Matano  27   f         2022-12-28        2023-01-05 #> 5 Marisa Sjoden   Shelley Reese  27   m         2022-12-30        2023-01-01 #> 6 Marisa Sjoden Elizabeth Weger  45   f         2022-12-28        2023-01-06 #>   was_case           status #> 1        N   under_followup #> 2        N   under_followup #> 3        Y             case #> 4        N   under_followup #> 5        N   under_followup #> 6        N lost_to_followup"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/simulist.html","id":"simulating-without-hospitalisations-andor-deaths","dir":"Articles","previous_headings":"","what":"Simulating without hospitalisations and/or deaths","title":"Getting Started with {simulist}","text":"onset--hospitalisation (onset_to_hosp) onset--death (onset_to_death) arguments can also set NULL case date admission ($date_admission) date death ($date_death) column line list contains NAs. functionality also applies sim_outbreak(). example, hosp_risk, hosp_death_risk non_hosp_death_risk set NULL. risk (*_risk) arguments left numeric inputs corresponding onset--event distribution (.e. hosp_risk onset_to_hosp hosp_death_risk non_hosp_death_risk onset_to_death) set NULL warning produced. example simulates neither hospitalisation deaths, need turned together, one can set NULL corresponding risk arguments.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = NULL,   onset_to_death = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL ) head(linelist) #>   id         case_name case_type sex age date_onset date_reporting #> 1  1   Christina Mally  probable   f   9 2023-01-01     2023-01-01 #> 2  2      Travis Reese confirmed   m  82 2023-01-03     2023-01-03 #> 3  4   Cheyanna Madrid confirmed   f  54 2023-01-06     2023-01-06 #> 4  5 Mukarram el-Fadel  probable   m  36 2023-01-03     2023-01-03 #> 5  7   Melani Cardenas confirmed   f  80 2023-01-05     2023-01-05 #> 6  8    Rachael Tharpe  probable   f  75 2023-01-08     2023-01-08 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-30        2023-01-02 #> 3           <NA> recovered         <NA>         2022-12-28        2023-01-06 #> 4           <NA> recovered         <NA>         2023-01-02        2023-01-06 #> 5           <NA> recovered         <NA>         2022-12-31        2023-01-04 #> 6           <NA> recovered         <NA>         2022-12-29        2023-01-05 #>   ct_value #> 1       NA #> 2     22.7 #> 3     24.7 #> 4       NA #> 5     23.6 #> 6       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/time-varying-cfr.html","id":"constant-case-fatality-risk","dir":"Articles","previous_headings":"","what":"Constant case fatality risk","title":"Time-varying case fatality risk","text":"calling create_config() function default output contains list element named time_varying_death_risk set NULL. corresponds constant case fatality risk time, controlled hosp_death_risk non_hosp_death_risk arguments. defaults two arguments : death risk hospitalised (hosp_death_risk): 0.5 (50%) death risk outside hospitals (non_hosp_death_risk): 0.05 (5%) example set explicitly clear risks ’re using, otherwise hosp_death_risk, non_hosp_death_risk config need specified can use default values. examples vignette set epidemic size 500 1,000 cases, ensure can clearly see case fatality patterns data. See Get Started vignette section Controlling Outbreak Size information . visualise incidence cases deaths time use {incidence2} R package. information using {incidence2} plot line list data see Visualising simulated data vignette. converting line list <data.frame> <incidence> object need ungroup outcome columns columns using {tidyr} {dplyr} R packages Tidyverse. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/time-varying-cfr_files/figure-html/plot-onset-hospitalisation-1.png” alt=“Two histograms single column, showing daily incidence cases symptom onset incidence deaths. Case fatality risk hospitalised individuals 0.5 risk non-hospitalised individuals 0.05, risks constant time. y-axis labelled”count” x-axis labelled “date_index”. plot shows fluctuating number cases time substantially fewer deaths cases.” width=“768” />","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_size = c(500, 1000),   config = create_config() )  # first 6 rows of linelist head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1  Reylando Yohannes  probable   m  40 2023-01-01     2023-01-01 #> 2  2         David Baca confirmed   m  12 2023-01-04     2023-01-04 #> 3  4     Kristopher Zhu  probable   m  45 2023-01-05     2023-01-05 #> 4  6 Muntasir al-Kaiser  probable   m  36 2023-01-07     2023-01-07 #> 5  7      Emma Kirscher  probable   f  42 2023-01-09     2023-01-09 #> 6  8           Jehan Ly confirmed   f  14 2023-01-08     2023-01-08 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-31        2023-01-04 #> 3           <NA> recovered         <NA>         2022-12-30        2023-01-04 #> 4     2023-01-09 recovered         <NA>         2023-01-03        2023-01-08 #> 5           <NA> recovered         <NA>         2023-01-01        2023-01-06 #> 6     2023-01-09 recovered         <NA>         2022-12-31        2023-01-08 #>   ct_value #> 1       NA #> 2     24.9 #> 3       NA #> 4       NA #> 5       NA #> 6     26.3 linelist <- linelist %>%   pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   rename(     date_death = died,     date_recovery = recovered   ) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     death = \"date_death\"   ),   interval = \"daily\",   complete_dates = TRUE ) plot(daily)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/time-varying-cfr.html","id":"higher-risk-of-case-fatality","dir":"Articles","previous_headings":"","what":"Higher risk of case fatality","title":"Time-varying case fatality risk","text":"repeat simulation increase risk case fatality hospitalised (hosp_death_risk) non-hospitalised (non_hosp_death_risk) individuals infected. <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/time-varying-cfr_files/figure-html/plot-onset-death-higher-risk-1.png” alt=“Two histograms single column, showing daily incidence cases symptom onset incidence deaths. Case fatality risk hospitalised individuals 0.9 risk non-hospitalised individuals 0.75, risks constant time. y-axis labelled”count” x-axis labelled “date_index”. plot shows growth subsequent decline outbreak, similar number cases deaths time.” width=“768” />","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = 0.9,   non_hosp_death_risk = 0.75,   outbreak_size = c(500, 1000),   config = create_config() ) #> Warning: Number of cases exceeds maximum outbreak size.  #> Returning data early with 1026 cases and 1994 total contacts (including cases).  head(linelist) #>   id             case_name case_type sex age date_onset date_reporting #> 1  1 Christopher Bishop Jr confirmed   m  42 2023-01-01     2023-01-01 #> 2  2         Sophie Nedved confirmed   f  25 2023-01-06     2023-01-06 #> 3  4          Bianca Doell suspected   f  64 2023-01-07     2023-01-07 #> 4  6          Brandy Allen confirmed   f  46 2023-01-09     2023-01-09 #> 5  8    Zakiyya el-Shareef suspected   f  78 2023-01-08     2023-01-08 #> 6 10              Xai Yang suspected   m  13 2023-01-15     2023-01-15 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-05 recovered         <NA>               <NA>              <NA> #> 2     2023-01-09      died   2023-02-26         2022-12-31        2023-01-03 #> 3           <NA>      died   2023-01-27         2023-01-01        2023-01-08 #> 4           <NA>      died   2023-01-23         2023-01-04        2023-01-07 #> 5           <NA> recovered         <NA>         2023-01-05        2023-01-11 #> 6           <NA> recovered         <NA>         2023-01-06        2023-01-11 #>   ct_value #> 1     19.6 #> 2     28.7 #> 3       NA #> 4     21.7 #> 5       NA #> 6       NA linelist <- linelist %>%   pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   rename(     date_death = died,     date_recovery = recovered   ) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     death = \"date_death\"   ),   interval = \"daily\",   complete_dates = TRUE ) plot(daily)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/time-varying-cfr.html","id":"continuous-time-varying-case-fatality-risk","dir":"Articles","previous_headings":"","what":"Continuous time-varying case fatality risk","title":"Time-varying case fatality risk","text":"Now ’ve seen constant case fatality risk simulations look like, can simulate time-varying function risk. setup calling create_config() function, providing anonymous function two arguments, risk time, time_varying_death_risk. function use relevant risk (e.g. hosp_death_risk) time individual infected calculates probability (risk) death. create_config() function named arguments, argument modifying needs matched name exactly (case sensitive). See ?create_config() documentation. set case fatality risk exponentially decrease time. provide shallow (monotonic) decline case fatality simulated epidemic.  time-varying hospitalised case fatality risk function (config$time_varying_death_risk) throughout epidemic. case hospitalised risks (hosp_death_risk) maximum value day 0 decline time, risk approaching zero around day 100. Advanced time-varying case fatality risk function modifies death risk specified hosp_death_risk non_hosp_death_risk. example, user-supplied hosp_death_risk non_hosp_death_risk maximum values, user-supplied time-varying function declining time, however, user-supplied function may also increase time, fluctuate. requirements time-varying case fatality risk hospitalised non-hospitalised infections must 0 1, otherwise function error. example hosp_death_risk 0.9 non_hosp_death_risk 0.75, time-varying case fatality risk function exponential decline. means day 0 epidemic (.e. first infection seeds outbreak) risks 0.9 0.75. time start epidemic (t0+Δtt_0 + \\Delta t) risks lower, exponential function approaches zero risk case dying also go zero. Simulating time-varying case fatality risk: <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/time-varying-cfr_files/figure-html/plot-onset-death-time-varying-cfr-1.png” alt=“Two histograms single column, showing daily incidence cases symptom onset incidence deaths. baseline case fatality risk hospitalised individuals 0.9 risk non-hospitalised individuals 0.75, decline exponentially time. y-axis labelled”count” x-axis labelled “date_index”. plot shows fluctuating cases time, deaths early epidemic deaths later outbreak.” width=“768” />","code":"config <- create_config(   time_varying_death_risk = function(risk, time) risk * exp(-0.05 * time) ) exp_df <- data.frame(   time = 1:150,   value = config$time_varying_death_risk(risk = 0.9, time = 1:150) ) ggplot(exp_df) +   geom_point(mapping = aes(x = time, y = value)) +   scale_y_continuous(name = \"Value\") +   scale_x_continuous(name = \"Time (Days)\") +   theme_bw() linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = 0.9,   non_hosp_death_risk = 0.75,   outbreak_size = c(500, 1000),   config = config )  head(linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1 Eduardo Avalos Chavira confirmed   m  59 2023-01-01     2023-01-01 #> 2  2    Danielle Lopez-Shue confirmed   f   2 2023-01-06     2023-01-06 #> 3  3          Rebecca Begay suspected   f  14 2023-01-02     2023-01-02 #> 4  6          Miguel Cortez  probable   m  49 2023-01-07     2023-01-07 #> 5  8            Cam Tu Reed  probable   f  22 2023-01-08     2023-01-08 #> 6 11            Kyla Tafoya suspected   f  40 2023-01-04     2023-01-04 #>   date_admission outcome date_outcome date_first_contact date_last_contact #> 1           <NA>    died   2023-01-19               <NA>              <NA> #> 2     2023-01-09    died   2023-02-01         2022-12-30        2023-01-07 #> 3           <NA>    died   2023-01-31         2022-12-31        2023-01-04 #> 4           <NA>    died   2023-01-26         2023-01-05        2023-01-08 #> 5     2023-01-11    died   2023-01-22         2023-01-03        2023-01-08 #> 6           <NA>    died   2023-01-13         2022-12-27        2023-01-06 #>   ct_value #> 1     26.2 #> 2     25.7 #> 3       NA #> 4       NA #> 5       NA #> 6       NA linelist <- linelist %>%   pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   rename(     date_death = died,     date_recovery = recovered   ) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     death = \"date_death\"   ),   interval = \"daily\",   complete_dates = TRUE ) plot(daily)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/time-varying-cfr.html","id":"stepwise-time-varying-case-fatality-risk","dir":"Articles","previous_headings":"","what":"Stepwise time-varying case fatality risk","title":"Time-varying case fatality risk","text":"addition continuously varying case fatality risk function, simulation can also work stepwise (piecewise) functions. risk instantaneously change given point time another risk level. achieve , specify anonymous function create_config(), risk case dying set baseline hosp_death_risk non_hosp_death_risk first 60 days outbreak become zero (.e. individual infected day 60 definitely recover).  time-varying case fatality risk function (config$time_varying_death_risk) hospitalised death risk (hosp_death_risk) non-hospitalised death risk (non_hosp_death_risk) throughout epidemic. case risks user-supplied values day 0 day 60, become 0 onwards. Simulating stepwise time-varying case fatality risk: <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/time-varying-cfr_files/figure-html/plot-onset-death-time-varying-cfr-stepwise-1.png” alt=“Two histograms single column, showing daily incidence cases symptom onset incidence deaths. baseline case fatality risk hospitalised individuals 0.9 risk non-hospitalised individuals 0.75, change step-wise manner day 60 epidemic. y-axis labelled”count” x-axis labelled “date_index”. plot shows fluctuating cases time, deaths occuring early epidemic deaths later outbreak.” width=“768” /> stepwise function can also used specify time windows risk death reduced. specify hosp_death_risk non_hosp_death_risk first 50 days epidemic, day 50 day 100 risk reduced half, day 100 onwards risk goes back rates specified hosp_death_risk non_hosp_death_risk.  time-varying case fatality risk function (config$time_varying_death_risk) scales hospitalised death risk (hosp_death_risk) non-hospitalised death risk (non_hosp_death_risk) throughout epidemic. case risks maximum, user-supplied, values day 0 day 50, half risks day 50 day 100, return maximum value day 100 onwards. Simulating stepwise time-varying case fatality risk: <img src=“/home/runner/work/simulist/simulist/docs/dev/articles/time-varying-cfr_files/figure-html/plot-onset-death-time-varying-cfr-stepwise-window-1.png” alt=“Two histograms single column, showing daily incidence cases symptom onset incidence deaths. maximum case fatality risk hospitalised individuals 0.9 risk non-hospitalised individuals 0.75, change step-wise manner day 50 100 epidemic. y-axis labelled”count” x-axis labelled “date_index”. plot shows fluctuating cases time, deaths closely resemble number cases time.” width=“768” /> maximum case fatality risk hospitalised individuals 0.9 non-hospitalised individuals 0.75, rates remain constant days 0 50, days 50 100 case fatality risk halved (.e hosp_death_risk = 0.45 non_hosp_death_risk = 0.375), going back original risks day 100 onwards.” vignette explore applying time-varying case fatality risk age-stratified fatality risks, possible sim_linelist() sim_outbreak() functions. See Age-stratified hospitalisation death risks vignette combine instructions vignette setting time-varying function using create_config(). implementation time-varying case fatality rate simulation functions (sim_linelist() sim_outbreak()) flexible many functional forms. ways time-varying case fatality risk currently possible please make issue pull request. Currently hospitalisation risk assumed constant time can adjusted time-varying like death risk, feature like included {simulist} R package please make request issue.","code":"config <- create_config(   time_varying_death_risk = function(risk, time) ifelse(test = time < 60, yes = risk, no = 0) ) stepwise_df <- data.frame(   time = 1:150,   value = config$time_varying_death_risk(risk = 0.9, time = 1:150) ) ggplot(stepwise_df) +   geom_point(mapping = aes(x = time, y = value)) +   scale_y_continuous(name = \"Value\") +   scale_x_continuous(name = \"Time (Days)\") +   theme_bw() linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = 0.9,   non_hosp_death_risk = 0.75,   outbreak_size = c(500, 1000),   config = config )  head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1    Lannis Crossley confirmed   f  54 2023-01-01     2023-01-01 #> 2  2 Brittany Masteller confirmed   f  44 2023-01-05     2023-01-05 #> 3  4   Hamood al-Jabara confirmed   m  69 2023-01-07     2023-01-07 #> 4  5    Vanessa Salazar suspected   f  29 2023-01-11     2023-01-11 #> 5  6  Domineque Matthes confirmed   f  16 2023-01-10     2023-01-10 #> 6  8       Ana Melendez suspected   f  71 2023-01-09     2023-01-09 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-26        2023-01-03 #> 3     2023-01-08      died   2023-01-15         2022-12-26        2023-01-02 #> 4           <NA>      died   2023-03-06         2023-01-02        2023-01-09 #> 5           <NA>      died   2023-01-25         2023-01-03        2023-01-07 #> 6           <NA>      died   2023-01-14         2023-01-03        2023-01-09 #>   ct_value #> 1     27.3 #> 2     23.5 #> 3     26.4 #> 4       NA #> 5     25.9 #> 6       NA linelist <- linelist %>%   pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   rename(     date_death = died,     date_recovery = recovered   ) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     death = \"date_death\"   ),   interval = \"daily\",   complete_dates = TRUE ) plot(daily) config <- create_config(   time_varying_death_risk = function(risk, time) {     ifelse(test = time > 50 & time < 100, yes = risk * 0.5, no = risk)   } ) stepwise_df <- data.frame(   time = 1:150,   value = config$time_varying_death_risk(risk = 0.9, time = 1:150) ) ggplot(stepwise_df) +   geom_point(mapping = aes(x = time, y = value)) +   scale_y_continuous(name = \"Value\", limits = c(0, 1)) +   scale_x_continuous(name = \"Time (Days)\") +   theme_bw() linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = 0.9,   non_hosp_death_risk = 0.75,   outbreak_size = c(500, 1000),   config = config ) #> Warning: Number of cases exceeds maximum outbreak size.  #> Returning data early with 1009 cases and 1973 total contacts (including cases).  head(linelist) #>   id         case_name case_type sex age date_onset date_reporting #> 1  1    Dang Autterson  probable   m  48 2023-01-01     2023-01-01 #> 2  2 Darrion Beauchamp  probable   m   4 2023-01-02     2023-01-02 #> 3  3     Alexis Geebro  probable   f  58 2023-01-07     2023-01-07 #> 4  6  Angelica Herrera confirmed   f  31 2023-01-02     2023-01-02 #> 5  7   Catherine Scott confirmed   f  77 2023-01-10     2023-01-10 #> 6  8      Mario Ibarra confirmed   m  62 2023-01-08     2023-01-08 #>   date_admission outcome date_outcome date_first_contact date_last_contact #> 1           <NA>    died   2023-01-22               <NA>              <NA> #> 2     2023-01-05    died   2023-02-05         2022-12-30        2023-01-01 #> 3     2023-01-09    died   2023-01-25         2023-01-01        2023-01-02 #> 4     2023-01-04    died   2023-01-13         2022-12-30        2023-01-06 #> 5           <NA>    died   2023-01-19         2023-01-04        2023-01-10 #> 6           <NA>    died   2023-02-12         2023-01-05        2023-01-11 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4     23.9 #> 5     19.9 #> 6     25.4 linelist <- linelist %>%   pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   rename(     date_death = died,     date_recovery = recovered   ) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     death = \"date_death\"   ),   interval = \"daily\",   complete_dates = TRUE ) plot(daily)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"visualising-incidence-of-onset-hospitalisation-and-death","dir":"Articles","previous_headings":"","what":"Visualising incidence of onset, hospitalisation and death","title":"Visualising simulated data","text":"section vignette heavily based upon examples given introduction {incidence2} package vignette. highly recommended read documentation supplied {incidence2} package explore full range functionality. visualise number cases onset particular day, {incidence2} package, dedicated class (<incidence2>) used handling plotting data. Currently {simulist} outputs dates rounded nearest day, .e. can half way day. obvious R prints dates nearest day default, removing date class (using unclass()) can see decimals (R stores dates internally number days since 1970-01-01). Note storing dates precise doubles integer days may change near future. interval = \"daily\" required {incidence2} requires rounded dates aggregate cases per unit time specifying interval automatically us. possible every date onset symptoms, resulting dates missing entries. taken care setting complete_dates = TRUE, alternatively can achieved using incidence2::complete_dates() <incidence2> object.  Alternatively, incidence can plotting weekly:  order check differences group line list data, example sex, <incidence2> data object can recreated, specifying columns group .  visualise onset, hospitalisation death incidence plot can jointly specified date_index argument incidence2::incidence(). First outcome data needs pivoted long data wide data input incidence2::incidence().","code":"# create incidence object daily <- incidence(   x = linelist,   date_index = \"date_onset\",   interval = \"daily\",   complete_dates = TRUE ) plot(daily) weekly <- incidence(linelist, date_index = \"date_onset\", interval = \"isoweek\") plot(weekly) weekly <- incidence(   linelist,   date_index = \"date_onset\",   interval = \"isoweek\",   groups = \"sex\" ) plot(weekly)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"reshape-line-list-data","dir":"Articles","previous_headings":"Visualising incidence of onset, hospitalisation and death","what":"Reshape line list data","title":"Visualising simulated data","text":"Base R Tidyverse","code":"# this can also be achieved with the reshape() function but the user interface # for that function is complicated so here we just create the columns manually linelist$date_death <- linelist$date_outcome linelist$date_death[linelist$outcome == \"recovered\"] <- NA linelist$date_recovery <- linelist$date_outcome linelist$date_recovery[linelist$outcome == \"died\"] <- NA library(tidyr) library(dplyr) linelist <- linelist %>%   tidyr::pivot_wider(     names_from = outcome,     values_from = date_outcome   ) %>%   dplyr::rename(     date_death = died,     date_recovery = recovered   )"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"section","dir":"Articles","previous_headings":"","what":"Visualising simulated data","title":"Visualising simulated data","text":"","code":"daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     hospitalisation = \"date_admission\",     death = \"date_death\"   ),   interval = \"daily\",   groups = \"sex\",   complete_dates = TRUE ) plot(daily)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"demographic-data","dir":"Articles","previous_headings":"","what":"Demographic data","title":"Visualising simulated data","text":"Please see Age-structured population vignette examples plot distribution ages within line list data set, including age pyramids. plotting code vignettes hidden default, click Code button arrow reveal plotting code.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"visualising-contact-data","dir":"Articles","previous_headings":"","what":"Visualising contact data","title":"Visualising simulated data","text":"section vignette based upon examples {epicontacts} R package documentation examples provided Epidemiological R Handbook chapter transmission chains. recommend going documentation {epicontacts} R package see plotting data wrangling functionality. Just utilised <incidence2> class {incidence2} package handle plot incidence data, going use <epicontacts> class {epicontacts} R package handle plot epidemiological contact data. benefit using {epicontacts} {incidence2}, fact default plotting method supplied package. Advanced Additionally, {epicontacts} provides access network plotting JavaScript libraries via {visNetwork} {threejs} R packages. {epicontacts} function make_epicontacts() requires line list contacts table, run sim_outbreak() function produce . use epidemiological delay distributions used simulate line list , reduce mean number contacts contact distribution 2. Using line list contacts data simulated can create <epicontacts> object. <epicontacts> object comes custom printing feature see data. plot contact network can use plotting method supplied {epicontacts} automatically recognised {epicontacts} package loaded (done library(epicontacts)). viewing vignette web (web browser) graph interactive allow highlight individuals network using drop-menu, zoom plot scrolling, move network using mouse drag drop. also option plot contacts network 3D using epicontacts::graph3D(). default outbreak simulated sim_outbreak() contains contacts cases infected. shown previous network plot terminal nodes pass infection individuals (note terminal nodes can also infected individuals infect anybody else, either due contacts due probabilistic nature infection transmission). show subset contacts table order plot transmission network cases outbreak.","code":"contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing set.seed(1) outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1           Kevin Pullen suspected   m   1 2023-01-01     2023-01-01 #> 2  2 Carisa Flores-Gonzalez confirmed   f  29 2023-01-01     2023-01-01 #> 3  3       Maazin el-Othman confirmed   m  78 2023-01-02     2023-01-02 #> 4  5       Faisal el-Vaziri suspected   m  70 2023-01-05     2023-01-05 #> 5  6           Lynsey Duron confirmed   f  28 2023-01-02     2023-01-02 #> 6  8         Lilibeth Black confirmed   f  61 2023-01-04     2023-01-04 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-03      died   2023-01-18               <NA>              <NA> #> 2     2023-01-03      died   2023-02-09         2022-12-30        2023-01-08 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 4     2023-01-08 recovered         <NA>         2022-12-31        2023-01-04 #> 5     2023-01-06 recovered         <NA>         2022-12-30        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-29        2023-01-06 #>   ct_value #> 1       NA #> 2     25.8 #> 3     24.9 #> 4       NA #> 5     24.5 #> 6     26.4 head(outbreak$contacts) #>                     from                     to age sex date_first_contact #> 1           Kevin Pullen Carisa Flores-Gonzalez  29   f         2022-12-30 #> 2           Kevin Pullen       Maazin el-Othman  78   m         2022-12-31 #> 3 Carisa Flores-Gonzalez         Katelyn Catlin  22   f         2022-12-30 #> 4 Carisa Flores-Gonzalez       Faisal el-Vaziri  70   m         2022-12-31 #> 5       Maazin el-Othman           Lynsey Duron  28   f         2022-12-30 #> 6       Maazin el-Othman        Amaani al-Gaber  37   f         2022-12-28 #>   date_last_contact was_case         status #> 1        2023-01-08        Y           case #> 2        2023-01-05        Y           case #> 3        2023-01-03        N under_followup #> 4        2023-01-04        Y           case #> 5        2023-01-03        Y           case #> 6        2023-01-02        N under_followup epicontacts <- make_epicontacts(   linelist = outbreak$linelist,   contacts = outbreak$contacts,   id = \"case_name\",   from = \"from\",   to = \"to\",   directed = TRUE ) epicontacts #>  #> /// Epidemiological Contacts // #>  #>   // class: epicontacts #>   // 12 cases in linelist; 21 contacts;  directed  #>  #>   // linelist #>  #> # A tibble: 12 × 13 #>    id        id.1 case_type sex     age date_onset date_reporting date_admission #>    <chr>    <int> <chr>     <chr> <int> <date>     <date>         <date>         #>  1 Kevin P…     1 suspected m         1 2023-01-01 2023-01-01     2023-01-03     #>  2 Carisa …     2 confirmed f        29 2023-01-01 2023-01-01     2023-01-03     #>  3 Maazin …     3 confirmed m        78 2023-01-02 2023-01-02     NA             #>  4 Faisal …     5 suspected m        70 2023-01-05 2023-01-05     2023-01-08     #>  5 Lynsey …     6 confirmed f        28 2023-01-02 2023-01-02     2023-01-06     #>  6 Lilibet…     8 confirmed f        61 2023-01-04 2023-01-04     NA             #>  7 Kaleb N…    11 confirmed m        86 2023-01-04 2023-01-04     NA             #>  8 Collin …    12 confirmed m        71 2023-01-06 2023-01-06     2023-01-08     #>  9 Marquaj…    13 confirmed f        51 2023-01-07 2023-01-07     NA             #> 10 Francis…    19 probable  m        50 2023-01-09 2023-01-09     NA             #> 11 Kevin W…    21 suspected m        20 2023-01-11 2023-01-11     NA             #> 12 Sean Sh…    22 confirmed m        24 2023-01-11 2023-01-11     NA             #> # ℹ 5 more variables: outcome <chr>, date_outcome <date>, #> #   date_first_contact <date>, date_last_contact <date>, ct_value <dbl> #>  #>   // contacts #>  #> # A tibble: 21 × 8 #>    from   to      age sex   date_first_contact date_last_contact was_case status #>    <chr>  <chr> <int> <chr> <date>             <date>            <chr>    <chr>  #>  1 Kevin… Cari…    29 f     2022-12-30         2023-01-08        Y        case   #>  2 Kevin… Maaz…    78 m     2022-12-31         2023-01-05        Y        case   #>  3 Caris… Kate…    22 f     2022-12-30         2023-01-03        N        under… #>  4 Caris… Fais…    70 m     2022-12-31         2023-01-04        Y        case   #>  5 Maazi… Lyns…    28 f     2022-12-30         2023-01-03        Y        case   #>  6 Maazi… Amaa…    37 f     2022-12-28         2023-01-02        N        under… #>  7 Maazi… Lili…    61 f     2022-12-29         2023-01-06        Y        case   #>  8 Faisa… Jorg…    46 m     2023-01-01         2023-01-06        N        lost_… #>  9 Lynse… Jacy…    67 f     2022-12-30         2023-01-05        N        lost_… #> 10 Lilib… Kale…    86 m     2023-01-02         2023-01-07        Y        case   #> # ℹ 11 more rows plot(epicontacts)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"subset-contact-network-to-transmission-network","dir":"Articles","previous_headings":"Visualising contact data","what":"Subset contact network to transmission network","title":"Visualising simulated data","text":"Base R Tidyverse","code":"outbreak$contacts <- outbreak$contacts[outbreak$contacts$was_case == \"Y\", ] library(dplyr) outbreak$contacts <- outbreak$contacts %>% # nolint one_call_pipe_linter   dplyr::filter(was_case == \"Y\")"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"section-1","dir":"Articles","previous_headings":"","what":"Visualising simulated data","title":"Visualising simulated data","text":"","code":"head(outbreak$linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1           Kevin Pullen suspected   m   1 2023-01-01     2023-01-01 #> 2  2 Carisa Flores-Gonzalez confirmed   f  29 2023-01-01     2023-01-01 #> 3  3       Maazin el-Othman confirmed   m  78 2023-01-02     2023-01-02 #> 4  5       Faisal el-Vaziri suspected   m  70 2023-01-05     2023-01-05 #> 5  6           Lynsey Duron confirmed   f  28 2023-01-02     2023-01-02 #> 6  8         Lilibeth Black confirmed   f  61 2023-01-04     2023-01-04 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-03      died   2023-01-18               <NA>              <NA> #> 2     2023-01-03      died   2023-02-09         2022-12-30        2023-01-08 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 4     2023-01-08 recovered         <NA>         2022-12-31        2023-01-04 #> 5     2023-01-06 recovered         <NA>         2022-12-30        2023-01-03 #> 6           <NA> recovered         <NA>         2022-12-29        2023-01-06 #>   ct_value #> 1       NA #> 2     25.8 #> 3     24.9 #> 4       NA #> 5     24.5 #> 6     26.4 head(outbreak$contacts) #>                     from                     to age sex date_first_contact #> 1           Kevin Pullen Carisa Flores-Gonzalez  29   f         2022-12-30 #> 2           Kevin Pullen       Maazin el-Othman  78   m         2022-12-31 #> 3 Carisa Flores-Gonzalez       Faisal el-Vaziri  70   m         2022-12-31 #> 4       Maazin el-Othman           Lynsey Duron  28   f         2022-12-30 #> 5       Maazin el-Othman         Lilibeth Black  61   f         2022-12-29 #> 6         Lilibeth Black        Kaleb Natarelli  86   m         2023-01-02 #>   date_last_contact was_case status #> 1        2023-01-08        Y   case #> 2        2023-01-05        Y   case #> 3        2023-01-04        Y   case #> 4        2023-01-03        Y   case #> 5        2023-01-06        Y   case #> 6        2023-01-07        Y   case epicontacts <- make_epicontacts(   linelist = outbreak$linelist,   contacts = outbreak$contacts,   id = \"case_name\",   from = \"from\",   to = \"to\",   directed = TRUE ) epicontacts #>  #> /// Epidemiological Contacts // #>  #>   // class: epicontacts #>   // 12 cases in linelist; 11 contacts;  directed  #>  #>   // linelist #>  #> # A tibble: 12 × 13 #>    id        id.1 case_type sex     age date_onset date_reporting date_admission #>    <chr>    <int> <chr>     <chr> <int> <date>     <date>         <date>         #>  1 Kevin P…     1 suspected m         1 2023-01-01 2023-01-01     2023-01-03     #>  2 Carisa …     2 confirmed f        29 2023-01-01 2023-01-01     2023-01-03     #>  3 Maazin …     3 confirmed m        78 2023-01-02 2023-01-02     NA             #>  4 Faisal …     5 suspected m        70 2023-01-05 2023-01-05     2023-01-08     #>  5 Lynsey …     6 confirmed f        28 2023-01-02 2023-01-02     2023-01-06     #>  6 Lilibet…     8 confirmed f        61 2023-01-04 2023-01-04     NA             #>  7 Kaleb N…    11 confirmed m        86 2023-01-04 2023-01-04     NA             #>  8 Collin …    12 confirmed m        71 2023-01-06 2023-01-06     2023-01-08     #>  9 Marquaj…    13 confirmed f        51 2023-01-07 2023-01-07     NA             #> 10 Francis…    19 probable  m        50 2023-01-09 2023-01-09     NA             #> 11 Kevin W…    21 suspected m        20 2023-01-11 2023-01-11     NA             #> 12 Sean Sh…    22 confirmed m        24 2023-01-11 2023-01-11     NA             #> # ℹ 5 more variables: outcome <chr>, date_outcome <date>, #> #   date_first_contact <date>, date_last_contact <date>, ct_value <dbl> #>  #>   // contacts #>  #> # A tibble: 11 × 8 #>    from   to      age sex   date_first_contact date_last_contact was_case status #>    <chr>  <chr> <int> <chr> <date>             <date>            <chr>    <chr>  #>  1 Kevin… Cari…    29 f     2022-12-30         2023-01-08        Y        case   #>  2 Kevin… Maaz…    78 m     2022-12-31         2023-01-05        Y        case   #>  3 Caris… Fais…    70 m     2022-12-31         2023-01-04        Y        case   #>  4 Maazi… Lyns…    28 f     2022-12-30         2023-01-03        Y        case   #>  5 Maazi… Lili…    61 f     2022-12-29         2023-01-06        Y        case   #>  6 Lilib… Kale…    86 m     2023-01-02         2023-01-07        Y        case   #>  7 Lilib… Coll…    71 m     2022-12-31         2023-01-12        Y        case   #>  8 Lilib… Marq…    51 f     2023-01-01         2023-01-07        Y        case   #>  9 Marqu… Fran…    50 m     2023-01-05         2023-01-09        Y        case   #> 10 Marqu… Kevi…    20 m     2023-01-04         2023-01-10        Y        case   #> 11 Franc… Sean…    24 m     2023-01-03         2023-01-12        Y        case plot(epicontacts)"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/vis-linelist.html","id":"visualising-other-line-list-information","dir":"Articles","previous_headings":"","what":"Visualising other line list information","title":"Visualising simulated data","text":"aspects line list data can plotted like added vignette please make issue pull request.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/wrangling-linelist.html","id":"simulate-an-outbreak","dir":"Articles","previous_headings":"","what":"Simulate an outbreak","title":"Wrangling simulated outbreak data","text":"simulate outbreak use sim_outbreak() function {simulist} R package. unfamiliar {simulist} package sim_outbreak() function Get Started vignette great place start. First load data required outbreak simulation. Data epidemiological parameters distributions read {epiparameter} R package. seed set ensure output vignette consistent. using {simulist}, setting seed required unless need simulate line list multiple times.","code":"# create contact distribution (not available from {epiparameter} database) contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # create infectious period (not available from {epiparameter} database) infectious_period <- epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 1, scale = 1)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to hospitalisation\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to death\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function set.seed(123) outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) linelist <- outbreak$linelist contacts <- outbreak$contacts"},{"path":"https://epiverse-trace.github.io/simulist/dev/articles/wrangling-linelist.html","id":"removing-a-line-list-column","dir":"Articles","previous_headings":"","what":"Removing a line list column","title":"Wrangling simulated outbreak data","text":"every column simulated line list may required use case hand. example remove $ct_value column. instance, wanted simulate outbreak laboratory testing (e.g Polymerase chain reaction, PCR, testing) available thus Cycle threshold (Ct) value known confirmed cases. Tidyverse Base R","code":"# remove column by name linelist %>% # nolint one_call_pipe_linter   select(!ct_value) #>    id             case_name case_type sex age date_onset date_reporting #> 1   1         Fabian Mrazik confirmed   m  90 2023-01-01     2023-01-01 #> 2   3       Ashley Martinez confirmed   f  71 2023-01-01     2023-01-01 #> 3   4                Tia Vu  probable   f  48 2023-01-01     2023-01-01 #> 4   5 Abdul Majeed el-Saleh confirmed   m  77 2023-01-01     2023-01-01 #> 5   6        Courtney Flood suspected   f  83 2023-01-02     2023-01-02 #> 6   7          Joseph Jiron suspected   m  56 2023-01-01     2023-01-01 #> 7   8          Kevin Liddle suspected   m  39 2023-01-01     2023-01-01 #> 8   9       Rutaiba el-Raad confirmed   f  68 2023-01-01     2023-01-01 #> 9  10       Jaime Middleton suspected   m   1 2023-01-01     2023-01-01 #> 10 14           Emily Fyffe confirmed   f  16 2023-01-01     2023-01-01 #> 11 16          Miguel Oyebi confirmed   m  54 2023-01-02     2023-01-02 #> 12 21         Katlyn Nelson  probable   f  36 2023-01-02     2023-01-02 #> 13 24       Nicholas Rentie suspected   m  49 2023-01-02     2023-01-02 #>    date_admission   outcome date_outcome date_first_contact date_last_contact #> 1            <NA> recovered         <NA>               <NA>              <NA> #> 2      2023-01-08      died   2023-01-10         2022-12-26        2023-01-06 #> 3            <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 4            <NA> recovered         <NA>         2022-12-31        2023-01-08 #> 5            <NA> recovered         <NA>         2022-12-26        2023-01-04 #> 6            <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 7            <NA> recovered         <NA>         2022-12-31        2023-01-03 #> 8            <NA> recovered         <NA>         2022-12-29        2023-01-01 #> 9            <NA> recovered         <NA>         2022-12-26        2023-01-02 #> 10     2023-01-02 recovered         <NA>         2022-12-30        2023-01-02 #> 11     2023-01-05 recovered         <NA>         2022-12-30        2023-01-05 #> 12           <NA> recovered         <NA>         2023-01-01        2023-01-03 #> 13           <NA> recovered         <NA>         2022-12-28        2023-01-04 # remove column by numeric column indexing # ct_value is column 12 (the last column) linelist[, -12] #>    id             case_name case_type sex age date_onset date_reporting #> 1   1         Fabian Mrazik confirmed   m  90 2023-01-01     2023-01-01 #> 2   3       Ashley Martinez confirmed   f  71 2023-01-01     2023-01-01 #> 3   4                Tia Vu  probable   f  48 2023-01-01     2023-01-01 #> 4   5 Abdul Majeed el-Saleh confirmed   m  77 2023-01-01     2023-01-01 #> 5   6        Courtney Flood suspected   f  83 2023-01-02     2023-01-02 #> 6   7          Joseph Jiron suspected   m  56 2023-01-01     2023-01-01 #> 7   8          Kevin Liddle suspected   m  39 2023-01-01     2023-01-01 #> 8   9       Rutaiba el-Raad confirmed   f  68 2023-01-01     2023-01-01 #> 9  10       Jaime Middleton suspected   m   1 2023-01-01     2023-01-01 #> 10 14           Emily Fyffe confirmed   f  16 2023-01-01     2023-01-01 #> 11 16          Miguel Oyebi confirmed   m  54 2023-01-02     2023-01-02 #> 12 21         Katlyn Nelson  probable   f  36 2023-01-02     2023-01-02 #> 13 24       Nicholas Rentie suspected   m  49 2023-01-02     2023-01-02 #>    date_admission   outcome date_outcome date_first_contact ct_value #> 1            <NA> recovered         <NA>               <NA>     21.9 #> 2      2023-01-08      died   2023-01-10         2022-12-26     22.7 #> 3            <NA> recovered         <NA>         2022-12-30       NA #> 4            <NA> recovered         <NA>         2022-12-31     27.4 #> 5            <NA> recovered         <NA>         2022-12-26       NA #> 6            <NA> recovered         <NA>         2022-12-28       NA #> 7            <NA> recovered         <NA>         2022-12-31       NA #> 8            <NA> recovered         <NA>         2022-12-29     24.2 #> 9            <NA> recovered         <NA>         2022-12-26       NA #> 10     2023-01-02 recovered         <NA>         2022-12-30     21.3 #> 11     2023-01-05 recovered         <NA>         2022-12-30     26.0 #> 12           <NA> recovered         <NA>         2023-01-01       NA #> 13           <NA> recovered         <NA>         2022-12-28       NA  # remove column by column name linelist[, colnames(linelist) != \"ct_value\"] #>    id             case_name case_type sex age date_onset date_reporting #> 1   1         Fabian Mrazik confirmed   m  90 2023-01-01     2023-01-01 #> 2   3       Ashley Martinez confirmed   f  71 2023-01-01     2023-01-01 #> 3   4                Tia Vu  probable   f  48 2023-01-01     2023-01-01 #> 4   5 Abdul Majeed el-Saleh confirmed   m  77 2023-01-01     2023-01-01 #> 5   6        Courtney Flood suspected   f  83 2023-01-02     2023-01-02 #> 6   7          Joseph Jiron suspected   m  56 2023-01-01     2023-01-01 #> 7   8          Kevin Liddle suspected   m  39 2023-01-01     2023-01-01 #> 8   9       Rutaiba el-Raad confirmed   f  68 2023-01-01     2023-01-01 #> 9  10       Jaime Middleton suspected   m   1 2023-01-01     2023-01-01 #> 10 14           Emily Fyffe confirmed   f  16 2023-01-01     2023-01-01 #> 11 16          Miguel Oyebi confirmed   m  54 2023-01-02     2023-01-02 #> 12 21         Katlyn Nelson  probable   f  36 2023-01-02     2023-01-02 #> 13 24       Nicholas Rentie suspected   m  49 2023-01-02     2023-01-02 #>    date_admission   outcome date_outcome date_first_contact date_last_contact #> 1            <NA> recovered         <NA>               <NA>              <NA> #> 2      2023-01-08      died   2023-01-10         2022-12-26        2023-01-06 #> 3            <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 4            <NA> recovered         <NA>         2022-12-31        2023-01-08 #> 5            <NA> recovered         <NA>         2022-12-26        2023-01-04 #> 6            <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 7            <NA> recovered         <NA>         2022-12-31        2023-01-03 #> 8            <NA> recovered         <NA>         2022-12-29        2023-01-01 #> 9            <NA> recovered         <NA>         2022-12-26        2023-01-02 #> 10     2023-01-02 recovered         <NA>         2022-12-30        2023-01-02 #> 11     2023-01-05 recovered         <NA>         2022-12-30        2023-01-05 #> 12           <NA> recovered         <NA>         2023-01-01        2023-01-03 #> 13           <NA> recovered         <NA>         2022-12-28        2023-01-04  # remove column by assigning it to NULL linelist$ct_value <- NULL linelist #>    id             case_name case_type sex age date_onset date_reporting #> 1   1         Fabian Mrazik confirmed   m  90 2023-01-01     2023-01-01 #> 2   3       Ashley Martinez confirmed   f  71 2023-01-01     2023-01-01 #> 3   4                Tia Vu  probable   f  48 2023-01-01     2023-01-01 #> 4   5 Abdul Majeed el-Saleh confirmed   m  77 2023-01-01     2023-01-01 #> 5   6        Courtney Flood suspected   f  83 2023-01-02     2023-01-02 #> 6   7          Joseph Jiron suspected   m  56 2023-01-01     2023-01-01 #> 7   8          Kevin Liddle suspected   m  39 2023-01-01     2023-01-01 #> 8   9       Rutaiba el-Raad confirmed   f  68 2023-01-01     2023-01-01 #> 9  10       Jaime Middleton suspected   m   1 2023-01-01     2023-01-01 #> 10 14           Emily Fyffe confirmed   f  16 2023-01-01     2023-01-01 #> 11 16          Miguel Oyebi confirmed   m  54 2023-01-02     2023-01-02 #> 12 21         Katlyn Nelson  probable   f  36 2023-01-02     2023-01-02 #> 13 24       Nicholas Rentie suspected   m  49 2023-01-02     2023-01-02 #>    date_admission   outcome date_outcome date_first_contact date_last_contact #> 1            <NA> recovered         <NA>               <NA>              <NA> #> 2      2023-01-08      died   2023-01-10         2022-12-26        2023-01-06 #> 3            <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 4            <NA> recovered         <NA>         2022-12-31        2023-01-08 #> 5            <NA> recovered         <NA>         2022-12-26        2023-01-04 #> 6            <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 7            <NA> recovered         <NA>         2022-12-31        2023-01-03 #> 8            <NA> recovered         <NA>         2022-12-29        2023-01-01 #> 9            <NA> recovered         <NA>         2022-12-26        2023-01-02 #> 10     2023-01-02 recovered         <NA>         2022-12-30        2023-01-02 #> 11     2023-01-05 recovered         <NA>         2022-12-30        2023-01-05 #> 12           <NA> recovered         <NA>         2023-01-01        2023-01-03 #> 13           <NA> recovered         <NA>         2022-12-28        2023-01-04"},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer, copyright holder. Carmen Tamayo. Author. Hugo Gruson. Contributor, reviewer. Pratik R. Gupte. Contributor, reviewer. Adam Kucharski. Reviewer. Chris Hartgerink. Reviewer. Sebastian Funk. Contributor. London School Hygiene Tropical Medicine, LSHTM. Copyright holder.           00a0jsq62","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J, Tamayo C (2025). simulist: Simulate Disease Outbreak Line List Contacts Data. doi:10.5281/zenodo.10471458, https://epiverse-trace.github.io/simulist/.","code":"@Manual{,   title = {simulist: Simulate Disease Outbreak Line List and Contacts Data},   author = {Joshua W. Lambert and Carmen Tamayo},   year = {2025},   doi = {10.5281/zenodo.10471458},   url = {https://epiverse-trace.github.io/simulist/}, }"},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"simulist-simulate-line-list-data-","dir":"","previous_headings":"","what":"Simulate Disease Outbreak Line List and Contacts Data","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"simulist R package simulate individual-level infectious disease outbreak data, including line lists contact tracing data. can often useful synthetic datasets like available demonstrating outbreak analytics techniques testing new analysis methods. simulist developed Centre Mathematical Modelling Infectious Diseases London School Hygiene Tropical Medicine part Epiverse-TRACE.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"simulist allows simulate realistic line list contact tracing data, : ⏳ Parameterised epidemiological delay distributions 🏥 Population-wide age-stratified hospitalisation death risks 📊 Uniform age-structured populations 📈 Constant time-varying case fatality risk 📋 Customisable probability case types contact tracing follow-Post-process simulated line list data : 📅 Real-time outbreak snapshots right-truncation 📝 Messy data inconsistencies, mistakes missing values","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"package can installed CRAN using can install development version simulist GitHub : Alternatively, install pre-compiled binaries Epiverse TRACE R-universe","code":"install.packages(\"simulist\") # check whether {pak} is installed if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/simulist\") install.packages(\"simulist\", repos = c(\"https://epiverse-trace.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"line list can simulated calling sim_linelist(). function provides sensible defaults quickly generate epidemiologically valid data set. However, simulate realistic line list using epidemiological parameters estimated infectious disease outbreak can use previously estimated epidemiological parameters. can epiparameter R package available, epiparameter database yet (contact distribution COVID-19) can define . define contact distribution, period infectiousness, onset--hospitalisation delay, onset--death delay. simulate line list COVID-19 Poisson contact distribution mean number contacts 2 probability infection per contact 0.5, use sim_linelist() function. mean number contacts probability infection determine outbreak reproduction number, resulting reproduction number around one means likely get reasonably sized outbreak (10 - 1,000 cases, varying due stochastic simulation). Warning: reproduction number simulation results contact distribution (contact_distribution) probability infection (prob_infection); number infections binomial sample number contacts case probability infection (.e. sampled) given prob_infection. average number secondary infections primary case greater 1 can lead outbreak becoming extremely large. currently depletion susceptible individuals simulation model, maximum outbreak size (second element vector supplied outbreak_size argument) can used return line list early without producing excessively large data set. example, line list simulated using default values (see ?sim_linelist). default hospitalisation risk assumed 0.2 (.e. 20% probability infected individual becomes hospitalised) start date outbreak 1st January 2023. modify either , can specify function. simulate table contacts cases (.e. reflect contact tracing dataset) can use parameters defined example . line list contacts table required, can jointly simulated using sim_outbreak() function. uses inputs sim_linelist() sim_contacts() produce line list contacts table outbreak (arguments also default settings functions).","code":"library(simulist) set.seed(1) linelist <- sim_linelist() head(linelist) #>   id        case_name case_type sex age date_onset date_reporting #> 1  1 Lolette Phillips suspected   f  59 2023-01-01     2023-01-01 #> 2  2       James Jack suspected   m  90 2023-01-01     2023-01-01 #> 3  3      Chen Kantha confirmed   m   4 2023-01-02     2023-01-02 #> 4  5  Saleema al-Zaki  probable   f  29 2023-01-04     2023-01-04 #> 5  6     David Ponzio confirmed   m  14 2023-01-05     2023-01-05 #> 6  7 Christopher Ward  probable   m  85 2023-01-06     2023-01-06 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-09      died   2023-01-13               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-29        2023-01-03 #> 3           <NA> recovered         <NA>         2022-12-28        2023-01-01 #> 4           <NA> recovered         <NA>         2022-12-28        2023-01-04 #> 5     2023-01-09      died   2023-01-23         2022-12-31        2023-01-04 #> 6     2023-01-08 recovered         <NA>         2022-12-31        2023-01-06 #>   ct_value #> 1       NA #> 2       NA #> 3     24.8 #> 4       NA #> 5     24.6 #> 6       NA library(epiparameter) # create COVID-19 contact distribution contact_distribution <- epiparameter::epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # create COVID-19 infectious period infectious_period <- epiparameter::epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 1, scale = 1)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # create COVID-19 onset to hospital admission onset_to_hosp <- epiparameter(   disease = \"COVID-19\",   epi_name = \"onset to hospitalisation\",   prob_distribution = create_prob_distribution(     prob_distribution = \"lnorm\",     prob_distribution_params = c(meanlog = 1, sdlog = 0.5)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to death\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function set.seed(1) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1           Kevin Pullen suspected   m   1 2023-01-01     2023-01-01 #> 2  2 Carisa Flores-Gonzalez confirmed   f  29 2023-01-01     2023-01-01 #> 3  3       Maazin el-Othman confirmed   m  78 2023-01-01     2023-01-01 #> 4  5       Faisal el-Vaziri suspected   m  70 2023-01-01     2023-01-01 #> 5  6           Lynsey Duron confirmed   f  28 2023-01-01     2023-01-01 #> 6  8         Lilibeth Black confirmed   f  61 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-03      died   2023-01-18               <NA>              <NA> #> 2     2023-01-03      died   2023-02-09         2022-12-30        2023-01-08 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 4     2023-01-04 recovered         <NA>         2022-12-31        2023-01-04 #> 5     2023-01-05 recovered         <NA>         2022-12-29        2023-01-02 #> 6           <NA> recovered         <NA>         2022-12-28        2023-01-05 #>   ct_value #> 1       NA #> 2     25.8 #> 3     24.9 #> 4       NA #> 5     24.5 #> 6     26.4 linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.01,   outbreak_start_date = as.Date(\"2019-12-01\") ) head(linelist) #>   id          case_name case_type sex age date_onset date_reporting #> 1  1           Kacy Kim suspected   f  80 2019-12-01     2019-12-01 #> 2  2        Jina Warnes  probable   f  85 2019-12-01     2019-12-01 #> 3  4     Raadi el-Yasin  probable   m  76 2019-12-01     2019-12-01 #> 4  8   Joshua Castaneda confirmed   m  12 2019-12-01     2019-12-01 #> 5 11 Fat'hiyaa al-Zafar suspected   f  50 2019-12-01     2019-12-01 #> 6 14    Matthew Sheldon  probable   m  54 2019-12-01     2019-12-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2019-11-29        2019-12-05 #> 3           <NA> recovered         <NA>         2019-11-29        2019-12-08 #> 4           <NA>      died   2019-12-17         2019-11-26        2019-12-05 #> 5           <NA> recovered         <NA>         2019-11-28        2019-12-01 #> 6           <NA> recovered         <NA>         2019-11-25        2019-12-01 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4     23.7 #> 5       NA #> 6       NA contacts <- sim_contacts(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5 ) head(contacts) #>                from                  to age sex date_first_contact #> 1    Rodrigo Deluca   Jeremiah Sitinjak  23   m         2023-01-01 #> 2    Rodrigo Deluca          Eric Green  16   m         2022-12-30 #> 3    Rodrigo Deluca           Skye Chee  40   f         2022-12-30 #> 4    Rodrigo Deluca      Samantha Parga  20   f         2022-12-27 #> 5    Rodrigo Deluca Abdul Rauf al-Mirza   4   m         2022-12-28 #> 6 Jeremiah Sitinjak    Habsa Huntington   9   f         2022-12-29 #>   date_last_contact was_case         status #> 1        2023-01-04        Y           case #> 2        2023-01-02        Y           case #> 3        2023-01-02        N under_followup #> 4        2023-01-02        Y           case #> 5        2023-01-02        Y           case #> 6        2023-01-03        N under_followup outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id              case_name case_type sex age date_onset date_reporting #> 1  1         Joshua Lymburn  probable   m  45 2023-01-01     2023-01-01 #> 2  2     Augustine Gonzales confirmed   m   9 2023-01-02     2023-01-02 #> 3  4         Takeya Searles suspected   f  35 2023-01-02     2023-01-02 #> 4  6             Luke Flood confirmed   m   4 2023-01-02     2023-01-02 #> 5  8 Allison Fage-Armstrong  probable   f   2 2023-01-02     2023-01-02 #> 6 10        Faai Z el-Safar  probable   m  48 2023-01-02     2023-01-02 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2023-01-01        2023-01-05 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 4           <NA> recovered         <NA>         2023-01-02        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-31        2023-01-05 #> 6           <NA> recovered         <NA>         2022-12-29        2023-01-06 #>   ct_value #> 1       NA #> 2     24.6 #> 3       NA #> 4     25.7 #> 5       NA #> 6       NA head(outbreak$contacts) #>                 from                 to age sex date_first_contact #> 1     Joshua Lymburn Augustine Gonzales   9   m         2023-01-01 #> 2     Joshua Lymburn     Cecilia Cortez  81   f         2022-12-27 #> 3     Joshua Lymburn     Takeya Searles  35   f         2022-12-31 #> 4 Augustine Gonzales    Thorsen Stewart  75   m         2022-12-31 #> 5 Augustine Gonzales         Luke Flood   4   m         2023-01-02 #> 6 Augustine Gonzales          Suki Lang  15   f         2022-12-29 #>   date_last_contact was_case         status #> 1        2023-01-05        Y           case #> 2        2023-01-03        N under_followup #> 3        2023-01-05        Y           case #> 4        2023-01-06        N under_followup #> 5        2023-01-05        Y           case #> 6        2023-01-03        N under_followup"},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"report bug please open issue.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"Contributions simulist welcomed. Please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"Please note simulist project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"","code":"citation(\"simulist\") #> To cite package 'simulist' in publications use: #>  #>   Lambert J, Tamayo C (2025). _simulist: Simulate Disease Outbreak Line #>   List and Contacts Data_. doi:10.5281/zenodo.10471458 #>   <https://doi.org/10.5281/zenodo.10471458>, #>   <https://epiverse-trace.github.io/simulist/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {simulist: Simulate Disease Outbreak Line List and Contacts Data}, #>     author = {Joshua W. Lambert and Carmen Tamayo}, #>     year = {2025}, #>     doi = {10.5281/zenodo.10471458}, #>     url = {https://epiverse-trace.github.io/simulist/}, #>   }"},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"complimentary-r-packages","dir":"","previous_headings":"","what":"Complimentary R packages","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"📦 ↔︎️ 📦 {epiparameter} 📦 ↔︎️ 📦 {epicontacts} 📦 ↔︎️ 📦 {incidence2} 📦 ↔︎️ 📦 {cleanepi}","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Simulate Disease Outbreak Line List and Contacts Data","text":"project overlap R packages. list packages provide table features attributes present package help decide package appropriate use-case. cases packages dedicated simulating line list epidemiological data (e.g. {simulist}), others line list simulation one part wider R package (e.g. {EpiNow}). {LLsim} simulates line list data using stochastic SIR model fixed population observation reporting delays. Line list data generated two steps, 1) SIR model simulates outbreak (simpleSim()), 2) outbreak data converted line list (createLineList()). {simulacr} uses branching process model simulate cases contacts outbreak. simulates transmission infections using epidemiological R packages (epicontacts distcrete) parameterise plot simulated data. {epidict} package can used simulate outbreak data, including line lists, DHIS2 format, survey data mimics format Kobo, using function gen_data(). addition, MSF outbreak data available package data dictionaries Acute Jaundice Syndrome, Cholera, Measles Meningitis, accessible function msf_dict(). {EpiNow} - now deprecated R package - includes simulate_cases() generate_pseudo_linelist() functions generating line list data. generative-nowcasting set R scripts functions perform epidemiological nowcasting. functions simulate line list data within repository, repository (contain) R package. Functions can sourced. Cases simulated renewal process simulation can incorporate epidemiological delays ascertainment. another package functionality missing list added, package included list updated table reflect please contribute making issue pull request. R packages simulating epidemic dynamics can found Epidemic simulation models section Epidemiology CRAN task view. packages related {simulist} simulate line list data. include: {outbreaks} R package containing library outbreak data sets, including line list data, variety past simulated outbreaks, e.g. Ebola MERS. {ringbp} R package simulate cases using individual-level transmission model contact tracing. {epichains} R package functionality simulate transmission chains using branching process model. {outbreaks} package useful data past outbreak data generic line list data required. {ringbp} {epichains} packages can used generate case data time can converted line list manual post-processing. Another package creating messy data {messy} package. can used, either independently combination messy_linelist(), create messy line list contacts data.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/as_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert <epiparameter> or NULL to function — as_function","title":"Convert <epiparameter> or NULL to function — as_function","text":"extension .function(), particularly epiparameter .function S3 method, added feature NULLs converted functions generate vector NAs behave equivalently generator functions output .function(..., func_type = \"generate\"). function already passed as_function returned unchanged. also input checking error input <epiparameter>, function (closure), onset--event distributions NULL.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/as_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert <epiparameter> or NULL to function — as_function","text":"","code":"as_function(x)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/as_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert <epiparameter> or NULL to function — as_function","text":"x named list containing either <epiparameter>, function NULL. Named list elements : \"contact_distribution\", \"infectious_period\", \"onset_to_hosp\", \"onset_to_death\", \"onset_to_recovery\".","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/as_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert <epiparameter> or NULL to function — as_function","text":"list functions.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/coerce-df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce and store <data.frame> subclass to <data.frame> and restore <data.frame> subclass to <data.frame> from attribute. — coerce-df","title":"Coerce and store <data.frame> subclass to <data.frame> and restore <data.frame> subclass to <data.frame> from attribute. — coerce-df","text":"Coerce store <data.frame> subclass <data.frame> restore <data.frame> subclass <data.frame> attribute.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/coerce-df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce and store <data.frame> subclass to <data.frame> and restore <data.frame> subclass to <data.frame> from attribute. — coerce-df","text":"","code":".as_df(x)  .restore_df_subclass(x)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/coerce-df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce and store <data.frame> subclass to <data.frame> and restore <data.frame> subclass to <data.frame> from attribute. — coerce-df","text":"x R object.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/coerce-df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce and store <data.frame> subclass to <data.frame> and restore <data.frame> subclass to <data.frame> from attribute. — coerce-df","text":"<data.frame> subclass <data.frame>.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of configuration settings for some details of sim_linelist() — create_config","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"Create list configuration settings details sim_linelist()","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"","code":"create_config(...)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"... <dynamic-dots> Named elements replace default settings. names match exactly elements replaced, otherwise function errors. Accepted arguments defaults : last_contact_distribution function generate time last contact. Default parameterisation Poisson distribution \\(\\lambda\\) 3. first_contact_distribution function generate time first contact. Default parameterisation Poisson distribution \\(\\lambda\\) 3. ct_distribution function generate Ct values confirmed case. Default parameterisation Normal distribution mean (\\(\\mu\\)) 25 standard deviation (\\(\\sigma\\)) 2. network character string, either \"adjusted\" (default) \"unadjusted\". time_varying_death_risk default NULL, can also accept function two arguments, risk time, apply time varying death risk hospitalised non-hospitalised cases outbreak simulation. See vignette(\"time-varying-cfr\", package = \"simulist\").","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"list settings sim_linelist()","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"config argument sim_linelist() controls small details around time windows around infections (time first contact last contact infector), distribution Cycle threshold (Ct) value Real-time PCR quantitative PCR (qPCR) confirmed cases, network effect simulation, time-varying death risk. parameters warrant arguments sim_linelist() rarely need changed default setting. Therefore worth increasing number sim_linelist() arguments accommodate config argument keeps function signature simpler readable. last_contact_distribution first_contact_distribution can accept function generates positive integers (e.g. discrete probability distribution, rpois() rgeom()). ct_distribution can accept function generates real numbers (e.g. continuous discrete probability distribution, rnorm(), rlnorm()). network option controls whether sample contacts adjusted unadjusted contact distribution. Adjusted (default) sampling uses \\(q(n) \\sim (n + 1)p(n + 1)\\) \\(p(n)\\) probability density function distribution, e.g., Poisson Negative binomial. Unadjusted (network = \"unadjusted\") instead samples contacts directly probability distribution \\(p(n)\\).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/create_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"","code":"# example with default configuration create_config() #> $last_contact_distribution #> function (x)  #> stats::rpois(n = x, lambda = 3) #> <bytecode: 0x562fb5544068> #> <environment: 0x562fb55438c0> #>  #> $first_contact_distribution #> function (x)  #> stats::rpois(n = x, lambda = 3) #> <bytecode: 0x562fb5544068> #> <environment: 0x562fb55438c0> #>  #> $ct_distribution #> function (x)  #> stats::rnorm(n = x, mean = 25, sd = 2) #> <bytecode: 0x562fb5543e00> #> <environment: 0x562fb55438c0> #>  #> $network #> [1] \"adjusted\" #>  #> $time_varying_death_risk #> NULL #>   # example with customised Ct distribution create_config(   ct_distribution = function(x) rlnorm(n = x, meanlog = 2, sdlog = 1) ) #> $last_contact_distribution #> function (x)  #> stats::rpois(n = x, lambda = 3) #> <bytecode: 0x562fb5544068> #> <environment: 0x562fb440bce8> #>  #> $first_contact_distribution #> function (x)  #> stats::rpois(n = x, lambda = 3) #> <bytecode: 0x562fb5544068> #> <environment: 0x562fb440bce8> #>  #> $ct_distribution #> function (x)  #> rlnorm(n = x, meanlog = 2, sdlog = 1) #> <environment: 0x562fb4885e90> #>  #> $network #> [1] \"adjusted\" #>  #> $time_varying_death_risk #> NULL #>"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Add line list event dates and case information as columns to infectious history <data.frame> — .add_cols","title":"Add line list event dates and case information as columns to infectious history <data.frame> — .add_cols","text":".add_*() functions add columns <data.frame> output .sim_network_bp(). <data.frame> supplied .data different number columns depending function called (.e. <data.frame> supplied .add_hospitalisation() columns <data.frame> supplied .add_date_contact() former function called later simulation). event date first contact, last contact .","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add line list event dates and case information as columns to infectious history <data.frame> — .add_cols","text":"","code":".add_date_contact(   .data,   first_contact_distribution,   last_contact_distribution,   outbreak_start_date )  .add_hospitalisation(.data, onset_to_hosp, hosp_risk)  .add_outcome(   .data,   onset_to_death,   onset_to_recovery,   hosp_death_risk,   non_hosp_death_risk,   config )  .add_names(.data, anonymise = FALSE)  .add_ct(.data, distribution)  .add_reporting_delay(.data, reporting_delay)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add line list event dates and case information as columns to infectious history <data.frame> — .add_cols","text":".data <data.frame> containing infectious history branching process simulation (.sim_network_bp()). first_contact_distribution, last_contact_distribution function generate time first last contact infector infectee (exposure window). See create_config(). outbreak_start_date date start outbreak. onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. onset_to_recovery function <epiparameter> object onset--recovery delay distribution. onset_to_recovery can also NULL simulate dates individuals recovered. function can defined anonymous. function must return vector numerics length onset--recovery delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default NULL default cases recover get NA $date_outcome line list column. hospitalised cases, function ensures onset--recovery time greater onset--hospitalisation time. many (1000) attempts, onset--recovery time (onset_to_recovery) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--recovery times line list may resemble distributional form input function. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. config list settings adjust randomly sampled delays Ct values. See create_config() information. anonymise logical boolean whether case names anonymised. Default FALSE. reporting_delay function reporting delay distribution NULL. (random) number generating function creates delays time symptom onset ($date_onset) case reported ($date_reporting). function can defined anonymous. function must return vector numerics length reporting delay. function must single argument. default NULL default reporting delay, $date_reporting line list column identical $date_onset column.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add line list event dates and case information as columns to infectious history <data.frame> — .add_cols","text":"<data.frame> one column input .data. Unless column heading already present data overwritten.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Introduce user-specified proportion of custom missing values into a <data.frame> — .add_missing","title":"Introduce user-specified proportion of custom missing values into a <data.frame> — .add_missing","text":"Introduce user-specified proportion custom missing values <data.frame>","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Introduce user-specified proportion of custom missing values into a <data.frame> — .add_missing","text":"","code":".add_missing(linelist, .args)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Introduce user-specified proportion of custom missing values into a <data.frame> — .add_missing","text":"linelist Line list <data.frame> output sim_linelist(). .args list setting messy_linelist().","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-add_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Introduce user-specified proportion of custom missing values into a <data.frame> — .add_missing","text":"line list <data.frame>","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-anonymise.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymise names — .anonymise","title":"Anonymise names — .anonymise","text":"simple algorithm replace names alphanumeric string fixed number characters (.e. nchar()) specified string_len.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-anonymise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymise names — .anonymise","text":"","code":".anonymise(x, string_len = 10)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-anonymise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymise names — .anonymise","text":"x vector character strings. string_len single numeric specifying number alphanumeric characters use anonymising character string. Default 10.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-anonymise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anonymise names — .anonymise","text":"vector character strings equal length input.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if <data.frame> defining either age-stratified hospitalisation or death risk, or defining age structure of population is correct — .check_df","title":"Check if <data.frame> defining either age-stratified hospitalisation or death risk, or defining age structure of population is correct — .check_df","text":"Check <data.frame> defining either age-stratified hospitalisation death risk, defining age structure population correct","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if <data.frame> defining either age-stratified hospitalisation or death risk, or defining age structure of population is correct — .check_df","text":"","code":".check_df(x, df_type = c(\"risk\", \"age\"), age_range = NULL)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if <data.frame> defining either age-stratified hospitalisation or death risk, or defining age structure of population is correct — .check_df","text":"x <data.frame>. df_type character string, either \"risk\" \"age\" specify input <data.frame> checked. age_range numeric vector length 2. required df_type = risk, NULL default.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if <data.frame> defining either age-stratified hospitalisation or death risk, or defining age structure of population is correct — .check_df","text":"<data.frame>, also called error side-effects input invalid.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if R object is line list from sim_linelist() — .check_linelist","title":"Check if R object is line list from sim_linelist() — .check_linelist","text":"Check R object line list sim_linelist()","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if R object is line list from sim_linelist() — .check_linelist","text":"","code":".check_linelist(linelist)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if R object is line list from sim_linelist() — .check_linelist","text":"linelist Line list <data.frame> output sim_linelist().","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if R object is line list from sim_linelist() — .check_linelist","text":"Invisibly return linelist <data.frame>. function called side-effects, error input invalid.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if R object is line list from sim_linelist() — .check_linelist","text":"check object supplied linelist sim_linelist() sim_outbreak() functions, related class object, words, check object class <linelist>.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_sim_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if arguments input to simulation function are valid — .check_sim_input","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Check arguments input simulation function valid","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_sim_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"","code":".check_sim_input(   sim_type = c(\"linelist\", \"contacts\", \"outbreak\"),   contact_distribution,   infectious_period,   prob_infection,   outbreak_start_date,   outbreak_size,   onset_to_hosp = NULL,   onset_to_death = NULL,   onset_to_recovery = NULL,   anonymise = NULL,   case_type_probs = NULL,   contact_tracing_status_probs = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL,   population_age = NULL )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_sim_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"sim_type character string specifying simulation function function called within. contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. outbreak_start_date date start outbreak. outbreak_size numeric vector length 2 defining minimum maximum number infected individuals simulated outbreak. Default c(10, 1e4), minimum outbreak size 10 infected individuals, maximum outbreak size 10,000 infected individuals. Either number can changed increase decrease maximum minimum outbreak size allow simulating larger smaller outbreaks. minimum outbreak size reached running simulation many iterations (internally) function errors, whereas maximum outbreak size exceeded function returns data early warning stating many cases contacts returned. onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. onset_to_recovery function <epiparameter> object onset--recovery delay distribution. onset_to_recovery can also NULL simulate dates individuals recovered. function can defined anonymous. function must return vector numerics length onset--recovery delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default NULL default cases recover get NA $date_outcome line list column. hospitalised cases, function ensures onset--recovery time greater onset--hospitalisation time. many (1000) attempts, onset--recovery time (onset_to_recovery) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--recovery times line list may resemble distributional form input function. anonymise logical boolean whether case names anonymised. Default FALSE. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_sim_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Invisibly return sim_type character string. function called side-effects, error input invalid.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-check_sim_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Arguments used simulation functions required given default value, arguments inputs simulation functions default NULL used. Defaults mentioned argument documentation default exported simulation function default checking function. function either default NULL.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-cross_check_sim_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross check the onset-to-hospitalisation or -death arguments are compatible with hospitalisation and death risks — .cross_check_sim_input","title":"Cross check the onset-to-hospitalisation or -death arguments are compatible with hospitalisation and death risks — .cross_check_sim_input","text":"two types cross-checking: onset--event distribution specified corresponding risk specified (.e. NULL) function error (stop()). onset--event distribution specified (.e. NULL) corresponding risk specified function throw warning (warning()). difference condition handling case onset--event NULL simulation can safely ignore corresponding risk, throwing warning, events. words, onset--hospitalisation specified, infected individuals go hospital date_admission column line list NAs. However, onset--event specified corresponding risk NULL proportion individuals infected hospitalised die calculated therefore simulation run. latter case cross-checking throws error.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-cross_check_sim_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross check the onset-to-hospitalisation or -death arguments are compatible with hospitalisation and death risks — .cross_check_sim_input","text":"","code":".cross_check_sim_input(   onset_to_hosp,   onset_to_death,   hosp_risk,   hosp_death_risk,   non_hosp_death_risk )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-cross_check_sim_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross check the onset-to-hospitalisation or -death arguments are compatible with hospitalisation and death risks — .cross_check_sim_input","text":"onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-cross_check_sim_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross check the onset-to-hospitalisation or -death arguments are compatible with hospitalisation and death risks — .cross_check_sim_input","text":"Invisibly return onset_to_hosp argument. function called side-effects, error warn input invalid.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample names using randomNames::randomNames() — .sample_names","title":"Sample names using randomNames::randomNames() — .sample_names","text":"Sample names specified sexes sampling replacement avoid exhausting number name sample..replacement = FALSE. duplicated names sampling need removed ensure individual unique name. order enough unique names, names required sampled randomNames::randomNames(), level oversampling determined buffer_factor argument. buffer_factor high names sampled takes longer, buffer_factor low enough unique names sampled .sample_names() function need loop enough unique names.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample names using randomNames::randomNames() — .sample_names","text":"","code":".sample_names(.data, buffer_factor = 1.5)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample names using randomNames::randomNames() — .sample_names","text":".data <data.frame> containing infectious history branching process simulation (.sim_network_bp()). buffer_factor single numeric determining level oversampling (buffer) creating vector unique names randomNames::randomNames().","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample names using randomNames::randomNames() — .sample_names","text":"character vector.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_outcome_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample the onset-to-outcome time conditional that the outcome is after a hospitalisation event — .sample_outcome_time","title":"Sample the onset-to-outcome time conditional that the outcome is after a hospitalisation event — .sample_outcome_time","text":"outcome case, either died recovered, can time event, must hospitalisation time, case admitted hospital. function samples either onset--death onset--recovery time conditional greater onset--hospitalisation time given case, case admitted hospital. resampling onset--outcome (death recovery) times less onset--hospitalisation time (.add_hospitalisation()).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_outcome_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample the onset-to-outcome time conditional that the outcome is after a hospitalisation event — .sample_outcome_time","text":"","code":".sample_outcome_time(.data, onset_to_outcome, idx)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_outcome_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample the onset-to-outcome time conditional that the outcome is after a hospitalisation event — .sample_outcome_time","text":".data <data.frame> containing infectious history branching process simulation (.sim_network_bp()). onset_to_outcome function either onset--death onset--recovery delay distribution. onset_to_outcome can also set NULL simulate dates individuals died recovered. See sim_linelist() documentation information. idx Either infected_lgl_idx died_lgl_idx .add_outcomes() define sample recovery death times , respectively.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sample_outcome_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample the onset-to-outcome time conditional that the outcome is after a hospitalisation event — .sample_outcome_time","text":"<data.frame> potentially modified $outcome_time column.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal simulation function called by the exported simulation functions within simulist — .sim_internal","title":"Internal simulation function called by the exported simulation functions within simulist — .sim_internal","text":"internal function simulates line list, sim_type \"contacts\" \"outbreak\" contacts table well.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal simulation function called by the exported simulation functions within simulist — .sim_internal","text":"","code":".sim_internal(   sim_type = c(\"linelist\", \"contacts\", \"outbreak\"),   contact_distribution,   infectious_period,   prob_infection,   onset_to_hosp = NULL,   onset_to_death = NULL,   onset_to_recovery = NULL,   reporting_delay = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL,   outbreak_start_date,   anonymise = NULL,   outbreak_size,   population_age,   case_type_probs = NULL,   contact_tracing_status_probs = NULL,   config )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal simulation function called by the exported simulation functions within simulist — .sim_internal","text":"sim_type character string specifying simulation function function called within. contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. onset_to_recovery function <epiparameter> object onset--recovery delay distribution. onset_to_recovery can also NULL simulate dates individuals recovered. function can defined anonymous. function must return vector numerics length onset--recovery delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default NULL default cases recover get NA $date_outcome line list column. hospitalised cases, function ensures onset--recovery time greater onset--hospitalisation time. many (1000) attempts, onset--recovery time (onset_to_recovery) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--recovery times line list may resemble distributional form input function. reporting_delay function reporting delay distribution NULL. (random) number generating function creates delays time symptom onset ($date_onset) case reported ($date_reporting). function can defined anonymous. function must return vector numerics length reporting delay. function must single argument. default NULL default reporting delay, $date_reporting line list column identical $date_onset column. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. outbreak_start_date date start outbreak. anonymise logical boolean whether case names anonymised. Default FALSE. outbreak_size numeric vector length 2 defining minimum maximum number infected individuals simulated outbreak. Default c(10, 1e4), minimum outbreak size 10 infected individuals, maximum outbreak size 10,000 infected individuals. Either number can changed increase decrease maximum minimum outbreak size allow simulating larger smaller outbreaks. minimum outbreak size reached running simulation many iterations (internally) function errors, whereas maximum outbreak size exceeded function returns data early warning stating many cases contacts returned. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values. See create_config() information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal simulation function called by the exported simulation functions within simulist — .sim_internal","text":"<data.frame> sim_type \"linelist\" \"contacts\", list two <data.frame>s sim_type \"outbreak\".","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_network_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","title":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","text":"Simulate branching process infinite network contact distribution provides function sample number contacts individual simulation. contact infected probability infection. time contact assumed evenly distributed across infectious period infected individual, independent whether contact becomes infected.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_network_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","text":"","code":".sim_network_bp(   contact_distribution,   infectious_period,   prob_infection,   max_outbreak_size,   config )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_network_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","text":"contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. config list settings adjust randomly sampled delays Ct values. See create_config() information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_network_bp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","text":"<data.frame> contact transmission chain data.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/dot-sim_network_bp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a random network branching process model with a probability of infection for each contact — .sim_network_bp","text":"contact distribution sampled takes network effect \\(q(n) \\sim (n + 1)p(n + 1)\\) \\(p(n)\\) probability density function distribution, e.g., Poisson Negative binomial. say, probability choosing contact random following contact chooses individuals probability proportional number contacts. plus one one contacts \"used\" infect person.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create messy line list data — messy_linelist","title":"Create messy line list data — messy_linelist","text":"Take line list output sim_linelist() replace elements <data.frame> missing values (e.g. NA), introduce spelling mistakes inconsistencies, well coerce date types.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create messy line list data — messy_linelist","text":"","code":"messy_linelist(linelist, ...)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create messy line list data — messy_linelist","text":"linelist Line list <data.frame> output sim_linelist(). ... <dynamic-dots> Named elements replace default settings. names match exactly elements replaced, otherwise function errors. Accepted arguments defaults : prop_missing numeric 0 1 proportion missing values introduced. Default 0.1 (10%). missing_value single atomic R object used represent missing values. Default NA. prop_spelling_mistakes numeric 0 1 used specify proportion spelling mistakes character columns. Default 0.1 (10%). inconsistent_sex logical boolean specify whether $sex column uses \"m\" \"f\", inconsistently uses \"m\", \"f\", \"M\", \"F\", \"male\", \"female\", \"Male\" \"Female\". Default TRUE sexes sampled options. sex_as_numeric logical boolean used specify whether values $sex column encoded numeric values (0 1). Default FALSE. sex_as_numeric TRUE inconsistent_sex = TRUE. numeric_as_char logical boolean used specify whether numeric columns coerced character. Default TRUE. date_as_char logical boolean used specify whether Date columns coerced character. Default TRUE. inconsistent_dates logical boolean used specify whether values Date columns inconsistently formatted (e.g. \"%Y-%m-%d\", \"%Y/%m/%d\", \"%d-%m-%Y\", \"%d %B %Y\"). Default FALSE. prop_int_as_word numeric 0 1 proportion elements integer columns coerced words (see english::words()). Default 0.5 (50%). prop_duplicate_row numeric 0 1 proportion rows duplicate. Default 0.01 (1%). prop_duplicate_row > 0 guaranteed least one row duplicated. inconsistent_id logical boolean used specify whether $id column inconsistent formatting appending random prefixes suffixes random sample (~10%) IDs. Default FALSE, IDs numbers (numeric, characters words depending prop_int_as_word numeric_as_char).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create messy line list data — messy_linelist","text":"messy line list <data.frame>.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create messy line list data — messy_linelist","text":"default messy_linelist(): Introduces 10% values missing, .e. converts NA. Introduces spelling mistakes 10% character columns. Introduce inconsistency reporting $sex. Converts numeric columns (double & integer) character. Converts Date columns character. Converts 50% integers (English) words. Duplicates 1% rows. Setting missing_value something NA likely cause type coercion line list <data.frame> columns, likely character. setting sex_as_numeric TRUE, male set 0 female 1. one inconsistent_sex sex_as_numeric can TRUE, otherwise function error. numeric_as_char = TRUE sex_as_numeric = TRUE sex encoded 0 1 converted character. prop_spelling_mistake > 0 numeric_as_char = TRUE columns converted numeric character spelling mistakes introduced, numeric characters stored character strings. prop_spelling_mistake > 0 date_as_char = TRUE spelling mistakes introduced dates. Date columns can converted inconsistent format setting inconsistent_dates = TRUE requires date_as_char = TRUE, latter FALSE function error. numeric_as_char = FALSE prop_int_as_word > 0 integer columns converted character string (either character numbers words) numeric columns coerced. Spelling mistakes introduced integers converted words prop_spelling_mistakes > 0 prop_int_as_word > 0. Rows duplicated messy modifications duplicated row contains identical messy elements.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/messy_linelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create messy line list data — messy_linelist","text":"","code":"linelist <- sim_linelist() messy_linelist <- messy_linelist(linelist)  # increasing proportion of missingness to 30% with a missing value of -99 messy_linelist <- messy_linelist(   linelist,   prop_missing = 0.3,   missing_value = -99 )  # increasing proportion of spelling mistakes to 50% messy_linelist <- messy_linelist(linelist, prop_spelling_mistakes = 0.5)  # encode `$sex` as `numeric` messy_linelist <- messy_linelist(   linelist,   sex_as_numeric = TRUE,   inconsistent_sex = FALSE )  # inconsistently formatted dates messy_linelist <- messy_linelist(linelist, inconsistent_dates = TRUE)"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate contacts for an infectious disease outbreak — sim_contacts","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Simulate contacts infectious disease outbreak","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"sim_contacts(   contact_distribution = function(x) stats::dpois(x = x, lambda = 2),   infectious_period = function(x) stats::rlnorm(n = x, meanlog = 2, sdlog = 0.5),   prob_infection = 0.5,   outbreak_start_date = as.Date(\"2023-01-01\"),   anonymise = FALSE,   outbreak_size = c(10, 10000),   population_age = c(1, 90),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. outbreak_start_date date start outbreak. anonymise logical boolean whether case names anonymised. Default FALSE. outbreak_size numeric vector length 2 defining minimum maximum number infected individuals simulated outbreak. Default c(10, 1e4), minimum outbreak size 10 infected individuals, maximum outbreak size 10,000 infected individuals. Either number can changed increase decrease maximum minimum outbreak size allow simulating larger smaller outbreaks. minimum outbreak size reached running simulation many iterations (internally) function errors, whereas maximum outbreak size exceeded function returns data early warning stating many cases contacts returned. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values. See create_config() information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"contacts <data.frame>","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_contacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"# quickly simulate contact tracing data using the function defaults contacts <- sim_contacts() head(contacts) #>             from                   to age sex date_first_contact #> 1  Samuel Macias       Ira Birmingham  52   m         2022-12-30 #> 2 Ira Birmingham     Salvador Hinojos  47   m         2023-01-01 #> 3 Ira Birmingham      Justin Bradford  33   m         2023-01-02 #> 4 Ira Birmingham          Atsila Pico  49   f         2022-12-30 #> 5 Ira Birmingham Ramziyya el-Mansouri  33   f         2022-12-31 #> 6 Ira Birmingham             Tyler So  84   m         2023-01-01 #>   date_last_contact was_case         status #> 1        2023-01-01        Y           case #> 2        2023-01-06        Y           case #> 3        2023-01-10        Y           case #> 4        2023-01-07        N under_followup #> 5        2023-01-04        Y           case #> 6        2023-01-06        Y           case  # to simulate more realistic contact tracing data load epiparameters from # {epiparameter} library(epiparameter) contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  infectious_period <- epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 1, scale = 1)   ) ) #> Citation cannot be created as author, year, journal or title is missing  contacts <- sim_contacts(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5 )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list — sim_linelist","title":"Simulate a line list — sim_linelist","text":"line list simulated using branching process parameterised epidemiological parameters.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list — sim_linelist","text":"","code":"sim_linelist(   contact_distribution = function(x) stats::dpois(x = x, lambda = 2),   infectious_period = function(x) stats::rlnorm(n = x, meanlog = 2, sdlog = 0.5),   prob_infection = 0.5,   onset_to_hosp = function(x) stats::rlnorm(n = x, meanlog = 1.5, sdlog = 0.5),   onset_to_death = function(x) stats::rlnorm(n = x, meanlog = 2.5, sdlog = 0.5),   onset_to_recovery = NULL,   reporting_delay = NULL,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   anonymise = FALSE,   outbreak_size = c(10, 10000),   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   config = create_config() )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list — sim_linelist","text":"contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. onset_to_recovery function <epiparameter> object onset--recovery delay distribution. onset_to_recovery can also NULL simulate dates individuals recovered. function can defined anonymous. function must return vector numerics length onset--recovery delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default NULL default cases recover get NA $date_outcome line list column. hospitalised cases, function ensures onset--recovery time greater onset--hospitalisation time. many (1000) attempts, onset--recovery time (onset_to_recovery) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--recovery times line list may resemble distributional form input function. reporting_delay function reporting delay distribution NULL. (random) number generating function creates delays time symptom onset ($date_onset) case reported ($date_reporting). function can defined anonymous. function must return vector numerics length reporting delay. function must single argument. default NULL default reporting delay, $date_reporting line list column identical $date_onset column. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. outbreak_start_date date start outbreak. anonymise logical boolean whether case names anonymised. Default FALSE. outbreak_size numeric vector length 2 defining minimum maximum number infected individuals simulated outbreak. Default c(10, 1e4), minimum outbreak size 10 infected individuals, maximum outbreak size 10,000 infected individuals. Either number can changed increase decrease maximum minimum outbreak size allow simulating larger smaller outbreaks. minimum outbreak size reached running simulation many iterations (internally) function errors, whereas maximum outbreak size exceeded function returns data early warning stating many cases contacts returned. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. config list settings adjust randomly sampled delays Ct values. See create_config() information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list — sim_linelist","text":"line list <data.frame>","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list — sim_linelist","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age-structured population, <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive), except last element upper bound (maximum) population. proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list — sim_linelist","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_linelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list — sim_linelist","text":"","code":"# quickly simulate a line list using the function defaults linelist <- sim_linelist() head(linelist) #>   id         case_name case_type sex age date_onset date_reporting #> 1  1   Tanishia Marfil suspected   f   1 2023-01-01     2023-01-01 #> 2  2    Crystal Barrow suspected   f  22 2023-01-07     2023-01-07 #> 3  3     Craig Mallory suspected   m  85 2023-01-08     2023-01-08 #> 4  4   Crystal Burnett  probable   f  63 2023-01-04     2023-01-04 #> 5  5 Jonathan Gallegos  probable   m  87 2023-01-05     2023-01-05 #> 6  6     Bryan Shareef confirmed   m  38 2023-01-07     2023-01-07 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1     2023-01-06 recovered         <NA>               <NA>              <NA> #> 2     2023-01-11 recovered         <NA>         2022-12-31        2023-01-03 #> 3           <NA> recovered         <NA>         2023-01-01        2023-01-02 #> 4           <NA> recovered         <NA>         2022-12-30        2023-01-05 #> 5           <NA> recovered         <NA>         2022-12-27        2023-01-06 #> 6           <NA> recovered         <NA>         2022-12-30        2023-01-03 #>   ct_value #> 1       NA #> 2       NA #> 3       NA #> 4       NA #> 5       NA #> 6     26.6  # to simulate a more realistic line list load epiparameters from # {epiparameter} library(epiparameter) contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  infectious_period <- epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 1, scale = 1)   ) ) #> Citation cannot be created as author, year, journal or title is missing  onset_to_hosp <- epiparameter(   disease = \"COVID-19\",   epi_name = \"onset to hospitalisation\",   prob_distribution = create_prob_distribution(     prob_distribution = \"lnorm\",     prob_distribution_params = c(meanlog = 1, sdlog = 0.5)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to death from {epiparameter} database onset_to_death <- epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to death\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function # example with single hospitalisation risk for entire population linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.5 ) head(linelist) #>   id             case_name case_type sex age date_onset date_reporting #> 1  1      Alexander Hudson  probable   m  18 2023-01-01     2023-01-01 #> 2  2          Sean Vasquez confirmed   m  31 2023-01-01     2023-01-01 #> 3  3 Naasiruddeen el-Saidi suspected   m  24 2023-01-01     2023-01-01 #> 4  4         Dvaris Aleman  probable   m  43 2023-01-01     2023-01-01 #> 5  5       Hiwaaya el-Shah confirmed   f  42 2023-01-01     2023-01-01 #> 6  6              Ryan Liu suspected   m  26 2023-01-01     2023-01-01 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-28        2023-01-03 #> 3           <NA> recovered         <NA>         2022-12-31        2023-01-02 #> 4     2023-01-02      died   2023-01-12         2022-12-28        2023-01-03 #> 5     2023-01-03 recovered         <NA>         2022-12-30        2023-01-01 #> 6           <NA> recovered         <NA>         2022-12-31        2023-01-05 #>   ct_value #> 1       NA #> 2     26.6 #> 3       NA #> 4       NA #> 5     26.9 #> 6       NA  # example with age-stratified hospitalisation risk # 20% for over 80s # 10% for under 5s # 5% for the rest age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) linelist <- sim_linelist(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) head(linelist) #>   id                case_name case_type sex age date_onset date_reporting #> 1  1         Tamara Castellon confirmed   f  76 2023-01-01     2023-01-01 #> 2  2             Nawfa el-Dia  probable   f  82 2023-01-01     2023-01-01 #> 3  4          Haarith el-Ozer  probable   m  19 2023-01-01     2023-01-01 #> 4  5 Jennifer Martinez Martin  probable   f  59 2023-01-01     2023-01-01 #> 5  7            Cecilia Mares suspected   f  61 2023-01-01     2023-01-01 #> 6  8     Kelly Amarbayasgalan  probable   f  68 2023-01-03     2023-01-03 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-28        2023-01-02 #> 3           <NA> recovered         <NA>         2023-01-01        2023-01-04 #> 4           <NA> recovered         <NA>         2022-12-28        2023-01-02 #> 5           <NA> recovered         <NA>         2022-12-29        2023-01-04 #> 6           <NA> recovered         <NA>         2022-12-25        2023-01-01 #>   ct_value #> 1     24.9 #> 2       NA #> 3       NA #> 4       NA #> 5       NA #> 6       NA"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list and a contacts table — sim_outbreak","title":"Simulate a line list and a contacts table — sim_outbreak","text":"line list contacts simulated using branching process parameterised epidemiological parameters.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"sim_outbreak(   contact_distribution = function(x) stats::dpois(x = x, lambda = 2),   infectious_period = function(x) stats::rlnorm(n = x, meanlog = 2, sdlog = 0.5),   prob_infection = 0.5,   onset_to_hosp = function(x) stats::rlnorm(n = x, meanlog = 1.5, sdlog = 0.5),   onset_to_death = function(x) stats::rlnorm(n = x, meanlog = 2.5, sdlog = 0.5),   onset_to_recovery = NULL,   reporting_delay = NULL,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   anonymise = FALSE,   outbreak_size = c(10, 10000),   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list and a contacts table — sim_outbreak","text":"contact_distribution function <epiparameter> object generate number contacts per infection. function can defined anonymous. function must single argument form integer vector elements representing number contacts, return numeric vector element corresponds probability observing number contacts vector passed function. index numeric vector returned offset one corresponding probability observing number contacts, .e. first element output vector probability observing zero contacts, second element probability observing one contact, etc. <epiparameter> can provided. converted probability mass function internally. default anonymous function Poisson probability mass function (dpois()) mean (\\(\\lambda\\)) 2 contacts per infection. infectious_period function <epiparameter> object infectious period. defines duration becoming infectious longer infectious. simulation, individuals assumed become infectious immediately infected (latency period assumed zero). time intervals infected individual contacts assumed uniformly distributed within infectious period. Infectious periods must strictly positive. function can defined anonymous. function must return vector randomly generated real numbers representing sampled infectious periods. function must single argument, number random infectious periods generate. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2 sdlog = 0.5. prob_infection single numeric probability secondary contact infected infected primary contact. onset_to_hosp function <epiparameter> object onset--hospitalisation delay distribution. onset_to_hosp can also set NULL simulate hospitalisation (admission) dates. function can defined anonymous. function must return vector numerics length onset--hospitalisation delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 1.5 sdlog = 0.5. onset_to_hosp set NULL hosp_risk hosp_death_risk automatically set NULL manually specified. onset_to_death function <epiparameter> object onset--death delay distribution. onset_to_death can also set NULL simulate dates individuals died. function can defined anonymous. function must return vector numerics length onset--death delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default anonymous function lognormal distribution random number generator (rlnorm()) meanlog = 2.5 sdlog = 0.5. onset_to_death set NULL non_hosp_death_risk hosp_death_risk automatically set NULL manually specified. hospitalised cases, function ensures onset--death time greater onset--hospitalisation time. many (1000) attempts, onset--death time (onset_to_death) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--death times line list may resemble distributional form input function. onset_to_recovery function <epiparameter> object onset--recovery delay distribution. onset_to_recovery can also NULL simulate dates individuals recovered. function can defined anonymous. function must return vector numerics length onset--recovery delay. function must single argument. <epiparameter> can provided. converted random number generator internally. default NULL default cases recover get NA $date_outcome line list column. hospitalised cases, function ensures onset--recovery time greater onset--hospitalisation time. many (1000) attempts, onset--recovery time (onset_to_recovery) sampled greater onset--hospitalisation time (onset_to_hosp) function error. Due conditional sampling, onset--recovery times line list may resemble distributional form input function. reporting_delay function reporting delay distribution NULL. (random) number generating function creates delays time symptom onset ($date_onset) case reported ($date_reporting). function can defined anonymous. function must return vector numerics length reporting delay. function must single argument. default NULL default reporting delay, $date_reporting line list column identical $date_onset column. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks. Default 20% hospitalisation (0.2) entire population. onset_to_hosp argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. onset_to_death argument set NULL argument automatically set NULL specified can manually set NULL. See details examples information. non_hosp_death_risk can vary time specified time_varying_death_risk element config, see vignette(\"time-varying-cfr\", package = \"simulist\") information. outbreak_start_date date start outbreak. anonymise logical boolean whether case names anonymised. Default FALSE. outbreak_size numeric vector length 2 defining minimum maximum number infected individuals simulated outbreak. Default c(10, 1e4), minimum outbreak size 10 infected individuals, maximum outbreak size 10,000 infected individuals. Either number can changed increase decrease maximum minimum outbreak size allow simulating larger smaller outbreaks. minimum outbreak size reached running simulation many iterations (internally) function errors, whereas maximum outbreak size exceeded function returns data early warning stating many cases contacts returned. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values. See create_config() information.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list and a contacts table — sim_outbreak","text":"list two elements: line list <data.frame> contacts <data.frame>","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list and a contacts table — sim_outbreak","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age-structured population, <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive), except last element upper bound (maximum) population. proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list and a contacts table — sim_outbreak","text":"Joshua W. Lambert","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/sim_outbreak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"# quickly simulate an outbreak using the function defaults outbreak <- sim_outbreak() head(outbreak$linelist) #>   id        case_name case_type sex age date_onset date_reporting #> 1  1 Oscar Villarreal confirmed   m  23 2023-01-01     2023-01-01 #> 2  2       Jade Brown confirmed   f  90 2023-01-04     2023-01-04 #> 3  4         Ty Kumar  probable   m  50 2023-01-08     2023-01-08 #> 4  5   Desmond Morris confirmed   m  77 2023-01-11     2023-01-11 #> 5  6   Hamood el-Adel confirmed   m   8 2023-01-14     2023-01-14 #> 6 10   Cheyenne Mcwee suspected   f  86 2023-01-15     2023-01-15 #>   date_admission   outcome date_outcome date_first_contact date_last_contact #> 1           <NA> recovered         <NA>               <NA>              <NA> #> 2           <NA> recovered         <NA>         2022-12-31        2023-01-04 #> 3           <NA> recovered         <NA>         2023-01-02        2023-01-06 #> 4           <NA> recovered         <NA>         2023-01-01        2023-01-08 #> 5     2023-01-17      died   2023-01-18         2022-12-31        2023-01-08 #> 6     2023-01-17      died   2023-01-30         2023-01-07        2023-01-13 #>   ct_value #> 1     24.9 #> 2     25.6 #> 3       NA #> 4     28.1 #> 5     22.8 #> 6       NA head(outbreak$contacts) #>               from               to age sex date_first_contact #> 1 Oscar Villarreal       Jade Brown  90   f         2022-12-31 #> 2 Oscar Villarreal Marqus Patterson  58   m         2022-12-26 #> 3       Jade Brown         Ty Kumar  50   m         2023-01-02 #> 4       Jade Brown   Desmond Morris  77   m         2023-01-01 #> 5       Jade Brown   Hamood el-Adel   8   m         2022-12-31 #> 6       Jade Brown Jataya Alexander  25   f         2023-01-02 #>   date_last_contact was_case           status #> 1        2023-01-04        Y             case #> 2        2023-01-10        N   under_followup #> 3        2023-01-06        Y             case #> 4        2023-01-08        Y             case #> 5        2023-01-08        Y             case #> 6        2023-01-08        N lost_to_followup  # to simulate a more realistic outbreak load epiparameters from # {epiparameter} library(epiparameter) contact_distribution <- epiparameter(   disease = \"COVID-19\",   epi_name = \"contact distribution\",   prob_distribution = create_prob_distribution(     prob_distribution = \"pois\",     prob_distribution_params = c(mean = 2)   ) ) #> Citation cannot be created as author, year, journal or title is missing  infectious_period <- epiparameter(   disease = \"COVID-19\",   epi_name = \"infectious period\",   prob_distribution = create_prob_distribution(     prob_distribution = \"gamma\",     prob_distribution_params = c(shape = 1, scale = 1)   ) ) #> Citation cannot be created as author, year, journal or title is missing  onset_to_hosp <- epiparameter(   disease = \"COVID-19\",   epi_name = \"onset to hospitalisation\",   prob_distribution = create_prob_distribution(     prob_distribution = \"lnorm\",     prob_distribution_params = c(meanlog = 1, sdlog = 0.5)   ) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to death from {epiparameter} database onset_to_death <- epiparameter_db(   disease = \"COVID-19\",   epi_name = \"onset to death\",   single_epiparameter = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the citation use the 'get_citation' function  outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   infectious_period = infectious_period,   prob_infection = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/simulist-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simulist: Simulate Disease Outbreak Line List and Contacts Data — simulist-package","title":"simulist: Simulate Disease Outbreak Line List and Contacts Data — simulist-package","text":"Tools simulate realistic raw case data epidemic form line lists contacts using branching process. Simulated outbreaks parameterised epidemiological parameters can age-structured populations, age-stratified hospitalisation death risk time-varying case fatality risk.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/simulist-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simulist: Simulate Disease Outbreak Line List and Contacts Data — simulist-package","text":"Maintainer: Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [copyright holder] Authors: Carmen Tamayo carmen.tamayo-cuartero@lshtm.ac.uk (ORCID) contributors: Hugo Gruson hugo@data.org (ORCID) [contributor, reviewer] Pratik R. Gupte pratik.gupte@lshtm.ac.uk (ORCID) [contributor, reviewer] Adam Kucharski adam.kucharski@lshtm.ac.uk (ORCID) [reviewer] Chris Hartgerink chris@data.org (ORCID) [reviewer] Sebastian Funk sebastian.funk@lshtm.ac.uk (ORCID) [contributor] London School Hygiene Tropical Medicine, LSHTM (00a0jsq62) [copyright holder]","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust or subset a line list to account for right truncation — truncate_linelist","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"Adjust subset line list <data.frame> removing cases reported truncation time setting hospitalisation admission outcome dates truncation point NA. replicate real-time outbreak data recent cases outcomes yet observed reported (right truncation). implies assumption symptom onsets reported delay hospitalisations reported instantly.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"","code":"truncate_linelist(   linelist,   truncation_day = 14,   unit = c(\"days\", \"weeks\", \"months\", \"years\"),   direction = c(\"backwards\", \"forwards\") )"},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"linelist Line list <data.frame> output sim_linelist(). truncation_day single numeric specifying number days (default), weeks, months years end outbreak (default) since start outbreak (see direction argument) truncate line list . default 14 days end outbreak. Alternatively, truncation_day can accept <Date> used truncation_day unit direction ignored. unit character string, either \"days\" (default), \"weeks\", \"months\", \"years\", specifying units truncation_day argument. Years assumed 365.25 days months assumed 365.25 / 12 days (lubridate). direction character string, either \"backwards\" (default) \"forwards\". direction = backwards defines truncation_day time end outbreak. direction = forwards defines truncation_day time since start outbreak.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"line list <data.frame>.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"day line list truncated individuals line list, specified truncation_day unit arguments.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/reference/truncate_linelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust or subset a line list to account for right truncation — truncate_linelist","text":"","code":"set.seed(1) linelist <- sim_linelist() linelist_trunc <- truncate_linelist(linelist)  # set truncation point 3 weeks before the end of outbreak linelist_trunc <- truncate_linelist(   linelist,   truncation_day = 3,   unit = \"weeks\" )  # set truncation point to 2 months since the start of outbreak linelist_trunc <- truncate_linelist(   linelist,   truncation_day = 2,   unit = \"months\",   direction = \"forwards\" )  # set truncation point to 2023-03-01 linelist_trunc <- truncate_linelist(   linelist,   truncation_day = as.Date(\"2023-03-01\") )"},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"simulist-050","dir":"Changelog","previous_headings":"","what":"simulist 0.5.0","title":"simulist 0.5.0","text":"CRAN release: 2025-03-25 minor version release expands scope simulist include two new post-processing functions: truncate_linelist() messy_linelist(). functions modify line list <data.frame> sim_linelist() sim_outbreak(), line list now also includes $date_reporting column. release also focused making package interface consistent contains bugs fixes.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"external-0-5-0","dir":"Changelog","previous_headings":"New features","what":"External","title":"simulist 0.5.0","text":"messy_linelist() function added. takes simulated line list creates “messy” line list inconsistencies, irregularities missingness found empirical outbreak data (#187 & #196 & #199) reporting delay argument (reporting_delay) now included sim_linelist() sim_outbreak() simulate reporting delays date symptom onset ($date_onset) date reporting ($date_reporting) (#179). truncate_linelist() function added. takes simulated line list can create outbreak snapshots right-truncation real-time outbreak data (#179 & #193 & #201 & #211). new vignette, reporting_delays-truncation.Rmd, reporting delays right-truncation line list data added (#179 & #201). Alt text added vignette figures (#214).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"internal-0-5-0","dir":"Changelog","previous_headings":"New features","what":"Internal","title":"simulist 0.5.0","text":"{english} added package dependency messy_linelist() (#187). R CMD check CI now run R v4.1, minimum required R version package (#180). epiparameter longer used testing (#177). .check_linelist() added input checking post-processing functions (#179). .check_age_df() .check_risk_df() merged .check_df() thanks standardisation structure <data.frame> objects required sim_*() function arguments (#200).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.5.0","text":"create_config() updated accepted functions instead distribution name vector parameters. now matches design arguments accept function sim_*() functions (#202). structure age-structured population <data.frame> input sim_*() functions standardised age-stratified risk <data.frame>s using $age_limit column instead $age_range character column (#200). line list <data.frame> output sim_linelist() sim_outbreak() now contains $date_reporting column (#179). Outcome date ($date_outcome) now conditioned hospitalisation date ($date_admission) using new internal .sample_outcome_time() function. breaking change previously hospitalisation times outcome times, sim_linelist() can now error outcome time sampled hospitalisation time (#178). date first contact now sampled number days infection time (equal symptom onset model) rather days date last contact, lead infection time first contact (#206). minimum required R version simulist increased v4.1.0 v3.6.0 due package dependencies (#180). minimum required version incidence2 (suggested dependency) now v2.3.0 (#214).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"minor-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"simulist 0.5.0","text":"Explicitly state function output breaking changes policy design-principles.Rmd vignette (#208).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.5.0","text":"Date symptom onset can longer occur date first contact (#206). Outcome date can longer occur hospitalisation date (#178).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"deprecated-and-defunct-0-5-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.5.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"simulist-040","dir":"Changelog","previous_headings":"","what":"simulist 0.4.0","title":"simulist 0.4.0","text":"CRAN release: 2025-01-10 minor version release simulist containing various minor improvements functions documentation, well removing triggers warning users. also bug fixes internal enhancements.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"external-0-4-0","dir":"Changelog","previous_headings":"New features","what":"External","title":"simulist 0.4.0","text":"Defaults added sim_*() arguments previously one. Allowing functions run without specifying arguments (e.g. linelist <- sim_linelist()) (#149). Documentation sim_*() function arguments accept either function <epiparameter> object improved (#149). sim_*() functions longer warn user specified *_risk arguments set onset_to_* arguments NULL (#149). vignettes now use rmarkdown::html_vignette correctly render website maximum compatibility pkgdown >= 2.1.0. removes figure numbering code folding (#153).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"internal-0-4-0","dir":"Changelog","previous_headings":"New features","what":"Internal","title":"simulist 0.4.0","text":".add_hospitalisation() vectorised following .add_outcome() PR #101 (#150).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.4.0","text":"function arguments infect_period prob_infect renamed infectious_period prob_infection (#143). sim_*() functions now use NULL instead NA turn processes (e.g. onset_to_death = NULL deaths) (#148).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.4.0","text":"new function, .sample_infect_period() added errors infectious period function generates negative number (#142). sim_linelist() longer errors hosp_death_risk NULL onset_to_death parameterised delay distribution (#144). .add_ct() generates correct number values duplicate Ct values due vector recycling (#158). Update epiparameter usage (#159).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"deprecated-and-defunct-0-4-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.4.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"simulist-030","dir":"Changelog","previous_headings":"","what":"simulist 0.3.0","title":"simulist 0.3.0","text":"third release simulist R package contains range new features, enhancements, documentation unit tests. headline changes package : simulation now parameterised infectious period rather contact interval. Line list data now date_outcome outcome columns can parameterised onset_to_death onset_to_recovery. Case fatality risk can vary time customisable user-defined function. Two new vignettes time-varying case fatality risk, wrangling line list contact tracing data.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"external-0-3-0","dir":"Changelog","previous_headings":"New features","what":"External","title":"simulist 0.3.0","text":"onset_to_hosp onset_to_death arguments can now take NA input return column NAs line list columns date_admission date_outcome (#98). onset_to_recovery argument added simulation functions, sim_linelist() sim_outbreak(), recovery date can explicitly given line list data (#99). line list simulation can now use time-varying case fatality risk. create_config() function now returns $time_varying_death_risk list element, NULL default can take R function enable fatality risk cases change epidemic (#101). new vignette, time-varying-cfr.Rmd, added package describe use time-varying case fatality risk functionality describe different time-varying functions can used (#101). new vignette, wrangling-linelist.Rmd, added go common post-processing steps might required simulating line list contact tracing data. vignette short currently contains single post-processing example, examples added time (#104). README now section related projects provide overview packages simulate line list data, related simulist. section contains disclosure widget containing feature table providing high-level description features development status related package (#110). Key features section Complimentary R packages section added README (#134). Updated package architecture diagram design-principles.Rmd vignette (#113).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"internal-0-3-0","dir":"Changelog","previous_headings":"New features","what":"Internal","title":"simulist 0.3.0","text":".add_deaths() function replaced .add_outcome() function can simulate death recovery times (#99). .cross_check_sim_input() function added package ensure user input coherent across arguments (#98). .anonymise() function added convert individual’s names alphanumeric codes anonymise individuals line list contact tracing data (#106).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.3.0","text":"simulation functions now parameterised infectious period (infect_period argument) instead contact interval (contact_interval argument). moves away parameterising simulation time delay person becoming infected contact susceptible individual, instead uses infectious period distribution within contacts uniformly distributed time (#96). simulation functions can now set maximum well minimum outbreak size. min_outbreak_size argument exported sim_*() functions renamed outbreak_size takes numeric vector two elements, minimum maximum outbreak size. maximum outbreak size soft limit due stochastic nature branching process model, epidemiological data returned can contain cases /contacts maximum outbreak_size case warning returned explaining user many cases/contacts returned (#93). add_ct argument sim_linelist() sim_outbreak() removed. functionality now equivalent add_ct = TRUE previous simulist version. add_ct argument removed move package always returning <data.frame>s number columns, consistency predictability (#104). add_names argument simulation functions renamed anonymise. new argument controls whether names given case (anonymise = FALSE, default behaviour) whether fixed length hexadecimal codes given case (anonymise = TRUE), ensures returned <data.frame> number columns (#106).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.3.0","text":".sim_network_bp() now indexes time vector correctly. Previously vector indexing bug meant epidemic progress time (#95).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"deprecated-and-defunct-0-3-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.3.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"simulist-020","dir":"Changelog","previous_headings":"","what":"simulist 0.2.0","title":"simulist 0.2.0","text":"Second release simulist, updates core simulation model , result, arguments sim_*() functions simulating line list data /contact table data exported simulist updated. internal package architecture also refactored.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"external-0-2-0","dir":"Changelog","previous_headings":"New features","what":"External","title":"simulist 0.2.0","text":"create_config() now returns new element list: $network. default create_config() returns network = \"adjusted\", assumes simulation random network samples contacts excess degree distribution (see Details ?create_config()). network effect can changed \"unadjusted\" switch network effect. $network checked internally (.sim_network_bp()) error valid (#60). Package architecture diagram added design-principles.Rmd (#66). lintr GitHub action workflow (lint-changed-files.yaml) added suite continuous integration workflows (#68). Transmission chain visualisation added vis-linelist.Rmd (#70).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"internal-0-2-0","dir":"Changelog","previous_headings":"New features","what":"Internal","title":"simulist 0.2.0","text":".sim_network_bp() added internal function replaces bpmodels::chain_sim() core simulation model producing contacted infected individuals. {bpmodels} removed dependency result (#60). .sample_names() added internal function utilise randomNames::randomNames() produce unique names randomNames(..., sample..replacement = FALSE). Refactor internal simulation architecture replaced .sim_bp_linelist(), .sim_clinical_linelist() .sim_contacts_tbl() .sim_internal() (#66). sim_utils.R file renamed utils.R (#66) empty create_linelist.R file removed (#72). .add_date_contact() argument outbreak_start_date now NULL default instead missing (#82). Regression tests sim_*() functions now use snapshot testing detailed data checking (#65). Internal testing data (testdata) files updated, testdata/README.md instructions (#64).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.2.0","text":"R serial_interval arguments removed sim_linelist(), sim_contacts() sim_outbreak() functions instead contact_distribution, contact_interval prob_infect used parameterise simulation. Documentation, functions vignettes, updated changes (#60). contact_distribution argument sim_*() functions requires density function supplied anonymous function. Information added simulist.Rmd explain . line list output sim_linelist() now uses column header sex instead gender. contacts table output sim_contacts() sim_outbreak() now uses column headers age sex instead cnt_age cnt_gender (#60, #79). contact_distribution redefined redocumented distribution contacts per individual, rather number contacts get infected v0.1.0. row.names <data.frame>s output sim_linelist(), sim_contacts() sim_outbreak() now sequential 1:nrows (#63).","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.2.0","text":"sim_contacts() now correctly runs age-structured population. previous version (v0.1.0), sim_contacts() call .check_age_df() result function errored, fixed PR #81.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"deprecated-and-defunct-0-2-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.2.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"simulist-010","dir":"Changelog","previous_headings":"","what":"simulist 0.1.0","title":"simulist 0.1.0","text":"Initial release simulist, R package containing tools simulate epidemiological data line lists contact tables.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"simulist 0.1.0","text":"sim_linelist(): simulate line list data sim_contacts(): simulate contacts data sim_outbreak(): simulate line list contacts data Get Started vignette (simulist.Rmd) Age-stratified hospitalisation death risks vignette (age-strat-risks.Rmd) Age-structured population vignette (age-struct-pop.Rmd) Visualising simulated data (vis-linelist.Rmd) Design Principles simulist (design-principles.Rmd) Unit tests (100% code coverage) documentation files. Continuous integration workflows R package checks, rendering README.md, calculating test coverage, deploying pkgdown website, updating citation file, checking new package system dependencies.","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.1.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.1.0","text":"None","code":""},{"path":"https://epiverse-trace.github.io/simulist/dev/news/index.html","id":"deprecated-and-defunct-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.1.0","text":"None","code":""}]
