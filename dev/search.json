[{"path":"/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 simulist authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/dev/articles/age-strat-risks.html","id":"population-wide-risks","dir":"Articles","previous_headings":"","what":"Population-wide risks","title":"Age-stratified hospitalisation and death risks","text":"Simulate line list population-wide default risks: hospitalisation risk: 0.2 death risk hospitals 0.5 death risk outside hospitals 0.05 can run another simulation change hospitalisation death risks, inside outside hospital, still applied entire population. scenario probability hospitalised infected higher, mortality risk hospitalised non-hospitalised groups lower.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death )  # first 6 rows of linelist head(linelist) #>   id           case_name case_type gender age date_onset date_admission #> 1  1    Macella Moreland confirmed      f  28 2023-01-01           <NA> #> 2  2      Kayla Ellerman confirmed      f  62 2023-01-02     2023-01-02 #> 3  5 Matthew Biggerstaff confirmed      m  42 2023-01-01           <NA> #> 4  6   Vanessa Sihombing  probable      f  60 2023-01-01           <NA> #> 5  8     Ross Mcclintock suspected      m  28 2023-01-02     2023-01-03 #> 6  9     Danielle Medero confirmed      f  78 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     23.6 #> 2       <NA>         2023-01-02        2023-01-05     23.6 #> 3       <NA>         2023-01-03        2023-01-04     23.6 #> 4       <NA>         2023-01-02        2023-01-04       NA #> 5       <NA>         2023-01-01        2023-01-03       NA #> 6       <NA>         2022-12-29        2023-01-04     23.6 linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.4,   hosp_death_risk = 0.2,   non_hosp_death_risk = 0.01 )  head(linelist) #>   id           case_name case_type gender age date_onset date_admission #> 1  1     Numair al-Farag  probable      m  11 2023-01-01           <NA> #> 2  5   Dakota Sweetwater confirmed      m  20 2023-01-01     2023-01-01 #> 3  6    Bradley Mc Casky suspected      m  38 2023-01-01     2023-01-01 #> 4  7 Ediht Valero-Zarate suspected      f  71 2023-01-01     2023-01-01 #> 5  8       Kia Ouellette  probable      f  29 2023-01-01           <NA> #> 6 10      Dennison Lamas  probable      m   8 2023-01-01     2023-01-07 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-03        2023-01-04     25.7 #> 3       <NA>         2022-12-30        2023-01-01       NA #> 4       <NA>         2022-12-27        2023-01-03       NA #> 5       <NA>         2023-01-01        2023-01-07       NA #> 6       <NA>         2023-01-06        2023-01-07       NA"},{"path":"/dev/articles/age-strat-risks.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Age-stratified hospitalisation and death risks","text":"define age-stratified risks, must create table (<data.frame>) contains lower limits age groups respective risks. example hospitalisation risk : 0.2 (20%) aged 80 years older 0.1 (10%) younger 5 years 0.05 (5%) remaining age group oldest age group stops upper age range given population_age argument. default upper age range 90, example oldest age bracket 80-90 (inclusive). minimum age age group inclusive, maximum age age group exclusive, except oldest age group inclusive minimum maximum age. example first age group first element vector, minimum age 1, maximum age four (next age group starts five), hospitalisation risk group 0.1. age group forms row table. minimum age youngest age group must match age range specified population_age argument sim_linelist(), largest age limit risk <data.frame> must older upper age range. conditions met function error. age-stratified risk table match default (c(1, 90)), population_age argument need set match. example, default age range population 1 90 (inclusive). example , lowest age group started 1 oldest age group stopped 90. matches default population_age = c(1, 90). However, see lower age limit exceeds age range function run. order make code run age-stratified hospitalisation risk given, population_age can adjusted. oldest age bracket now 95 100 ([95, 100]). Exactly method age-stratified risks applies death risks. First create <data.frame> age groups respective, case, death risks, supply either hosp_death_risk non_hosp_death_risk arguments, define death risks outside hospital, respectively, . couple examples: now age-stratified tables supplied one risk. However, can supplied simulation. case hospitalisation risk, death risks inside outside hospital, specified.","code":"age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.20 linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk )  head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1       Selena Azure confirmed      f  60 2023-01-01           <NA> #> 2  2     Zara Humphries confirmed      f  15 2023-01-01           <NA> #> 3  4        Sean Miller  probable      m  34 2023-01-05           <NA> #> 4  5 Marjaana al-Yousef  probable      f  56 2023-01-01           <NA> #> 5  6        Dallas Wing  probable      m   3 2023-01-03           <NA> #> 6  9        Chloe Frese confirmed      f  78 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.9 #> 2       <NA>         2023-01-01        2023-01-04     24.9 #> 3       <NA>         2022-12-31        2023-01-06       NA #> 4       <NA>         2022-12-31        2023-01-03       NA #> 5       <NA>         2023-01-06        2023-01-09       NA #> 6       <NA>         2023-01-04        2023-01-05     24.9 age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        95 0.20  linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) #> Error in .check_risk_df(hosp_risk, age_range = age_range): lower bound of oldest age group must be lower than highest age range age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 95),   risk = c(0.1, 0.05, 0.2) )  linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   population_age = c(1, 100) )  head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1   Michael Phamvan confirmed      m  46 2023-01-01           <NA> #> 2  2 Hazeela el-Masood confirmed      f  87 2023-01-01           <NA> #> 3  3   Monica Schwartz  probable      f  80 2023-01-02           <NA> #> 4  5    Connor Whitney confirmed      m  39 2023-01-01           <NA> #> 5  7      Miriah Smith confirmed      f  87 2023-01-01           <NA> #> 6  8  Kameela al-Masri  probable      f  83 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.3 #> 2       <NA>         2022-12-31        2023-01-03     25.3 #> 3       <NA>         2023-01-01        2023-01-04       NA #> 4       <NA>         2023-01-05        2023-01-06     25.3 #> 5       <NA>         2022-12-31        2023-01-02     25.3 #> 6       <NA>         2022-12-29        2023-01-02       NA age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_hosp_death_risk #>   age_limit risk #> 1         1  0.3 #> 2         5  0.1 #> 3        80  0.6  linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_death_risk = age_dep_hosp_death_risk ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) ) age_dep_non_hosp_death_risk #>   age_limit risk #> 1         1 0.10 #> 2         5 0.05 #> 3        80 0.10  linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   non_hosp_death_risk = age_dep_non_hosp_death_risk ) age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) age_dep_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.3, 0.1, 0.6) ) age_dep_non_hosp_death_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.1) )  linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk,   hosp_death_risk = age_dep_hosp_death_risk,   non_hosp_death_risk = age_dep_non_hosp_death_risk )  head(linelist) #>   id            case_name case_type gender age date_onset date_admission #> 1  1      Riyaal al-Emami confirmed      m  35 2023-01-01           <NA> #> 2  2         Urwa el-Shad confirmed      f  67 2023-01-01           <NA> #> 3  3 Jordan Banchongchith confirmed      m  57 2023-01-02           <NA> #> 4  6         Andrew Aryan confirmed      m  16 2023-01-02           <NA> #> 5  7           Elias Maes confirmed      m  84 2023-01-01           <NA> #> 6  8          Laura Sugar suspected      f  83 2023-01-02     2023-01-02 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     25.4 #> 2       <NA>         2023-01-04        2023-01-04     25.4 #> 3       <NA>         2023-01-02        2023-01-03     25.4 #> 4       <NA>         2022-12-31        2023-01-03     25.4 #> 5 2023-01-13         2022-12-28        2023-01-03     25.4 #> 6 2023-01-06         2023-01-02        2023-01-05       NA"},{"path":"/dev/articles/age-struct-pop.html","id":"uniform-population-age","dir":"Articles","previous_headings":"","what":"Uniform population age","title":"Age structured population","text":"default sim_linelist() simulates individuals ages assuming uniform distribution 1 90. change age range, vector two numbers can supplied population_age argument. simulate outbreak population population ranging 5 75 (inclusive, [5,75]). Note: ages assumed unit years need integers (least “integerish” stored double). simulations vignette condition simulation minimum outbreak size (min_outbreak_size) 100 cases clearly visualise distribution ages. can plot age distribution individuals line list, binned 5 year categories. Figure 1: Age distribution individuals simulated line list sampled uniform distribution 5 75. population_age argument left unspecified, assumed default age range 1 90 (c(1, 90)).","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = c(5, 75),   min_outbreak_size = 100 ) head(linelist) #>   id           case_name case_type gender age date_onset date_admission #> 1  1           Ruoqi Lum confirmed      f  48 2023-01-01           <NA> #> 2  3 Ted Santos Sandoval confirmed      m  75 2023-01-01           <NA> #> 3  5      Ervin Ulibarri  probable      m  39 2023-01-01           <NA> #> 4  6  Tenisha Makanjuola confirmed      f  37 2023-01-03           <NA> #> 5  8      Kaylee Agustin confirmed      f  15 2023-01-01           <NA> #> 6  9    Anthony Youngman  probable      m  22 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.4 #> 2       <NA>         2023-01-02        2023-01-03     24.4 #> 3       <NA>         2022-12-31        2023-01-03       NA #> 4 2023-01-11         2023-01-01        2023-01-04     24.4 #> 5       <NA>         2022-12-28        2023-01-02     24.4 #> 6       <NA>         2022-12-27        2023-01-04       NA ggplot(linelist[, c(\"gender\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 75, 5)) +   theme_bw()"},{"path":"/dev/articles/age-struct-pop.html","id":"structured-population-age","dir":"Articles","previous_headings":"","what":"Structured population age","title":"Age structured population","text":"simulate non-uniform age structure create table (<data.frame>) containing age range age bracket population proportion population made age group. example simulate population 30% population 1 19, 40% population 20 59, 30% 60 90. age groups inclusive age brackets overlap. individuals population younger 1 older 90. can plot age distribution see age structure individuals line list. Given relative uniformity age structure specified greatly different uniform age structure plotted , higher upper age limit. data binned 5 year categories facetted gender. Figure 2: Age distribution line list cases facetted gender. age groups specified <data.frame> must non-overlapping contiguous minimum age youngest age group maximum age oldest age group. order words, missing age groups (e.g. 20-40 year olds) without specified proportion. case function error informative error message. example much younger population instead specify: 0.4 (40%) 1-9 years old 0.3 (30%) 10-29 years old 0.2 (20%) 30-59 years old 0.1 (10%) 60-75 years old common useful method plotting age data form age pyramids. partition data gender plot age distribution. Figure 3: Age pyramid simulated line list age structured population. used {ggplot2} package construct age pyramid, however {apyramid} R package R4Epi can assist making plots; can Applied Epidemiology Handbook chapter age pyramids. blog post “Population Pyramid Plots ggplot2” also contains useful tips constructing pyramid plots. shown two age structured examples, number age groups flexible. Therefore coarse population structure two three age groups can specified, precise census demographic data available, several age groups can specified.","code":"age_struct <- data.frame(   age_range = c(\"1-19\", \"20-59\", \"60-90\"),   proportion = c(0.3, 0.4, 0.3),   stringsAsFactors = FALSE ) age_struct #>   age_range proportion #> 1      1-19        0.3 #> 2     20-59        0.4 #> 3     60-90        0.3 linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct,   min_outbreak_size = 100 )  head(linelist) #>   id            case_name case_type gender age date_onset date_admission #> 1  1      Howard Arellano confirmed      m   3 2023-01-01           <NA> #> 2  4         Alan Ornelas confirmed      m  78 2023-01-01           <NA> #> 3  8 Muhaajir el-Abdullah suspected      m  47 2023-01-03     2023-01-03 #> 4  9          Colin Avina confirmed      m   1 2023-01-01           <NA> #> 5 10    Destinee Dettmann  probable      f   3 2023-01-01     2023-01-01 #> 6 12         Wing Renehan confirmed      m   8 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.2 #> 2       <NA>         2022-12-31        2023-01-03     24.2 #> 3       <NA>         2022-12-29        2023-01-01       NA #> 4       <NA>         2022-12-31        2023-01-05     24.2 #> 5       <NA>         2022-12-31        2023-01-03       NA #> 6       <NA>         2022-12-31        2023-01-06     24.2 ggplot(linelist[, c(\"gender\", \"age\")]) +   geom_histogram(     mapping = aes(x = age),     fill = \"#10BED2\",     colour = \"black\",     binwidth = 5   ) +   scale_y_continuous(name = \"Number of Individuals\") +   scale_x_continuous(name = \"Age\", breaks = seq(0, 90, 5)) +   theme_bw() +   facet_wrap(vars(gender)) age_struct <- data.frame(   age_range = c(\"1-9\", \"10-29\", \"30-59\", \"60-75\"),   proportion = c(0.4, 0.3, 0.2, 0.1),   stringsAsFactors = FALSE ) age_struct #>   age_range proportion #> 1       1-9        0.4 #> 2     10-29        0.3 #> 3     30-59        0.2 #> 4     60-75        0.1 linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.45,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   population_age = age_struct,   min_outbreak_size = 100 )  head(linelist) #>   id          case_name case_type gender age date_onset date_admission #> 1  1       Deion Bia Jr confirmed      m   8 2023-01-01           <NA> #> 2  3       Davier Oster confirmed      m  40 2023-01-01           <NA> #> 3  6  Amru al-Nasrallah confirmed      m  62 2023-01-02           <NA> #> 4  8      Shianne Giehm confirmed      f   3 2023-01-01           <NA> #> 5 10      Kristen Allen  probable      f   7 2023-01-01           <NA> #> 6 12 Christina Hamilton confirmed      f   2 2023-01-02           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     23.8 #> 2       <NA>         2022-12-31        2023-01-06     23.8 #> 3       <NA>         2022-12-29        2023-01-02     23.8 #> 4       <NA>         2022-12-30        2023-01-04     23.8 #> 5       <NA>         2022-12-31        2023-01-02       NA #> 6 2023-01-14         2022-12-30        2023-01-02     23.8 linelist_m <- subset(linelist, subset = gender == \"m\") age_cats_m <- as.data.frame(table(floor(linelist_m$age / 5) * 5)) colnames(age_cats_m) <- c(\"AgeCat\", \"Population\") age_cats_m <- cbind(age_cats_m, gender = \"m\") linelist_f <- subset(linelist, subset = gender == \"f\") age_cats_f <- as.data.frame(table(floor(linelist_f$age / 5) * 5)) colnames(age_cats_f) <- c(\"AgeCat\", \"Population\") age_cats_f$Population <- -age_cats_f$Population age_cats_f <- cbind(age_cats_f, gender = \"f\") age_cats <- rbind(age_cats_m, age_cats_f)  breaks <- pretty(range(age_cats$Population), n = 10) labels <- abs(breaks)  ggplot(age_cats) +   geom_col(mapping = aes(x = Population, y = factor(AgeCat), fill = gender)) +   scale_y_discrete(name = \"Lower bound of Age Category\") +   scale_x_continuous(name = \"Population\", breaks = breaks, labels = labels) +   scale_fill_manual(values = c(\"#F04A4C\", \"#106BA0\")) +   theme_bw()"},{"path":"/dev/articles/design-principles.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Design Principles for {simulist}","text":"{simulist} package aims simulate data infectious disease outbreaks, primarily line list data, also contacts data. output types associated exported function: sim_linelist() sim_contacts(). also function simulate output data types, sim_outbreak(). latter function useful interoperability {epicontacts} R package (see visualisation vignette), provides linked line list contacts datasets, common outbreaks, MERS dataset within {outbreaks} R package.","code":""},{"path":"/dev/articles/design-principles.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Design Principles for {simulist}","text":"simulation functions either return <data.frame> list <data.frame>s. consistency across functions well-known data structure makes easy understand users.","code":""},{"path":[]},{"path":"/dev/articles/design-principles.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Design Principles for {simulist}","text":"using age-stratified risks hospitalisation deaths (see Age-stratified hospitalisation death risks vignette details) interaction function arguments. <data.frame> defines age-stratification hosp_risk, hosp_death_risk non_hosp_death_risk arguments gives lower bound age groups. upper bound age groups derived next lower bound, upper bound oldest age group defined upper age given population_age argument. interaction arguments ideal, can difficult understand users (outlined Tidy Design book), however, interaction change interpretation argument convoluted. design decision taken changed structure <data.frame> accepted input *_risk arguments two columns lower upper age limit, single column lower age bounds. change made pull request #14 follows design {socialmixr} defining age bounds. newer structure judged preferred prevents input errors user age bounds overlapping non-contiguous (.e. missing age groups). column names contact relationships (edges network) called . Names contacts table match {epicontacts} <epicontacts> objects. column names two contacts provided epicontacts::make_epicontacts() arguments silently renamed resulting <epicontacts> object. making column names output sim_contacts() sim_outbreak() prevents confusion used {epicontacts}. naming also preferred usefully descriptive. Visualising simulated data vignette contains interactive data visualisation rendered web. enforces limitations. vignette uses output: rmarkdown::html_document() instead output: bookdown::html_vignette2 contain pkgdown: as_is: true yaml metadata, order interactive figures render operate correctly. means vignette figures automatically numbered start “Figure x” (x replaced number). Instead, decided vignette information manually written, manually updated number order figures changed. ideal solution automation preferred, balance, decided addition interactive visualisation {epicontacts} outweighed downside manual figure labelling. Exported functions simulate data use naming convention sim_*() (* placeholder). Internal functions simulate dot (.) prefix (e.g. .sim_internal()). Functions create fixed data structures (.e. data factory functions) naming convention (create_*() .create_*()). use config argument simulation function reduce number arguments exported functions provide simple user-interface possible. choice gets argument function body confined config list based preconceived frequency use, importance technical detail. say, settings unlikely changed user changed require advanced understanding simulation model placed within config, given default values create_config(). column names line list data produced sim_linelist() sim_outbreak() matches tag names used {linelist} R package (Epiverse-TRACE R package). continuity design functional reason. line list data {simulist} functions tagged sensu {linelist} tagging. inconsistent use hospitalisation admission; simulated line list date_admission, internally package uses hospitalisation (e.g. .add_hospitalisation()). think hospitalisation descriptive date_admission used {linelist}. {simulist} implements branching process model (.sim_network_bp()) tracks contacts infectious individuals. simple random network model, future versions {simulist} make code modular order accept simulations models. remove burden {simulist} simulate range model types.","code":""},{"path":"/dev/articles/design-principles.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Design Principles for {simulist}","text":"aim restrict number dependencies minimal required set ease maintenance. current hard dependencies : {stats} {checkmate} {epiparameter} {randomNames} {stats} distributed R language viewed lightweight dependency, already installed user’s machine R. {checkmate} input checking package widely used across Epiverse-TRACE packages. {epiparameter} used easily access epidemiological parameters package’s library, package currently unstable actively developed, however, using another package can inform development path {epiparameter}. {randomNames} provides utility function generating random names case contact data. functionality replicated {simulist}, however {randomNames} package maintained contains range name generation settings warrants use dependency. soft dependencies (minimum version requirements) : {incidence2} (>= 2.1.0) {epicontacts} (>= 1.1.3) {knitr} {ggplot2} {bookdown} {rmarkdown} {spelling} {testthat} (>= 3.0.0) {knitr}, {bookdown}, {rmarkdown}, used generating documentation. {spelling} {testthat} used testing code base. {ggplot2} used plotting within vignettes. {incidence2} {epicontacts} used vignettes demonstrate interoperability downstream packages, focus data visualisation.","code":""},{"path":"/dev/articles/design-principles.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Design Principles for {simulist}","text":"special requirements contributing {simulist}, please follow package contributing guide.","code":""},{"path":"/dev/articles/simulist.html","id":"case-type","dir":"Articles","previous_headings":"","what":"Case type","title":"Getting Started with {simulist}","text":"infectious disease outbreak may possible confirm every infection case. confirmed case typically defined via diagnostic test. several reasons case may confirmed, including limited testing capacity mild non-specific early symptoms, especially fast growing epidemics. therefore include two categories cases: probable suspected. example, probable cases may show clinical evidence disease , , confirmed diagnostic test. Suspected cases possibly infected show clear clinical epidemiological evidence, diagnostic test performed. Hence distribution suspected/probable/confirmed depend pathogen characteristics, outbreak-specific definitions, resources available. line list output {simulist} simulation contains column (case_type) type case. {simulist} can simulate varying probabilities case suspected, probable confirmed. default sim_linelist() function uses probabilities suspected = 0.2, probable = 0.3 confirmed = 0.5. alter probabilities, supply named vector sim_linelist() argument case_type_probs. vector contain three numbers, names suspected, probable confirmed, numbers summing one. change values simulate outbreak proportion cases confirmed laboratory testing high. also possible set one categories 1, case every case type. way {simulist} assigns case types pasting case types onto existing case data. Thus, viewed true underlying data cases simulation confirmed, lack information cases. cases output line list incorrectly attributed probable suspected infected. say, individuals line list, whatever case type, infected outbreak.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id      case_name case_type gender age date_onset date_admission date_death #> 1  1       Jill Day suspected      f  15 2023-01-01           <NA>       <NA> #> 2  2    Xin Ni Soto suspected      f  58 2023-01-01           <NA>       <NA> #> 3  3 Braxton Yanito confirmed      m   7 2023-01-01           <NA>       <NA> #> 4  4    Joel Garcia suspected      m  34 2023-01-03           <NA>       <NA> #> 5  5 Taurean Tootle confirmed      m  31 2023-01-01     2023-01-04       <NA> #> 6  6 Farha el-Kazmi  probable      f  82 2023-01-01           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>       NA #> 2         2023-01-01        2023-01-04       NA #> 3         2023-01-03        2023-01-05     26.1 #> 4         2023-01-03        2023-01-04       NA #> 5         2023-01-01        2023-01-03     26.1 #> 6         2023-01-07        2023-01-07       NA linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   case_type_probs = c(suspected = 0.05, probable = 0.05, confirmed = 0.9) ) head(linelist) #>   id            case_name case_type gender age date_onset date_admission #> 1  1 Atsila Apodaca-Anaya confirmed      f  20 2023-01-01           <NA> #> 2  2        Arneka Arnold confirmed      f  81 2023-01-02     2023-01-08 #> 3  3     Colin Trevithick confirmed      m  88 2023-01-01           <NA> #> 4  5   Matthew Sowrirajan confirmed      m  89 2023-01-01     2023-01-06 #> 5  6     Hadiyya al-Aydin confirmed      f  13 2023-01-02           <NA> #> 6  7        Grant Doughty confirmed      m  76 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     24.7 #> 2       <NA>         2023-01-08        2023-01-09     24.7 #> 3       <NA>         2023-01-05        2023-01-06     24.7 #> 4       <NA>         2023-01-02        2023-01-06     24.7 #> 5       <NA>         2022-12-31        2023-01-03     24.7 #> 6       <NA>         2023-01-01        2023-01-04     24.7"},{"path":"/dev/articles/simulist.html","id":"conditioning-simulation-on-outbreak-size","dir":"Articles","previous_headings":"","what":"Conditioning simulation on outbreak size","title":"Getting Started with {simulist}","text":"reproduction number strong influence size outbreak. {simulist}, reproduction number determined mean number contacts probability infection. However, {simulist} package generates line list data using stochastic algorithm, even \\(R < 1\\) can produce substantial outbreak chance, \\(R >> 1\\) sometimes produce vast epidemic one simulation (.e. one replicate) due stochasticity. requiring minimum outbreak size can specify min_outbreak_size argument sim_linelist(). default set 10. means simulation return line list conditioning met. words, simulation resimulate branching process model outbreak infects least 10 people. requiring line list represents large outbreak, COVID-19 outbreak, setting min_outbreak_size larger number guarantees line list least size. simulate line list requiring least 250 cases. amount time simulation takes can determined mean contact distribution (contact_distribution), probability infection (prob_infect) minimum outbreak size (min_outbreak_size). min_outbreak_size large, example hundreds thousands cases, mean number contacts probability infection mean reproduction number one, take many branching process simulations finding one produces sufficiently large epidemic.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   min_outbreak_size = 250 ) head(linelist) #>   id        case_name case_type gender age date_onset date_admission date_death #> 1  1    Devante Burke  probable      m  44 2023-01-01           <NA>       <NA> #> 2  2     Traci Bishop suspected      f   3 2023-01-01     2023-01-01       <NA> #> 3  3   Afaaf al-Assaf confirmed      f  51 2023-01-01           <NA>       <NA> #> 4  4 Cameron Sweatman confirmed      m  80 2023-01-01           <NA>       <NA> #> 5  5     Tucker Somma  probable      m   9 2023-01-01           <NA>       <NA> #> 6  6   Destiny Bieser confirmed      f  31 2023-01-02           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>       NA #> 2         2022-12-31        2023-01-04       NA #> 3         2023-01-04        2023-01-06       23 #> 4         2023-01-02        2023-01-04       23 #> 5         2022-12-28        2023-01-01       NA #> 6         2022-12-31        2023-01-02       23"},{"path":"/dev/articles/simulist.html","id":"anonymous-line-list","dir":"Articles","previous_headings":"","what":"Anonymous line list","title":"Getting Started with {simulist}","text":"default sim_linelist() provides name individual line list. anonymised line list required add_names argument sim_linelist() can set FALSE. names used line list produced random {randomNames} R package. Therefore, even add_names = TRUE personal data real individuals produced shared.","code":"linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   add_names = FALSE ) head(linelist) #>   id case_type gender age date_onset date_admission date_death #> 1  1 confirmed      f  21 2023-01-01           <NA>       <NA> #> 2  3 suspected      m  10 2023-01-02           <NA>       <NA> #> 3  5 confirmed      m  31 2023-01-01           <NA>       <NA> #> 4  6  probable      f  87 2023-01-01           <NA>       <NA> #> 5  7 suspected      f  64 2023-01-01           <NA>       <NA> #> 6  8 confirmed      m   7 2023-01-01     2023-01-04       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     23.5 #> 2         2023-01-06        2023-01-07       NA #> 3         2022-12-29        2023-01-02     23.5 #> 4         2023-01-04        2023-01-05       NA #> 5         2023-01-05        2023-01-08       NA #> 6         2023-01-01        2023-01-03     23.5"},{"path":"/dev/articles/simulist.html","id":"population-age","dir":"Articles","previous_headings":"","what":"Population age","title":"Getting Started with {simulist}","text":"overview line list can simulated uniform structured population age distribution see vignette dedicated topic.","code":""},{"path":"/dev/articles/simulist.html","id":"age-stratified-hospitalisation-and-death-risks","dir":"Articles","previous_headings":"","what":"Age-stratified hospitalisation and death risks","title":"Getting Started with {simulist}","text":"overview line list can simulated age-stratified (age-dependent) hospitalisation death risks see vignette dedicated topic.","code":""},{"path":"/dev/articles/simulist.html","id":"simulate-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate contacts table","title":"Getting Started with {simulist}","text":"simulate contacts table, sim_contacts() function can used. requires arguments sim_linelist(), require onset--hospitalisation delay onset--death delays.","code":"contacts <- sim_contacts(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5) head(contacts) #>            from               to age gender date_first_contact #> 1   Kyasha Rice    Zain al-Gaber  67      m         2022-12-28 #> 2   Kyasha Rice    Danny Isimang  47      m         2022-12-30 #> 3 Zain al-Gaber   Aeneva Simmons  33      f         2023-01-02 #> 4 Zain al-Gaber  Taariq el-Aboud  24      m         2023-01-02 #> 5 Zain al-Gaber Ghaaliba el-Doud  88      f         2023-01-03 #> 6 Zain al-Gaber    Tyson Worrell  36      m         2022-12-31 #>   date_last_contact was_case           status #> 1        2023-01-01        Y             case #> 2        2023-01-02        Y             case #> 3        2023-01-05        N   under_followup #> 4        2023-01-07        N lost_to_followup #> 5        2023-01-03        Y             case #> 6        2023-01-04        Y             case"},{"path":"/dev/articles/simulist.html","id":"simulate-both-line-list-and-contacts-table","dir":"Articles","previous_headings":"","what":"Simulate both line list and contacts table","title":"Getting Started with {simulist}","text":"produce line list contacts table outbreak, sim_linelist() sim_contacts() used separately due stochastic algorithm, meaning data line list discordant contacts table. order simulate line list contacts table outbreak sim_outbreak() function required. simulate single outbreak return line list contacts table. inputs sim_outbreak() inputs required sim_linelist(). sim_outbreak() features sim_linelist() sim_contacts(), includes simulating age-stratified risks hospitalisation death, probability case types contact tracing status can modified. Advanced sim_*() functions, default, use excess degree distribution account network effect sampling number contacts simulation model (\\(q(n) \\sim (n + 1)p(n + 1)\\) \\(p(n)\\) probability density function distribution, e.g., Poisson Negative binomial, within .sim_network_bp() internal function). network effect can turned using config argument sim_*() function setting network = \"unadjusted\" (create_config(network = \"unadjusted\")) instead sample probability distribution \\(p(n)\\).","code":"outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id       case_name case_type gender age date_onset date_admission date_death #> 1  1      Janae Rios confirmed      f  23 2023-01-01           <NA>       <NA> #> 2  3  Makaylee Cross  probable      f  50 2023-01-01           <NA>       <NA> #> 3  4 Elizabeth Burch confirmed      f  70 2023-01-02           <NA>       <NA> #> 4  5   Helina Little  probable      f  30 2023-01-01           <NA>       <NA> #> 5  6  Yolanda Moreno confirmed      f  34 2023-01-01     2023-01-06       <NA> #> 6  7 Dania Hernandez  probable      f  76 2023-01-01           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     25.6 #> 2         2023-01-05        2023-01-05       NA #> 3         2023-01-03        2023-01-06     25.6 #> 4         2022-12-29        2023-01-02       NA #> 5         2023-01-05        2023-01-08     25.6 #> 6         2023-01-02        2023-01-03       NA head(outbreak$contacts) #>              from              to age gender date_first_contact #> 1      Janae Rios    Charles Maes   1      m         2023-01-02 #> 2      Janae Rios  Makaylee Cross  50      f         2023-01-05 #> 3      Janae Rios Elizabeth Burch  70      f         2023-01-03 #> 4  Makaylee Cross   Helina Little  30      f         2022-12-29 #> 5 Elizabeth Burch  Yolanda Moreno  34      f         2023-01-05 #> 6   Helina Little Dania Hernandez  76      f         2023-01-02 #>   date_last_contact was_case         status #> 1        2023-01-05        N under_followup #> 2        2023-01-05        Y           case #> 3        2023-01-06        Y           case #> 4        2023-01-02        Y           case #> 5        2023-01-08        Y           case #> 6        2023-01-03        Y           case"},{"path":"/dev/articles/simulist.html","id":"using-functions-for-distributions-instead-of-epidist","dir":"Articles","previous_headings":"","what":"Using functions for distributions instead of <epidist>","title":"Getting Started with {simulist}","text":"possible use anonymous function instead <epidist> object specifying parameters delay contact distributions. recommend using <epidist> objects outline alternative approach. contact_distribution requires density function instead random number generation function (.e. dpois() dnbinom() instead rpois() rnbinom()). due branching process simulation adjusting sampling contacts take account random network effect. approach using anonymous functions can used sim_linelist() sim_contacts().","code":"outbreak <- sim_outbreak(   contact_distribution = function(x) dpois(x = x, lambda = 2),   contact_interval = function(x) rgamma(n = x, shape = 2, scale = 2),   prob_infect = 0.5,   onset_to_hosp = function(x) rlnorm(n = x, meanlog = 1.5, sdlog = 0.5),   onset_to_death = function(x) rweibull(n = x, shape = 0.5, scale = 0.2) ) head(outbreak$linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1    Lloyd Grzesiek suspected      m  17 2023-01-01           <NA> #> 2  3       Scott Bogus confirmed      m  59 2023-01-02           <NA> #> 3  4  Aaliyah Chisholm confirmed      f  63 2023-01-04           <NA> #> 4  6 Claudia Domingues  probable      f  35 2023-01-11           <NA> #> 5  7    Keanna Gregory confirmed      f  62 2023-01-01           <NA> #> 6  9   Gilbert Alvarez suspected      m  14 2023-01-05           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-01        2023-01-05     25.1 #> 3       <NA>         2022-12-30        2023-01-02     25.1 #> 4       <NA>         2023-01-02        2023-01-05       NA #> 5       <NA>         2023-01-01        2023-01-04     25.1 #> 6       <NA>         2022-12-29        2023-01-02       NA head(outbreak$contacts) #>             from                   to age gender date_first_contact #> 1 Lloyd Grzesiek     Brittanie Taylor  86      f         2022-12-26 #> 2 Lloyd Grzesiek          Scott Bogus  59      m         2023-01-01 #> 3 Lloyd Grzesiek     Aaliyah Chisholm  63      f         2022-12-30 #> 4 Lloyd Grzesiek Abdul Haadi al-Rassi  71      m         2023-01-02 #> 5    Scott Bogus    Claudia Domingues  35      f         2023-01-02 #> 6    Scott Bogus       Keanna Gregory  62      f         2023-01-01 #>   date_last_contact was_case         status #> 1        2023-01-01        N under_followup #> 2        2023-01-05        Y           case #> 3        2023-01-02        Y           case #> 4        2023-01-03        N under_followup #> 5        2023-01-05        Y           case #> 6        2023-01-04        Y           case"},{"path":"/dev/articles/vis-linelist.html","id":"visualising-incidence-of-onset-hospitalisation-and-death","dir":"Articles","previous_headings":"","what":"Visualising incidence of onset, hospitalisation and death","title":"Visualising simulated data","text":"section vignette heavily based upon examples given Get Started vignette {incidence2} package. highly recommended read documentation supplied {incidence2} package explore full range functionality. visualise number cases onset particular day, {incidence2} package, dedicated class (<incidence2>) used handling plotting data. Currently {simulist} outputs dates rounded nearest day, .e. can half way day. obvious R prints dates nearest day default, removing date class (using unclass()) can see decimals (R stores dates internally number days since 1970-01-01). Note storing dates precise doubles integer days may change near future. interval = \"daily\" required {incidence2} requires rounded dates aggregate cases per unit time specifying interval automatically us. possible every date onset symptoms, resulting dates missing entries. taken care complete_dates() function {incidence2}. Figure 1: Daily incidence cases symptom onset including days zero cases. Alternatively, incidence can plotting weekly: Figure 2: Weekly incidence cases symptom onset order check differences group line list data, example gender, <incidence2> data object can recreated, specifying columns group . Figure 3: Weekly incidence cases symptom onset facetted gender. visualise onset, hospitalisation death incidence plot can jointly specified date_index argument incidence2::incidence(). Figure 4: Daily incidence cases symptom onset incidence hospitalisations deaths.","code":"# create incidence object daily <- incidence(x = linelist, date_index = \"date_onset\", interval = \"daily\") # impute for days without cases daily <- complete_dates(daily) plot(daily) weekly <- incidence(linelist, date_index = \"date_onset\", interval = \"isoweek\") plot(weekly) weekly <- incidence(   linelist,   date_index = \"date_onset\",   interval = \"isoweek\",   groups = \"gender\" ) plot(weekly) daily <- incidence(   linelist,   date_index = c(     onset = \"date_onset\",     hospitalisation = \"date_admission\",     death = \"date_death\"   ),   interval = \"daily\",   groups = \"gender\" ) daily <- complete_dates(daily) plot(daily)"},{"path":"/dev/articles/vis-linelist.html","id":"demographic-data","dir":"Articles","previous_headings":"","what":"Demographic data","title":"Visualising simulated data","text":"Please see Age structured population vignette examples plot distribution ages within line list data set, including age pyramids. plotting code vignettes hidden default, click Code button arrow reveal plotting code.","code":""},{"path":"/dev/articles/vis-linelist.html","id":"visualising-contact-data","dir":"Articles","previous_headings":"","what":"Visualising contact data","title":"Visualising simulated data","text":"section vignette based upon examples {epicontacts} R package documentation examples provided Epidemiological R Handbook chapter transmission chains. recommend going documentation {epicontacts} R package see plotting data wrangling functionality. Just utilised <incidence2> class {incidence2} package handle plot incidence data, going use <epicontacts> class {epicontacts} R package handle plot epidemiological contact data. benefit using {epicontacts} {incidence2}, fact default plotting method supplied package. Advanced Additionally, {epicontacts} provides access network plotting JavaScript libraries via {visNetwork} {threejs} R packages. {epicontacts} function make_epicontacts() requires line list contacts table, run sim_outbreak() function produce . use epidemiological delay distributions used simulate line list , reduce mean number contacts contact distribution 2. Using line list contacts data simulated can create <epicontacts> object. <epicontacts> object comes custom printing feature see data. plot contact network can use plotting method supplied {epicontacts} automatically recognised {epicontacts} package loaded (done library(epicontacts)). viewing vignette web (web browser) graph interactive allow highlight individuals network using drop-menu, zoom plot scrolling, move network using mouse drag drop. Figure 5: Contact network infectious disease outbreak. includes contacts, .e. individuals infected infected also option plot contacts network 3D using epicontacts::graph3D(). default outbreak simulated sim_outbreak() contains contacts cases infected. shown previous network plot terminal nodes pass infection individuals (note terminal nodes can also infected individuals infect anybody else, either due contacts due probabilistic nature infection transmission). show subset contacts table order plot transmission network cases outbreak.","code":"contact_distribution <- epidist(   disease = \"COVID-19\",   epi_dist = \"contact distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(mean = 2) ) #> Citation cannot be created as author, year, journal or title is missing set.seed(1) outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>   id      case_name case_type gender age date_onset date_admission date_death #> 1  1        Kacy To confirmed      f  39 2023-01-01           <NA>       <NA> #> 2  3    Lorrin Dehn confirmed      f  36 2023-01-04     2023-01-07       <NA> #> 3  6     Tess Green  probable      f  81 2023-01-05           <NA>       <NA> #> 4  9  Alexander Chu confirmed      m  89 2023-01-06           <NA>       <NA> #> 5 10 Ashley Cornejo confirmed      f  73 2023-01-03           <NA>       <NA> #> 6 13  Danika Folsom confirmed      f  79 2023-01-05           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     26.1 #> 2         2023-01-06        2023-01-09     26.1 #> 3         2023-01-03        2023-01-05       NA #> 4         2023-01-03        2023-01-08     26.1 #> 5         2023-01-11        2023-01-12     26.1 #> 6         2023-01-09        2023-01-10     26.1 head(outbreak$contacts) #>          from                to age gender date_first_contact date_last_contact #> 1     Kacy To Suhaila el-Akhtar  29      f         2022-12-31        2023-01-03 #> 2     Kacy To       Lorrin Dehn  36      f         2023-01-06        2023-01-09 #> 3     Kacy To         Jina Shaw  32      f         2023-01-02        2023-01-06 #> 4     Kacy To   Nakheel el-Omar  51      f         2022-12-31        2023-01-07 #> 5     Kacy To        Tess Green  81      f         2023-01-03        2023-01-05 #> 6 Lorrin Dehn      Jairo Seaman  51      m         2023-01-06        2023-01-08 #>   was_case           status #> 1        N lost_to_followup #> 2        Y             case #> 3        N   under_followup #> 4        N   under_followup #> 5        Y             case #> 6        N          unknown epicontacts <- make_epicontacts(   linelist = outbreak$linelist,   contacts = outbreak$contacts,   id = \"case_name\",   from = \"from\",   to = \"to\",   directed = TRUE ) epicontacts #>  #> /// Epidemiological Contacts // #>  #>   // class: epicontacts #>   // 30 cases in linelist; 57 contacts;  directed  #>  #>   // linelist #> Warning: `tbl_df()` was deprecated in dplyr 1.0.0. #> ℹ Please use `tibble::as_tibble()` instead. #> ℹ The deprecated feature was likely used in the epicontacts package. #>   Please report the issue at <https://github.com/reconhub/epicontacts/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> # A tibble: 30 × 11 #>    id    id.1        case_type gender   age date_onset date_admission date_death #>    <chr> <chr>       <chr>     <chr>  <int> <date>     <date>         <date>     #>  1 1     Kacy To     confirmed f         39 2023-01-01 NA             NA         #>  2 3     Lorrin Dehn confirmed f         36 2023-01-04 2023-01-07     NA         #>  3 6     Tess Green  probable  f         81 2023-01-05 NA             NA         #>  4 9     Alexander … confirmed m         89 2023-01-06 NA             NA         #>  5 10    Ashley Cor… confirmed f         73 2023-01-03 NA             NA         #>  6 13    Danika Fol… confirmed f         79 2023-01-05 NA             NA         #>  7 15    Mahuroos e… confirmed m         88 2023-01-01 2023-01-03     NA         #>  8 16    Huy Lee     suspected m         78 2023-01-07 NA             NA         #>  9 17    Breeze Est… probable  f         71 2023-01-04 NA             NA         #> 10 18    Erika Kell… suspected f         59 2023-01-05 NA             NA         #> # ℹ 20 more rows #> # ℹ 3 more variables: date_first_contact <date>, date_last_contact <date>, #> #   ct_value <dbl> #>  #>   // contacts #>  #> # A tibble: 57 × 8 #>    from  to      age gender date_first_contact date_last_contact was_case status #>    <chr> <chr> <int> <chr>  <date>             <date>            <chr>    <chr>  #>  1 Kacy… Suha…    29 f      2022-12-31         2023-01-03        N        lost_… #>  2 Kacy… Lorr…    36 f      2023-01-06         2023-01-09        Y        case   #>  3 Kacy… Jina…    32 f      2023-01-02         2023-01-06        N        under… #>  4 Kacy… Nakh…    51 f      2022-12-31         2023-01-07        N        under… #>  5 Kacy… Tess…    81 f      2023-01-03         2023-01-05        Y        case   #>  6 Lorr… Jair…    51 m      2023-01-06         2023-01-08        N        unkno… #>  7 Lorr… Ital…    52 f      2023-01-02         2023-01-06        N        under… #>  8 Lorr… Alex…    89 m      2023-01-03         2023-01-08        Y        case   #>  9 Tess… Ashl…    73 f      2023-01-11         2023-01-12        Y        case   #> 10 Tess… Tosh…    21 m      2023-01-01         2023-01-07        N        under… #> # ℹ 47 more rows plot(epicontacts)"},{"path":"/dev/articles/vis-linelist.html","id":"subset-contact-network-to-transmission-network","dir":"Articles","previous_headings":"Visualising contact data","what":"Subset contact network to transmission network","title":"Visualising simulated data","text":"Base R Tidyverse","code":"outbreak$contacts <- outbreak$contacts[outbreak$contacts$was_case == \"Y\", ] library(dplyr) outbreak$contacts <- outbreak$contacts %>%   dplyr::filter(was_case == \"Y\")"},{"path":"/dev/articles/vis-linelist.html","id":"section","dir":"Articles","previous_headings":"","what":"Visualising simulated data","title":"Visualising simulated data","text":"Figure 6: Transmission chain infectious disease outbreak. includes individuals infected, including confirmed, probable suspected cases.","code":"head(outbreak$linelist) #>   id      case_name case_type gender age date_onset date_admission date_death #> 1  1        Kacy To confirmed      f  39 2023-01-01           <NA>       <NA> #> 2  3    Lorrin Dehn confirmed      f  36 2023-01-04     2023-01-07       <NA> #> 3  6     Tess Green  probable      f  81 2023-01-05           <NA>       <NA> #> 4  9  Alexander Chu confirmed      m  89 2023-01-06           <NA>       <NA> #> 5 10 Ashley Cornejo confirmed      f  73 2023-01-03           <NA>       <NA> #> 6 13  Danika Folsom confirmed      f  79 2023-01-05           <NA>       <NA> #>   date_first_contact date_last_contact ct_value #> 1               <NA>              <NA>     26.1 #> 2         2023-01-06        2023-01-09     26.1 #> 3         2023-01-03        2023-01-05       NA #> 4         2023-01-03        2023-01-08     26.1 #> 5         2023-01-11        2023-01-12     26.1 #> 6         2023-01-09        2023-01-10     26.1 head(outbreak$contacts) #>             from                  to age gender date_first_contact #> 1        Kacy To         Lorrin Dehn  36      f         2023-01-06 #> 2        Kacy To          Tess Green  81      f         2023-01-03 #> 3    Lorrin Dehn       Alexander Chu  89      m         2023-01-03 #> 4     Tess Green      Ashley Cornejo  73      f         2023-01-11 #> 5  Alexander Chu       Danika Folsom  79      f         2023-01-09 #> 6 Ashley Cornejo Mahuroos el-Rahmani  88      m         2023-01-02 #>   date_last_contact was_case status #> 1        2023-01-09        Y   case #> 2        2023-01-05        Y   case #> 3        2023-01-08        Y   case #> 4        2023-01-12        Y   case #> 5        2023-01-10        Y   case #> 6        2023-01-05        Y   case epicontacts <- make_epicontacts(   linelist = outbreak$linelist,   contacts = outbreak$contacts,   id = \"case_name\",   from = \"from\",   to = \"to\",   directed = TRUE ) epicontacts #>  #> /// Epidemiological Contacts // #>  #>   // class: epicontacts #>   // 30 cases in linelist; 29 contacts;  directed  #>  #>   // linelist #>  #> # A tibble: 30 × 11 #>    id    id.1        case_type gender   age date_onset date_admission date_death #>    <chr> <chr>       <chr>     <chr>  <int> <date>     <date>         <date>     #>  1 1     Kacy To     confirmed f         39 2023-01-01 NA             NA         #>  2 3     Lorrin Dehn confirmed f         36 2023-01-04 2023-01-07     NA         #>  3 6     Tess Green  probable  f         81 2023-01-05 NA             NA         #>  4 9     Alexander … confirmed m         89 2023-01-06 NA             NA         #>  5 10    Ashley Cor… confirmed f         73 2023-01-03 NA             NA         #>  6 13    Danika Fol… confirmed f         79 2023-01-05 NA             NA         #>  7 15    Mahuroos e… confirmed m         88 2023-01-01 2023-01-03     NA         #>  8 16    Huy Lee     suspected m         78 2023-01-07 NA             NA         #>  9 17    Breeze Est… probable  f         71 2023-01-04 NA             NA         #> 10 18    Erika Kell… suspected f         59 2023-01-05 NA             NA         #> # ℹ 20 more rows #> # ℹ 3 more variables: date_first_contact <date>, date_last_contact <date>, #> #   ct_value <dbl> #>  #>   // contacts #>  #> # A tibble: 29 × 8 #>    from  to      age gender date_first_contact date_last_contact was_case status #>    <chr> <chr> <int> <chr>  <date>             <date>            <chr>    <chr>  #>  1 Kacy… Lorr…    36 f      2023-01-06         2023-01-09        Y        case   #>  2 Kacy… Tess…    81 f      2023-01-03         2023-01-05        Y        case   #>  3 Lorr… Alex…    89 m      2023-01-03         2023-01-08        Y        case   #>  4 Tess… Ashl…    73 f      2023-01-11         2023-01-12        Y        case   #>  5 Alex… Dani…    79 f      2023-01-09         2023-01-10        Y        case   #>  6 Ashl… Mahu…    88 m      2023-01-02         2023-01-05        Y        case   #>  7 Dani… Huy …    78 m      2023-01-07         2023-01-08        Y        case   #>  8 Dani… Bree…    71 f      2023-01-04         2023-01-06        Y        case   #>  9 Dani… Erik…    59 f      2023-01-04         2023-01-08        Y        case   #> 10 Mahu… Zach…    30 m      2023-01-07         2023-01-09        Y        case   #> # ℹ 19 more rows plot(epicontacts)"},{"path":"/dev/articles/vis-linelist.html","id":"visualising-other-line-list-information","dir":"Articles","previous_headings":"","what":"Visualising other line list information","title":"Visualising simulated data","text":"aspects line list data can plotted like added vignette please make issue pull request.","code":""},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer, copyright holder. Carmen Tamayo. Author. Hugo Gruson. Contributor, reviewer. Pratik R. Gupte. Contributor. Adam Kucharski. Reviewer.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J, Tamayo C (2024). simulist: Tools Simulate Line List Contacts Data. doi:10.5281/zenodo.10471458, https://github.com/epiverse-trace/simulist, https://epiverse-trace.github.io/simulist/.","code":"@Manual{,   title = {simulist: Tools to Simulate Line List and Contacts Data},   author = {Joshua W. Lambert and Carmen Tamayo},   year = {2024},   doi = {10.5281/zenodo.10471458},   url = {https://github.com/epiverse-trace/simulist, https://epiverse-trace.github.io/simulist/}, }"},{"path":"/dev/index.html","id":"simulist-simulate-line-list-data-","dir":"","previous_headings":"","what":"Tools to Simulate Line List and Contacts Data","title":"Tools to Simulate Line List and Contacts Data","text":"simulist R package simulate individual-level infectious disease outbreak data, including line lists contact tracing data. can often useful synthetic datasets like available demonstrating outbreak analytics techniques testing new analysis methods. simulist developed Centre Mathematical Modelling Infectious Diseases London School Hygiene Tropical Medicine part Epiverse-TRACE.","code":""},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Simulate Line List and Contacts Data","text":"can install development version simulist GitHub :","code":"# check whether {pak} is installed if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/simulist\")"},{"path":"/dev/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Tools to Simulate Line List and Contacts Data","text":"line list simulation requires define contact distribution, contact interval, onset--hospitalisation delay, onset--death delay. can load library epidemiological parameters epiparameter R package available, database yet (contact interval COVID-19) can define . simulate line list COVID-19 Poisson contact distribution mean number contacts 2 probability infection per contact 0.5, use sim_linelist() function. mean number contacts probability infection determine outbreak reproduction number, resulting reproduction number around one means likely get reasonably sized outbreak (10 - 1,000 cases, varying due stochastic simulation). Take care setting mean number contacts probability infection, can lead outbreak becoming extremely large. example, line list simulated using default values (see ?sim_linelist). default hospitalisation risk assumed 0.2 (.e. 20% probability infected individual becomes hospitalised) start date outbreak 1st January 2023. modify either , can specify function. simulate table contacts cases (.e. reflect contact tracing dataset) can use parameters defined example . line list contacts table required, can jointly simulated using sim_outbreak() function. uses inputs sim_linelist() sim_contacts() produce line list contacts table outbreak (arguments also default settings functions).","code":"library(simulist) library(epiparameter) # create COVID-19 contact distribution contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",    epi_dist = \"contact distribution\",    prob_distribution = \"pois\",    prob_distribution_params = c(mean = 2) ) #> Citation cannot be created as author, year, journal or title is missing  # create COVID-19 contact interval contact_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function set.seed(1) linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1 Sabeeha el-Hannan  probable      f  28 2023-01-01           <NA> #> 2  2    Jaedyn Robbins confirmed      f  62 2023-01-02     2023-01-02 #> 5  5          Young Vu confirmed      m  42 2023-01-01           <NA> #> 6  6      Alyssa Gloyd  probable      f  60 2023-01-01           <NA> #> 8  8   Sebastian Boden  probable      m  28 2023-01-02     2023-01-03 #> 9  9  Sierra Hernandez suspected      f  78 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-02        2023-01-05     25.1 #> 5       <NA>         2023-01-03        2023-01-04     25.1 #> 6       <NA>         2023-01-02        2023-01-04       NA #> 8       <NA>         2023-01-01        2023-01-03       NA #> 9       <NA>         2022-12-29        2023-01-04       NA linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.01,   outbreak_start_date = as.Date(\"2019-12-01\") ) head(linelist) #>   id              case_name case_type gender age date_onset date_admission #> 1  1 Aaren-Matthew Deguzman  probable      m  65 2019-12-01           <NA> #> 2  2      Thaamira el-Yusuf confirmed      f  61 2019-12-01           <NA> #> 3  3         Hector Hickman suspected      m  56 2019-12-01           <NA> #> 4  4     Zuhriyaa al-Saleem  probable      f  36 2019-12-01           <NA> #> 5  5            Chisa Xiong confirmed      f  20 2019-12-01           <NA> #> 6  6     Tre-Shawn Williams confirmed      m  85 2019-12-02     2019-12-06 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2019-11-26        2019-12-06     25.3 #> 3       <NA>         2019-11-28        2019-12-03       NA #> 4       <NA>         2019-11-28        2019-12-02       NA #> 5       <NA>         2019-11-28        2019-12-02     25.3 #> 6       <NA>         2019-12-01        2019-12-04     25.3 contacts <- sim_contacts(   contact_distribution = contact_distribution,   contact_interval = contact_interval,    prob_infect = 0.5 ) head(contacts) #>             from               to age gender date_first_contact #> 2  James Padilla   Miranda Blanco  69      f         2022-12-31 #> 3  James Padilla      Allan Bunge  83      m         2023-01-05 #> 4    Allan Bunge   Nicholas Rabia  18      m         2023-01-02 #> 5    Allan Bunge Unais al-Shabazz  85      m         2023-01-04 #> 6 Nicholas Rabia    Apiluck Chong  84      m         2022-12-30 #> 7 Nicholas Rabia     Rachel Tyler  90      f         2023-01-02 #>   date_last_contact was_case         status #> 2        2023-01-03        N        unknown #> 3        2023-01-05        Y           case #> 4        2023-01-05        Y           case #> 5        2023-01-06        Y           case #> 6        2023-01-02        N under_followup #> 7        2023-01-04        Y           case outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death ) head(outbreak$linelist) #>    id           case_name case_type gender age date_onset date_admission #> 1   1   Katherin Trancoso confirmed      f   2 2023-01-01           <NA> #> 4   4        E-Shaw Allen confirmed      f  47 2023-01-01           <NA> #> 5   5     Madison Moltrer suspected      f   8 2023-01-01           <NA> #> 8   8 Christopher Richter confirmed      m  18 2023-01-02     2023-01-08 #> 11 11      Elias Mckenzie confirmed      m   4 2023-01-01           <NA> #> 12 12       Elaine Nguyen confirmed      f  60 2023-01-02           <NA> #>    date_death date_first_contact date_last_contact ct_value #> 1        <NA>               <NA>              <NA>     24.5 #> 4        <NA>         2023-01-02        2023-01-06     24.5 #> 5        <NA>         2022-12-31        2023-01-03       NA #> 8        <NA>         2023-01-02        2023-01-03     24.5 #> 11       <NA>         2023-01-04        2023-01-06     24.5 #> 12       <NA>         2023-01-07        2023-01-09     24.5 head(outbreak$contacts) #>                from                to age gender date_first_contact #> 2 Katherin Trancoso      David Mcafee  46      m         2023-01-02 #> 3 Katherin Trancoso Firdaus al-Hamidi  68      f         2022-12-30 #> 4 Katherin Trancoso      E-Shaw Allen  47      f         2023-01-02 #> 5 Katherin Trancoso   Madison Moltrer   8      f         2022-12-31 #> 6      E-Shaw Allen       Tyko Pahang  24      m         2023-01-05 #> 7   Madison Moltrer   Bryan Rodriguez  67      m         2022-12-31 #>   date_last_contact was_case           status #> 2        2023-01-02        N lost_to_followup #> 3        2023-01-02        N   under_followup #> 4        2023-01-06        Y             case #> 5        2023-01-03        Y             case #> 6        2023-01-05        N lost_to_followup #> 7        2023-01-02        N   under_followup"},{"path":"/dev/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Tools to Simulate Line List and Contacts Data","text":"report bug please open issue.","code":""},{"path":"/dev/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Tools to Simulate Line List and Contacts Data","text":"Contributions simulist welcomed. Please follow package contributing guide.","code":""},{"path":"/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Tools to Simulate Line List and Contacts Data","text":"Please note simulist project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/dev/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Tools to Simulate Line List and Contacts Data","text":"","code":"citation(\"simulist\") #> To cite package 'simulist' in publications use: #>  #>   Lambert J, Tamayo C (2024). _simulist: Tools to Simulate Line List #>   and Contacts Data_. doi:10.5281/zenodo.10471458 #>   <https://doi.org/10.5281/zenodo.10471458>, #>   <https://github.com/epiverse-trace/simulist,https://epiverse-trace.github.io/simulist/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {simulist: Tools to Simulate Line List and Contacts Data}, #>     author = {Joshua W. Lambert and Carmen Tamayo}, #>     year = {2024}, #>     doi = {10.5281/zenodo.10471458}, #>     url = {https://github.com/epiverse-trace/simulist, #> https://epiverse-trace.github.io/simulist/}, #>   }"},{"path":"/dev/reference/create_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of configuration settings for some details of sim_linelist() — create_config","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"Create list configuration settings details sim_linelist()","code":""},{"path":"/dev/reference/create_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"","code":"create_config(...)"},{"path":"/dev/reference/create_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"... <dynamic-dots> Named elements replace default settings. names match exactly elements replaced, otherwise function errors.","code":""},{"path":"/dev/reference/create_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"list settings sim_linelist()","code":""},{"path":"/dev/reference/create_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"config argument sim_linelist() controls small details around time windows around infections (time first contact last contact infector), distribution Ct value confirmed cases. Accepted arguments defaults : last_contact_distribution = \"pois\" last_contact_distribution_params = c(lambda = 3) first_contact_distribution = \"pois\" first_contact_distribution_params = c(lambda = 3) ct_distribution = \"norm\" ct_distribution_params = c(mean = 25, sd = 2) network = \"adjusted\" parameters warrant arguments sim_linelist() rarely need changed default setting. Therefore worth increasing number sim_linelist() arguments accommodate config argument keeps function signature simpler readable. network option controls whether sample contacts adjusted unadjusted contact distribution. Adjusted (default) sampling uses \\(q(n) \\sim (n + 1)p(n + 1)\\) \\(p(n)\\) probability density function distribution, e.g., Poisson Negative binomial. Unadjusted (network = \"unadjusted\") instead samples contacts directly probability distribution \\(p(n)\\).","code":""},{"path":"/dev/reference/create_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of configuration settings for some details of sim_linelist() — create_config","text":"","code":"# example with default configuration create_config() #> $last_contact_distribution #> [1] \"pois\" #>  #> $last_contact_distribution_params #> lambda  #>      3  #>  #> $first_contact_distribution #> [1] \"pois\" #>  #> $first_contact_distribution_params #> lambda  #>      3  #>  #> $ct_distribution #> [1] \"norm\" #>  #> $ct_distribution_params #> mean   sd  #>   25    2  #>  #> $network #> [1] \"adjusted\" #>   # example with customised Ct distribution create_config(   ct_distribution = \"lnorm\",   ct_distribution_params = c(meanlog = 2, sdlog = 1) ) #> $last_contact_distribution #> [1] \"pois\" #>  #> $last_contact_distribution_params #> lambda  #>      3  #>  #> $first_contact_distribution #> [1] \"pois\" #>  #> $first_contact_distribution_params #> lambda  #>      3  #>  #> $ct_distribution #> [1] \"lnorm\" #>  #> $ct_distribution_params #> meanlog   sdlog  #>       2       1  #>  #> $network #> [1] \"adjusted\" #>"},{"path":"/dev/reference/dot-add_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Add event date as column to infectious history <data.frame> — .add_date","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"event date first contact, last contact .","code":""},{"path":"/dev/reference/dot-add_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"","code":".add_date_contact(   .data,   contact_type = c(\"first\", \"last\"),   distribution = c(\"pois\", \"geom\"),   ...,   outbreak_start_date )  .add_hospitalisation(.data, onset_to_hosp, hosp_risk)  .add_deaths(.data, onset_to_death, hosp_death_risk, non_hosp_death_risk)"},{"path":"/dev/reference/dot-add_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add event date as column to infectious history <data.frame> — .add_date","text":".data <data.frame> containing infectious history branching process simulation. contact_type character type contact, either first contact (\"first\"), last contact (\"last\"). distribution character name distribution, following base R convention distribution naming (e.g. Poisson pois). ... dots Extra arguments passed distribution function given distribution argument. outbreak_start_date date start outbreak. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information.","code":""},{"path":"/dev/reference/dot-add_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add event date as column to infectious history <data.frame> — .add_date","text":"<data.frame> one column input .data. Unless column heading already present data overwritten.","code":""},{"path":"/dev/reference/dot-add_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Add line list information as column to infectious history <data.frame> — .add_info","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"Add line list information column infectious history <data.frame>","code":""},{"path":"/dev/reference/dot-add_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"","code":".add_names(.data)  .add_ct(.data, distribution = c(\"norm\", \"lnorm\"), ...)"},{"path":"/dev/reference/dot-add_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":".data <data.frame> containing infectious history branching process simulation distribution character name distribution, following base R convention distribution naming (e.g. Poisson pois). ... dots Extra arguments passed distribution function given distribution argument.","code":""},{"path":"/dev/reference/dot-add_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add line list information as column to infectious history <data.frame> — .add_info","text":"<data.frame> one column input .data. Unless column heading already present data overwritten.","code":""},{"path":"/dev/reference/dot-check_age_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if <data.frame> defining age structure of population is correct — .check_age_df","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"Check <data.frame> defining age structure population correct","code":""},{"path":"/dev/reference/dot-check_age_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"","code":".check_age_df(x)"},{"path":"/dev/reference/dot-check_age_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"x <data.frame>.","code":""},{"path":"/dev/reference/dot-check_age_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if <data.frame> defining age structure of population is correct — .check_age_df","text":"<data.frame>, also called error side-effects input invalid.","code":""},{"path":"/dev/reference/dot-check_risk_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"Check <data.frame> defining age-stratified hospitalisation death risk correct","code":""},{"path":"/dev/reference/dot-check_risk_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"","code":".check_risk_df(x, age_range)"},{"path":"/dev/reference/dot-check_risk_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"x <data.frame>.","code":""},{"path":"/dev/reference/dot-check_risk_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if <data.frame> defining age-stratified hospitalisation or death risk\nis correct — .check_risk_df","text":"<data.frame>, also called error side-effects input invalid.","code":""},{"path":"/dev/reference/dot-check_sim_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if arguments input to simulation function are valid — .check_sim_input","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Check arguments input simulation function valid","code":""},{"path":"/dev/reference/dot-check_sim_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"","code":".check_sim_input(   sim_type = c(\"linelist\", \"contacts\", \"outbreak\"),   contact_distribution,   contact_interval,   prob_infect,   outbreak_start_date,   min_outbreak_size,   onset_to_hosp = NULL,   onset_to_death = NULL,   add_names = NULL,   add_ct = NULL,   case_type_probs = NULL,   contact_tracing_status_probs = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL,   population_age = NULL )"},{"path":"/dev/reference/dot-check_sim_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"sim_type character string specifying simulation function function called within. contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. outbreak_start_date date start outbreak. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values confirmed case NA otherwise case line list. Default TRUE. Ct refers Cycle threshold Real-time PCR quantitative PCR (qPCR). case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information.","code":""},{"path":"/dev/reference/dot-check_sim_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Invisibly return sim_type  character string. function called side-effects, error input invalid.","code":""},{"path":"/dev/reference/dot-check_sim_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if arguments input to simulation function are valid — .check_sim_input","text":"Arguments used simulation functions required given default value, arguments inputs simulation functions default NULL used. Defaults mentioned argument documentation default exported simulation function default checking function. function either default NULL.","code":""},{"path":"/dev/reference/dot-sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample names using randomNames::randomNames() — .sample_names","title":"Sample names using randomNames::randomNames() — .sample_names","text":"Sample names specified genders sampling replacement avoid exhausting number name sample..replacement = FALSE. duplicated names sampling need removed ensure individual unique name. order enough unique names, names required sampled randomNames(), level oversampling determined buffer_factor argument. buffer_factor high names sampled takes longer, buffer_factor low enough unique names sampled .sample_names() function need loop enough unique names.","code":""},{"path":"/dev/reference/dot-sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample names using randomNames::randomNames() — .sample_names","text":"","code":".sample_names(.data, buffer_factor = 1.5)"},{"path":"/dev/reference/dot-sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample names using randomNames::randomNames() — .sample_names","text":".data <data.frame> containing infectious history branching process simulation. buffer_factor single numeric determining level oversampling (buffer) creating vector unique names randomNames().","code":""},{"path":"/dev/reference/dot-sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample names using randomNames::randomNames() — .sample_names","text":"character vector.","code":""},{"path":"/dev/reference/dot-sim_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal simulation function called by the exported simulation functions\nwithin simulist — .sim_internal","title":"Internal simulation function called by the exported simulation functions\nwithin simulist — .sim_internal","text":"internal function simulates line list, sim_type \"contacts\" \"outbreak\" contacts table well.","code":""},{"path":"/dev/reference/dot-sim_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal simulation function called by the exported simulation functions\nwithin simulist — .sim_internal","text":"","code":".sim_internal(   sim_type = c(\"linelist\", \"contacts\", \"outbreak\"),   contact_distribution,   contact_interval,   prob_infect,   onset_to_hosp = NULL,   onset_to_death = NULL,   hosp_risk = NULL,   hosp_death_risk = NULL,   non_hosp_death_risk = NULL,   outbreak_start_date,   add_names = NULL,   add_ct = NULL,   min_outbreak_size,   population_age,   case_type_probs = NULL,   contact_tracing_status_probs = NULL,   config )"},{"path":"/dev/reference/dot-sim_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal simulation function called by the exported simulation functions\nwithin simulist — .sim_internal","text":"sim_type character string specifying simulation function function called within. contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. outbreak_start_date date start outbreak. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values confirmed case NA otherwise case line list. Default TRUE. Ct refers Cycle threshold Real-time PCR quantitative PCR (qPCR). min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/dev/reference/dot-sim_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal simulation function called by the exported simulation functions\nwithin simulist — .sim_internal","text":"<data.frame> sim_type \"linelist\" \"contacts\", list two <data.frame>s sim_type \"outbreak\".","code":""},{"path":"/dev/reference/dot-sim_network_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","title":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","text":"Simulate branching process infinite network contact distribution provides function sample number contacts individual simulation. contact infected probability infection. time infection determined contact interval function.","code":""},{"path":"/dev/reference/dot-sim_network_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","text":"","code":".sim_network_bp(contact_distribution, contact_interval, prob_infect, config)"},{"path":"/dev/reference/dot-sim_network_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","text":"contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/dev/reference/dot-sim_network_bp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","text":"<data.frame> contact transmission chain data.","code":""},{"path":"/dev/reference/dot-sim_network_bp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a random network branching process model with a probability of\ninfection for each contact — .sim_network_bp","text":"contact distribution sampled takes network effect \\(q(n) \\sim (n + 1)p(n + 1)\\) \\(p(n)\\) probability density function distribution, e.g., Poisson Negative binomial. say, probability choosing contact random following contact chooses individuals probability proportional number contacts. plus one one contacts \"used\" infect person.","code":""},{"path":"/dev/reference/sim_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate contacts for an infectious disease outbreak — sim_contacts","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Simulate contacts infectious disease outbreak","code":""},{"path":"/dev/reference/sim_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"sim_contacts(   contact_distribution,   contact_interval,   prob_infect,   outbreak_start_date = as.Date(\"2023-01-01\"),   min_outbreak_size = 10,   population_age = c(1, 90),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"/dev/reference/sim_contacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. outbreak_start_date date start outbreak. min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/dev/reference/sim_contacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"contacts <data.frame>","code":""},{"path":"/dev/reference/sim_contacts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"/dev/reference/sim_contacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate contacts for an infectious disease outbreak — sim_contacts","text":"","code":"# load data required to simulate contacts contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(mean = 2) ) #> Citation cannot be created as author, year, journal or title is missing  contact_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  contacts <- sim_contacts(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5 )"},{"path":"/dev/reference/sim_linelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list — sim_linelist","title":"Simulate a line list — sim_linelist","text":"line list simulated using branching process parameterised user defined epidemiological parameters.","code":""},{"path":"/dev/reference/sim_linelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list — sim_linelist","text":"","code":"sim_linelist(   contact_distribution,   contact_interval,   prob_infect,   onset_to_hosp,   onset_to_death,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   add_names = TRUE,   add_ct = TRUE,   min_outbreak_size = 10,   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   config = create_config() )"},{"path":"/dev/reference/sim_linelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list — sim_linelist","text":"contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. outbreak_start_date date start outbreak. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values confirmed case NA otherwise case line list. Default TRUE. Ct refers Cycle threshold Real-time PCR quantitative PCR (qPCR). min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/dev/reference/sim_linelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list — sim_linelist","text":"line list <data.frame>","code":""},{"path":"/dev/reference/sim_linelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list — sim_linelist","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age structured population, <data.frame> two columns: age_range: column characters specifying lower upper bound age group, separated hyphen (-). bounds inclusive (integers). example, age group one ten given \"1-10\". proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"/dev/reference/sim_linelist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list — sim_linelist","text":"Joshua W. Lambert, Carmen Tamayo","code":""},{"path":"/dev/reference/sim_linelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list — sim_linelist","text":"","code":"# load data required to simulate line list contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(mean = 2) ) #> Citation cannot be created as author, year, journal or title is missing  contact_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function # example with single hospitalisation risk for entire population linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = 0.5 ) head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1   Brandon Bennett confirmed      m  29 2023-01-01     2023-01-01 #> 2  2 Jacqueline Rendon  probable      f  55 2023-01-01           <NA> #> 3  3        Amy Vester suspected      f  54 2023-01-01     2023-01-01 #> 4  4    Miranda Aviles  probable      f  83 2023-01-01     2023-01-05 #> 5  5    Sarah Sullivan suspected      f  45 2023-01-01           <NA> #> 6  6       Max Zarcula  probable      m  77 2023-01-01     2023-01-03 #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>     26.6 #> 2       <NA>         2023-01-02        2023-01-04       NA #> 3       <NA>         2022-12-27        2023-01-01       NA #> 4       <NA>         2023-01-02        2023-01-03       NA #> 5       <NA>         2022-12-30        2023-01-02       NA #> 6       <NA>         2023-01-03        2023-01-06       NA  # example with age-stratified hospitalisation risk # 20% for over 80s # 10% for under 5s # 5% for the rest age_dep_hosp_risk <- data.frame(   age_limit = c(1, 5, 80),   risk = c(0.1, 0.05, 0.2) ) linelist <- sim_linelist(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death,   hosp_risk = age_dep_hosp_risk ) head(linelist) #>   id         case_name case_type gender age date_onset date_admission #> 1  1 Muzammil al-Abood  probable      m  12 2023-01-01           <NA> #> 2  3  Tana Vierczhalek confirmed      f  11 2023-01-02           <NA> #> 3  4     Concetta Nash  probable      f  39 2023-01-02           <NA> #> 4  6     Chianne Jones confirmed      f  48 2023-01-01           <NA> #> 5  7 Andrew Warszawski confirmed      m  88 2023-01-01           <NA> #> 6  8     Brittney Chen suspected      f  34 2023-01-01           <NA> #>   date_death date_first_contact date_last_contact ct_value #> 1       <NA>               <NA>              <NA>       NA #> 2       <NA>         2023-01-04        2023-01-06     25.5 #> 3       <NA>         2022-12-29        2023-01-01       NA #> 4       <NA>         2023-01-01        2023-01-03     25.5 #> 5       <NA>         2023-01-01        2023-01-03     25.5 #> 6       <NA>         2022-12-30        2023-01-06       NA"},{"path":"/dev/reference/sim_outbreak.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a line list and a contacts table — sim_outbreak","title":"Simulate a line list and a contacts table — sim_outbreak","text":"line list contacts simulated using branching process parameterised previously published epidemiological parameters.","code":""},{"path":"/dev/reference/sim_outbreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"sim_outbreak(   contact_distribution,   contact_interval,   prob_infect,   onset_to_hosp,   onset_to_death,   hosp_risk = 0.2,   hosp_death_risk = 0.5,   non_hosp_death_risk = 0.05,   outbreak_start_date = as.Date(\"2023-01-01\"),   add_names = TRUE,   add_ct = TRUE,   min_outbreak_size = 10,   population_age = c(1, 90),   case_type_probs = c(suspected = 0.2, probable = 0.3, confirmed = 0.5),   contact_tracing_status_probs = c(under_followup = 0.7, lost_to_followup = 0.2, unknown     = 0.1),   config = create_config() )"},{"path":"/dev/reference/sim_outbreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a line list and a contacts table — sim_outbreak","text":"contact_distribution <epidist> object anonymous function contact distribution. discrete density function produces non-negative integers (including zero, \\(\\mathbb{N}_0\\)) number contacts per infection. contact_interval <epidist> object anonymous function contact interval. analogous serial interval generation time, defines time interval individual infected/infectious (simulation latency period assumed zero) contact another susceptible individual. prob_infect single numeric probability secondary contact infected infected primary contact. onset_to_hosp <epidist> object anonymous function onset hospitalisation delay distribution. onset_to_death <epidist> object anonymous function onset death delay distribution. hosp_risk Either single numeric hospitalisation risk everyone population, <data.frame> age specific hospitalisation risks Default 20% hospitalisation (0.2) entire population. See details examples information. hosp_death_risk Either single numeric death risk hospitalised individuals across population, <data.frame> age specific hospitalised death risks Default 50% death risk hospitals (0.5) entire population. See details examples information. non_hosp_death_risk Either single numeric death risk outside hospitals across population, <data.frame> age specific death risks outside hospitals. Default 5% death risk outside hospitals  (0.05) entire population. See details examples information. outbreak_start_date date start outbreak. add_names logical boolean whether add names row line list. Default TRUE. add_ct logical boolean whether add Ct values confirmed case NA otherwise case line list. Default TRUE. Ct refers Cycle threshold Real-time PCR quantitative PCR (qPCR). min_outbreak_size single numeric defining minimum chain size simulated outbreak. Default 10. can increased function simulate larger outbreak. population_age Either numeric vector two elements <data.frame> age structure population. Use numeric vector specific age range population, first element lower bound age range, second upper bound age range (inclusive, .e. [lower, upper]). <data.frame> age groups proportion population group. See details examples information. case_type_probs named numeric vector probability case type. names vector must \"suspected\", \"probable\", \"confirmed\". Values case type must sum one. contact_tracing_status_probs named numeric vector probability contact tracing status. names vector must \"under_followup\", \"lost_to_followup\", \"unknown\". Values contact tracing status must sum one. config list settings adjust randomly sampled delays Ct values (add_ct = TRUE). See create_config() information.","code":""},{"path":"/dev/reference/sim_outbreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a line list and a contacts table — sim_outbreak","text":"list two elements: line list <data.frame> contacts <data.frame>","code":""},{"path":"/dev/reference/sim_outbreak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a line list and a contacts table — sim_outbreak","text":"age-stratified hospitalised death risks <data.frame> need passed hosp_risk /hosp_death_risk arguments. <data.frame> two columns: age_limit: column one numeric per cell lower bound (minimum) age age group (inclusive). risk: column one numeric per cell proportion (probability) hospitalisation age group. 0 1. age structured population, <data.frame> two columns: age_range: column characters specifying lower upper bound age group, separated hyphen (-). bounds inclusive (integers). example, age group one ten given \"1-10\". proportion: column proportion population age group. Proportions must sum one.","code":""},{"path":"/dev/reference/sim_outbreak.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a line list and a contacts table — sim_outbreak","text":"Joshua W. Lambert","code":""},{"path":"/dev/reference/sim_outbreak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a line list and a contacts table — sim_outbreak","text":"","code":"# load data required to simulate outbreak data contact_distribution <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"contact distribution\",   prob_distribution = \"pois\",   prob_distribution_params = c(mean = 2) ) #> Citation cannot be created as author, year, journal or title is missing  contact_interval <- epiparameter::epidist(   disease = \"COVID-19\",   epi_dist = \"serial interval\",   prob_distribution = \"gamma\",   prob_distribution_params = c(shape = 1, scale = 1) ) #> Citation cannot be created as author, year, journal or title is missing  # get onset to hospital admission from {epiparameter} database onset_to_hosp <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to hospitalisation\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  # get onset to death from {epiparameter} database onset_to_death <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset to death\",   single_epidist = TRUE ) #> Using Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan #> B, Kinoshita R, Nishiura H (2020). “Incubation Period and Other #> Epidemiological Characteristics of 2019 Novel Coronavirus Infections #> with Right Truncation: A Statistical Analysis of Publicly Available #> Case Data.” _Journal of Clinical Medicine_. doi:10.3390/jcm9020538 #> <https://doi.org/10.3390/jcm9020538>..  #> To retrieve the short citation use the 'get_citation' function  outbreak <- sim_outbreak(   contact_distribution = contact_distribution,   contact_interval = contact_interval,   prob_infect = 0.5,   onset_to_hosp = onset_to_hosp,   onset_to_death = onset_to_death )"},{"path":"/dev/reference/simulist-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simulist: Tools to Simulate Line List and Contacts Data — simulist-package","title":"simulist: Tools to Simulate Line List and Contacts Data — simulist-package","text":"Tools simulate raw case data epidemic form line lists contacts using branching process.","code":""},{"path":[]},{"path":"/dev/reference/simulist-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simulist: Tools to Simulate Line List and Contacts Data — simulist-package","text":"Maintainer: Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [copyright holder] Authors: Carmen Tamayo carmen.tamayo-cuartero@lshtm.ac.uk (ORCID) contributors: Hugo Gruson hugo@data.org (ORCID) [contributor, reviewer] Pratik R. Gupte pratik.gupte@lshtm.ac.uk (ORCID) [contributor] Adam Kucharski adam.kucharski@lshtm.ac.uk (ORCID) [reviewer]","code":""},{"path":"/dev/news/index.html","id":"simulist-development-version","dir":"Changelog","previous_headings":"","what":"simulist (development version)","title":"simulist (development version)","text":"Second release simulist, updates core simulation model , result, arguments sim_*() functions simulating line list data /contact table data exported simulist updated. internal package architecture also refactored.","code":""},{"path":[]},{"path":"/dev/news/index.html","id":"external-development-version","dir":"Changelog","previous_headings":"New features","what":"External","title":"simulist (development version)","text":"create_config() now returns new element list: $network. default create_config() returns network = \"adjusted\", assumes simulation random network samples contacts excess degree distribution (see Details ?create_config()). network effect can changed \"unadjusted\" switch network effect. $network checked internally (.sim_network_bp()) error valid (#60). Package architecture diagram added design-principles.Rmd (#66). lintr GitHub action workflow (lint-changed-files.yaml) added suite continuous integration workflows (#68). Transmission chain visualisation added vis-linelist.Rmd (#70).","code":""},{"path":"/dev/news/index.html","id":"internal-development-version","dir":"Changelog","previous_headings":"New features","what":"Internal","title":"simulist (development version)","text":".sim_network_bp() added internal function replaces bpmodels::chain_sim() core simulation model producing contacted infected individuals. {bpmodels} removed dependency result (#60). .sample_names() added internal function utilise randomNames::randomNames() produce unique names randomNames(..., sample..replacement = FALSE). Refactor internal simulation architecture replaced .sim_bp_linelist(), .sim_clinical_linelist() .sim_contacts_tbl() .sim_internal() (#66). sim_utils.R file renamed utils.R (#66). Regression tests sim_*() functions now use snapshot testing detailed data checking (#65). Internal testing data (testdata) files updated, testdata/README.md instructions (#64).","code":""},{"path":"/dev/news/index.html","id":"breaking-changes-development-version","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist (development version)","text":"R serial_interval arguments removed sim_linelist(), sim_contacts() sim_outbreak() functions instead contact_distribution, contact_interval prob_infect used parameterise simulation. Documentation, functions vignettes, updated changes (#60). contact_distribution argument sim_*() functions requires density function supplied anonymous function. Information added simulist.Rmd explain . contacts table output sim_contacts() sim_outbreak() now uses column headers age gender instead cnt_age cnt_gender. contact_distribution redefined redocumented distribution contacts per individual, rather number contacts get infected v0.1.0. row.names <data.frame>s output sim_linelist(), sim_contacts() sim_outbreak() now sequential 1:nrows (#63).","code":""},{"path":"/dev/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist (development version)","text":"None","code":""},{"path":"/dev/news/index.html","id":"deprecated-and-defunct-development-version","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist (development version)","text":"None","code":""},{"path":"/dev/news/index.html","id":"simulist-010","dir":"Changelog","previous_headings":"","what":"simulist 0.1.0","title":"simulist 0.1.0","text":"Initial release simulist, R package containing tools simulate epidemiological data line lists contact tables.","code":""},{"path":"/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"simulist 0.1.0","text":"sim_linelist(): simulate line list data sim_contacts(): simulate contacts data sim_outbreak(): simulate line list contacts data Get Started vignette (simulist.Rmd) Age-stratified hospitalisation death risks vignette (age-strat-risks.Rmd) Age structured population vignette (age-struct-pop.Rmd) Visualising simulated data (vis-linelist.Rmd) Design Principles {simulist} (design-principles.Rmd) Unit tests (100% code coverage) documentation files. Continuous integration workflows R package checks, rendering README.md, calculating test coverage, deploying pkgdown website, updating citation file, checking new package system dependencies.","code":""},{"path":"/dev/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"simulist 0.1.0","text":"None","code":""},{"path":"/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"simulist 0.1.0","text":"None","code":""},{"path":"/dev/news/index.html","id":"deprecated-and-defunct-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated and defunct","title":"simulist 0.1.0","text":"None","code":""}]
